
HTTP
The Deﬁnitive Guide
HTTP
The Deﬁnitive Guide
David Gourley and Brian Tottywith Marjorie Sayer, Sailu Reddy, and Anshu Aggarwal
Beijing • Cambridge • Farnham • Köln • Paris • Sebastopol • Taipei • Tokyo
HTTP: The Definitive Guideby David Gourley and Brian Tottywith Marjorie Sayer, Sailu Reddy, and Anshu Aggarwal
Copyright © 2002 O’Reilly Media, Inc. All rights reserved.
Printed in the United States of America.
Published by O’Reilly Media, Inc., 1005 Gravenstein Highway North, Sebastopol,
CA 95472.
O’Reilly Media, Inc. books may be purchased for educational, business, or sales promotional use. On-line editions are also available for most titles (safari.oreilly.com). For more information, contact our cor-porate/institutional sales department: (800) 998-9938 or corporate@oreilly.com.
Editor:                 Linda Mui
Production Editor:      Rachel Wheeler
Cover Designer:         Ellie Volckhausen
Interior Designers:     David Futato and Melanie Wang
Printing History:
September 2002:     First Edition.
Nutshell Handbook, the Nutshell Handbook logo, and the O’Reilly logo are registered trademarks of
O’Reilly Media, Inc. HTTP: The Definitive Guide, the image of a thirteen-lined ground squirrel, andrelated trade dress are trademarks of O’Reilly Media, Inc. Many of the designations used bymanufacturers and sellers to distinguish their products are claimed as trademarks. Where thosedesignations appear in this book, and O’Reilly Media, Inc. was aware of a trademark claim, thedesignations have been printed in caps or initial caps.
While every precaution has been taken in the preparation of this book, the publisher and authorsassume no responsibility for errors or omissions, or for damages resulting from the use of theinformation contained herein.™
This book uses RepKover,  a durable and flexible lay-flat binding.
ISBN-10:  1-56592-509-2
ISBN-13:  978-1-56592-509-0[C]                          [01/08]
Table of Contents
Preface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xiii
Part I.    HTTP: The Web’s Foundation1.  Overview of HTTP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
HTTP: The Internet’s Multimedia Courier    3
Web Clients and Servers                    4
Resources 4
Transactions                               8
Messages 10
Connections                               11
Protocol Versions                         16
Architectural Components of the Web       17
The End of the Beginning                  21
For More Information                      212.  URLs and Resources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
Navigating the Internet’s Resources       24
URL Syntax                                26
URL Shortcuts                             30
Shady Characters                          35
A Sea of Schemes                          38
The Future                                40
For More Information                      413.  HTTP Messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
The Flow of Messages                      43
The Parts of a Message                    44v
Methods      53
Status Codes 59
Headers      67
For More Information                          734.  Connection Management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
TCP Connections                               74
TCP Performance Considerations                80
HTTP Connection Handling                      86
Parallel Connections                          88
Persistent Connections                        90
Pipelined Connections                         99
The Mysteries of Connection Close           101
For More Information                        104
Part II.    HTTP Architecture5.  Web Servers  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
Web Servers Come in All Shapes and Sizes    109
A Minimal Perl Web Server                   111
What Real Web Servers Do                    113
Step 1: Accepting Client Connections        115
Step 2: Receiving Request Messages          116
Step 3: Processing Requests                 120
Step 4: Mapping and Accessing Resources     120
Step 5: Building Responses                  125
Step 6: Sending Responses                   127
Step 7: Logging                             127
For More Information                        1276.  Proxies  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
Web Intermediaries                          129
Why Use Proxies?                            131
Where Do Proxies Go?                        137
Client Proxy Settings                       141
Tricky Things About Proxy Requests          144
Tracing Messages                            150
Proxy Authentication                        156vi  | Table of Contents
Proxy Interoperation                    157
For More Information                    1607.   Caching  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
Redundant Data Transfers                161
Bandwidth Bottlenecks                   161
Flash Crowds                            163
Distance Delays                         163
Hits and Misses                         164
Cache Topologies                        168
Cache Processing Steps                  171
Keeping Copies Fresh                    175
Controlling Cachability                 182
Setting Cache Controls                  186
Detailed Algorithms                     187
Caches and Advertising                  194
For More Information                    1968.   Integration Points: Gateways, Tunnels, and Relays . . . . . . . . . . . . . . . . . . . . 197
Gateways                                197
Protocol Gateways                       200
Resource Gateways                       203
Application Interfaces and Web Services 205
Tunnels206
Relays 212
For More Information                    2139.   Web Robots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
Crawlers and Crawling                   215
Robotic HTTP                            225
Misbehaving Robots                      228
Excluding Robots                        229
Robot Etiquette                         239
Search Engines                          242
For More Information                    24610. HTTP-NG. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247
HTTP’s Growing Pains                    247
HTTP-NG Activity                        248
Table of Contents   |  vii
Modularize and Enhance                       248
Distributed Objects                          249
Layer 1: Messaging                           250
Layer 2: Remote Invocation                   250
Layer 3: Web Application                     251
WebMUX      251
Binary Wire Protocol                         252
Current Status                               252
For More Information                         253
Part III.             Identiﬁcation, Authorization, and Security11. Client Identiﬁcation and Cookies  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
The Personal Touch                           257
HTTP Headers258
Client IP Address                            259
User Login  260
Fat URLs    262
Cookies     263
For More Information                         27612. Basic Authentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277
Authentication                               277
Basic Authentication                         281
The Security Flaws of Basic Authentication   283
For More Information                         28513. Digest Authentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 286
The Improvements of Digest Authentication    286
Digest Calculations                          291
Quality of Protection Enhancements           299
Practical Considerations                     300
Security Considerations                      303
For More Information                         30614. Secure HTTP  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307
Making HTTP Safe                             307
Digital Cryptography                         309viii    |    Table of Contents
Symmetric-Key Cryptography              313
Public-Key Cryptography                 315
Digital Signatures                      317
Digital Certificates                    319
HTTPS: The Details                      322
A Real HTTPS Client                     328
Tunneling Secure Traffic Through Proxies335
For More Information                    336
Part IV.        Entities, Encodings, and Internationalization15. Entities and Encodings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341
Messages Are Crates, Entities Are Cargo 342
Content-Length: The Entity’s Size       344
Entity Digests                          347
Media Type and Charset                  348
Content Encoding                        351
Transfer Encoding and Chunked Encoding  354
Time-Varying Instances                  359
Validators and Freshness                360
Range Requests                          363
Delta Encoding                          365
For More Information                    36916. Internationalization  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 370
HTTP Support for International Content  370
Character Sets and HTTP                 371
Multilingual Character Encoding Primer  376
Language Tags and HTTP                  384
Internationalized URIs                  389
Other Considerations                    392
For More Information                    39217. Content Negotiation and Transcoding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
Content-Negotiation Techniques          395
Client-Driven Negotiation               396
Server-Driven Negotiation               397
Transparent Negotiation                 400
Table of Contents   |   ix
Transcoding                         403
Next Steps                          405
For More Information                406
Part V.   Content Publishing and Distribution18. Web Hosting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 411
Hosting Services                    411
Virtual Hosting                     413
Making Web Sites Reliable           419
Making Web Sites Fast               422
For More Information                42319. Publishing Systems  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 424
FrontPage Server Extensions for Publishing Support                   424
WebDAV and Collaborative Authoring  429
For More Information                44620. Redirection and Load Balancing  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 448
Why Redirect?                       449
Where to Redirect                   449
Overview of Redirection Protocols   450
General Redirection Methods         452
Proxy Redirection Methods           462
Cache Redirection Methods           469
Internet Cache Protocol             473
Cache Array Routing Protocol        475
Hyper Text Caching Protocol         478
For More Information                48121. Logging and Usage Tracking  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 483
What to Log?                        483
Log Formats                         484
Hit Metering                        492
A Word on Privacy                   495
For More Information                495x  | Table of Contents
Part VI.        Appendixes
A.    URI Schemes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 499
B.    HTTP Status Codes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 505
C.   HTTP Header Reference  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 508
D.    MIME Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 533
E.   Base-64 Encoding. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 570
F.   Digest Authentication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 574
G.    Language Tags  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 581
H. MIME Charset Registry  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 602
Index  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 617
Table of Contents   |   xi
Preface
The Hypertext Transfer Protocol (HTTP) is the protocol programs use to communi-cate over the World Wide Web. There are many applications of HTTP, but HTTP ismost famous for two-way conversation between web browsers and web servers.
HTTPbeganasasimpleprotocol, so you might think there really isn’t that much tosay about it. And yet here you stand, with a two-pound book in your hands. If you’rewondering how we could have written 650 pages on HTTP, take a look at the Tableof Contents. This book isn’t just an HTTP header reference manual; it’s a veritablebible of web architecture.
In this book, we try to tease apart HTTP’s interrelated and often misunderstoodrules, and we offer you a series of topic-based chapters that explain all the aspects of
HTTP.Throughout the book, we are careful to explain the “why” of HTTP, not justthe “how.” And to save you time chasing references, we explain many of the criticalnon-HTTPtechnologies that are required to make HTTP applications work. You canfind the alphabetical header reference (which forms the basis of most conventional
HTTPtexts) in a conveniently organized appendix. We hope this conceptual designmakes it easy for you to work with HTTP.
This book is written for anyone who wants to understand HTTP and the underlyingarchitecture of the Web. Software and hardware engineers can use this book as acoherent reference for HTTP and related web technologies. Systems architects andnetwork administrators can use this book to better understand how to design,deploy, and manage complicated web architectures. Performance engineers and ana-lysts can benefit from the sections on caching and performance optimization. Mar-keting and consulting professionals will be able to use the conceptual orientation tobetter understand the landscape of web technologies.
This book illustrates common misconceptions, advises on “tricks of the trade,” pro-vides convenient reference material, and serves as a readable introduction to dry andconfusing standards specifications. In a single book, we detail the essential and inter-related technologies that make the Web work.xiii
This book is the result of a tremendous amount of work by many people who sharean enthusiasm for Internet technologies. We hope you find it useful.
Running Example: Joe’s Hardware Store
Many of our chapters include a running example of a hypothetical online hardwareand home-improvement store called “Joe’s Hardware” to demonstrate technologyconcepts. We have set up a real web site for the store (http://www.joes-hardware.com)foryoutotestsomeoftheexamplesinthebook.Wewillmaintainthiswebsitewhile this book remains in print.
Chapter-by-Chapter Guide
This book contains 21 chapters, divided into 5 logical parts (each with a technologytheme), and 8 useful appendixes containing reference data and surveys of relatedtechnologies:
Part I, HTTP: The Web’s Foundation
Part II, HTTP Architecture
Part III, Identification, Authorization, and Security
Part IV, Entities, Encodings, and Internationalization
Part V, Content Publishing and Distribution
Part VI, Appendixes
Part I, HTTP:The Web’s Foundation, describes the core technology of HTTP, thefoundation of the Web, in four chapters:• Chapter1,Overview of HTTP, is a rapid-paced overview of HTTP.• Chapter2, URLs and Resources, details the formats of uniform resource locators(URLs) and the various types of resources that URLs name across the Internet. Italso outlines the evolution to uniform resource names (URNs).• Chapter3,HTTP Messages, details how HTTP messages transport web content.• Chapter4, Connection Management, explains the commonly misunderstood andpoorly documented rules and behavior for managing HTTP connections.
Part II, HTTP Architecture, highlights the HTTP server, proxy, cache, gateway, androbot applications that are the architectural building blocks of web systems. (Webbrowsers are another building block, of course, but browsers already were coveredthoroughly in Part I of the book.) Part II contains the following six chapters:• Chapter5,Web Servers, gives an overview of web server architectures.• Chapter6, Proxies, explores HTTP proxy servers, which are intermediary serv-ers that act as platforms for HTTP services and controls.• Chapter7, Caching, delves into the science of web caches—devices that improveperformance and reduce traffic by making local copies of popular documents.xiv   |   Preface• Chapter8, Integration Points:Gateways, Tunnels, and Relays, explains gatewaysand application servers that allow HTTP to work with software that speaks dif-ferent protocols, including Secure Sockets Layer (SSL) encrypted protocols.• Chapter9, Web Robots, describes the various types of clients that pervade the
Web, including the ubiquitous browsers, robots and spiders, and search engines.• Chapter10, HTTP-NG, talks about HTTP developments still in the works: the
HTTP-NG protocol.
Part III, Identification, Authorization, and Security, presents a suite of techniques andtechnologies to track identity, enforce security, and control access to content. It con-tains the following four chapters:• Chapter11, Client Identification and Cookies, talks about techniques to identifyusers so that content can be personalized to the user audience.• Chapter12, Basic Authentication, highlights the basic mechanisms to verify useridentity. The chapter also examines how HTTP authentication interfaces withdatabases.• Chapter13, Digest Authentication, explains digest authentication, a complexproposed enhancement to HTTP that provides significantly enhanced security.• Chapter14, Secure HTTP, is a detailed overview of Internet cryptography, digi-tal certificates, and SSL.
Part IV, Entities, Encodings, and Internationalization, focuses on the bodies of HTTPmessages (which contain the actual web content) and on the web standards thatdescribe and manipulate content stored in the message bodies. Part IV contains threechapters:• Chapter15,Entities and Encodings, describes the structure of HTTP content.• Chapter16, Internationalization, surveys the web standards that allow usersaround the globe to exchange content in different languages and character sets.• Chapter17, Content Negotiation and Transcoding, explains mechanisms fornegotiating acceptable content.
Part V, Content Publishing and Distribution, discusses the technology for publishingand disseminating web content. It contains four chapters:• Chapter18, Web Hosting, discusses the ways people deploy servers in modernweb hosting environments and HTTP support for virtual web hosting.• Chapter19, Publishing Systems, discusses the technologies for creating web con-tent and installing it onto web servers.• Chapter20,Redirection and Load Balancing, surveys the tools and techniques fordistributing incoming web traffic among a collection of servers.• Chapter21, Logging and Usage Tracking, covers log formats and commonquestions.
Preface   |  xv
Part VI, Appendixes, contains helpful reference appendixes and tutorials in relatedtechnologies:• AppendixA, URI Schemes, summarizes the protocols supported through uni-form resource identifier (URI) schemes.• AppendixB,HTTP Status Codes, conveniently lists the HTTP response codes.• AppendixC, HTTP Header Reference, provides a reference list of HTTP headerfields.• AppendixD, MIME Types, provides an extensive list of MIME types andexplains how MIME types are registered.• AppendixE, Base-64 Encoding, explains base-64 encoding, used by HTTPauthentication.• AppendixF, Digest Authentication, gives details on how to implement variousauthentication schemes in HTTP.• AppendixG, Language Tags, defines language tag values for HTTP languageheaders.• AppendixH,MIMECharsetRegistry, provides a detailed list of character encod-ings, used for HTTP internationalization support.
Each chapter contains many examples and pointers to additional reference material.
Typographic Conventions
In this book, we use the following typographic conventions:
Italic
Used for URLs, C functions, command names, MIME types, new terms wherethey are defined, and emphasis
Constant width
Used for computer output, code, and any literal text
Constant width bold
Used for user input
Comments and Questions
Please address comments and questions concerning this book to the publisher:
O’Reilly & Associates, Inc.1005 Gravenstein Highway North
Sebastopol, CA 95472(800) 998-9938 (in the United States or Canada)(707) 829-0515 (international/local)(707) 829-0104 (fax)xvi   |   Preface
There is a web page for this book, which lists errata, examples, or any additionalinformation. You can access this page at:http://www.oreilly.com/catalog/httptdg/
To comment or ask technical questions about this book, send email to:bookquestions@oreilly.com
For more information about books, conferences, Resource Centers, and the O’Reilly
Network, see the O’Reilly web site at:http://www.oreilly.com
Acknowledgments
This book is the labor of many. The five authors would like to hold up a few peoplein thanks for their significant contributions to this project.
To start, we’d like to thank Linda Mui, our editor at O’Reilly. Linda first met with
David and Brian way back in 1996, and she refined and steered several concepts intothe book you hold today. Linda also helped keep our wandering gang of first-timebookauthorsmovinginacoherentdirectionandonaprogressing(ifnotrapid)time-line. Most of all, Linda gave us the chance to create this book. We’re very grateful.
We’d also like to thank several tremendously bright, knowledgeable, and kind soulswhodevoted noteworthy energy to reviewing, commenting on, and correcting draftsof this book. These include Tony Bourke, Sean Burke, Mike Chowla, Shernaz Daver,
Fred Douglis, Paula Ferguson, Vikas Jha, Yves Lafon, Peter Mattis, Chuck Neer-daels, Luis Tavera, Duane Wessels, Dave Wu, and Marco Zagha. Their viewpointsand suggestions have improved the book tremendously.
Rob Romano from O’Reilly created most of the amazing artwork you’ll find in thisbook. The book contains an unusually large number of detailed illustrations thatmake subtle concepts very clear. Many of these illustrations were painstakingly cre-ated and revised numerous times. If a picture is worth a thousand words, Rob addedhundreds of pages of value to this book.
Brian would like to personally thank all of the authors for their dedication to thisproject. A tremendous amount of time was invested by the authors in a challenge tomake the first detailed but accessible treatment of HTTP. Weddings, childbirths,killer work projects, startup companies, and graduate schools intervened, but theauthors held together to bring this project to a successful completion. We believe theresult is worthy of everyone’s hard work and, most importantly, that it provides avaluable service. Brian also would like to thank the employees of Inktomi for theirenthusiasm and support and for their deep insights about the use of HTTP in real-world applications. Also, thanks to the fine folks at Cajun-shop.com for allowing usto use their site for some of the examples in this book.
Preface   |  xvii
David would like to thank his family, particularly his mother and grandfather fortheir ongoing support. He’d like to thank those that have put up with his erraticschedule over the years writing the book. He’d also like to thank Slurp, Orctomi, and
Norma for everything they’ve done, and his fellow authors for all their hard work.
Finally, he would like to thank Brian for roping him into yet another adventure.
Marjorie would like to thank her husband, Alan Liu, for technical insight, familialsupport and understanding. Marjorie thanks her fellow authors for many insightsand inspirations. She is grateful for the experience of working together on this book.
Sailu would like to thank David and Brian for the opportunity to work on this book,and Chuck Neerdaels for introducing him to HTTP.
Anshu would like to thank his wife, Rashi, and his parents for their patience, sup-port, and encouragement during the long years spent writing this book.
Finally, the authors collectively thank the famous and nameless Internet pioneers,whose research, development, and evangelism over the past four decades contrib-uted so much to our scientific, social, and economic community. Without theselabors, there would be no subject for this book.xviii    |   Preface
PART I
HTTP: The Web’s Foundation
This section is an introduction to the HTTP protocol. The next four chaptersdescribe the core technology of HTTP, the foundation of the Web:• Chapter1,Overview of HTTP, is a rapid-paced overview of HTTP.• Chapter2, URLs and Resources, details the formats of URLs and the varioustypes of resources that URLs name across the Internet. We also outline the evo-lution to URNs.• Chapter3, HTTP Messages, details the HTTP messages that transport webcontent.• Chapter4, Connection Management, discusses the commonly misunderstoodand poorly documented rules and behavior for managing TCP connections by
HTTP.
CHAPTER 1
Overview of HTTP
The world’s web browsers, servers, and related web applications all talk to eachother through HTTP, the Hypertext Transfer Protocol. HTTP is the common lan-guage of the modern global Internet.
This chapter is a concise overview of HTTP. You’ll see how web applications use
HTTP to communicate, and you’ll get a rough idea of how HTTP does its job. Inparticular, we talk about:• How web clients and servers communicate• Where resources (web content) come from• How web transactions work• The format of the messages used for HTTP communication• The underlying TCP network transport• The different variations of the HTTP protocol• Some of the many HTTP architectural components installed around the Internet
We’ve got a lot of ground to cover, so let’s get started on our tour of HTTP.
HTTP: The Internet’s Multimedia Courier
Billions of JPEG images, HTML pages, text files, MPEG movies, WAV audio files,
Java applets, and more cruise through the Internet each and every day. HTTP movesthe bulk of this information quickly, conveniently, and reliably from web servers allaround the world to web browsers on people’s desktops.
Because HTTP uses reliable data-transmission protocols, it guarantees that your datawill not be damaged or scrambled in transit, even when it comes from the other side ofthe globe. This is good for you as a user, because you can access information withoutworrying about its integrity. Reliable transmission is also good for you as an Internetapplication developer, because you don’t have to worry about HTTP communications3being destroyed, duplicated, or distorted in transit. You can focus on programmingthe distinguishing details of your application, without worrying about the flaws andfoibles of the Internet.
Let’s look more closely at how HTTP transports the Web’s traffic.
Web Clients and Servers
Webcontentlives on web servers. Web servers speak the HTTP protocol, so they areoften called HTTP servers. These HTTP servers store the Internet’s data and providethe data when it is requested by HTTP clients. The clients send HTTP requests toservers, and servers return the requested data in HTTP responses, as sketched in
Figure 1-1. Together, HTTP clients and HTTP servers make up the basic compo-nents of the World Wide Web.www.oreilly.com
HTTP request“Get me the document called /index.html.”
HTTP response
Client                   “Okay, here it is, it’s in HTML format and is 3,150 characters long.”      Server
Figure 1-1. Web clients and servers
You probably use HTTP clients every day. The most common client is a webbrowser, such as Microsoft Internet Explorer or Netscape Navigator. Web browsersrequest HTTP objects from servers and display the objects on your screen.
When you browse to a page, such as “http://www.oreilly.com/index.html,” yourbrowser sends an HTTP request to the server www.oreilly.com (see Figure 1-1). Theserver tries to find the desired object (in this case, “/index.html”) and, if successful,sends the object to the client in an HTTP response, along with the type of the object,the length of the object, and other information.
Resources
Web servers host web resources. A web resource is the source of web content. Thesimplest kind of web resource is a static file on the web server’s filesystem. Thesefiles can contain anything: they might be text files, HTML files, Microsoft Wordfiles, Adobe Acrobat files, JPEG image files, AVI movie files, or any other format youcan think of.
However, resources don’t have to be static files. Resources can also be software pro-grams that generate content on demand. These dynamic content resources can gen-erate content based on your identity, on what information you’ve requested, or on|
the time of day. They can show you a live image from a camera, or let you tradestocks, search real estate databases, or buy gifts from online stores (see Figure 1-2).
Filesystem          Resources
Image file
Text file
InternetWeb camgateway
Client                          Server
Stock tradinggateway
Real estate searchgateway11000101101
E-commercegateway
Figure 1-2. A web resource is anything that provides web content
In summary, a resource is any kind of content source. A file containing your com-pany’s sales forecast spreadsheet is a resource. A web gateway to scan your localpublic library’s shelves is a resource. An Internet search engine is a resource.
Media Types
Because the Internet hosts many thousands of different data types, HTTP carefullytags each object being transported through the Web with a data format label called a
MIMEtype. MIME (Multipurpose Internet Mail Extensions) was originally designedto solve problems encountered in moving messages between different electronic mailsystems. MIME worked so well for email that HTTP adopted it to describe and labelits own multimedia content.
Webservers attach a MIME type to all HTTP object data (see Figure 1-3). When awebbrowser gets an object back from a server, it looks at the associated MIME typeto see if it knows how to handle the object. Most browsers can handle hundreds ofpopular object types: displaying image files, parsing and formatting HTML files,playing audio files through the computer’s speakers, or launching external plug-insoftware to handle special formats.|

MIME type
Content-type: image/jpeg
Content-length: 12984
Client                              Server
Figure 1-3. MIME types are sent back with the data content
AMIMEtype is a textual label, represented as a primary object type and a specificsubtype, separated by a slash. For example:• An HTML-formatted text document would be labeled with type text/html.• A plain ASCII text document would be labeled with type text/plain.• A JPEG version of an image would be image/jpeg.• A GIF-format image would be image/gif.• An Apple QuickTime movie would be video/quicktime.• A Microsoft PowerPoint presentation would be application/vnd.ms-powerpoint.
There are hundreds of popular MIME types, and many more experimental or limited-use types. A very thorough MIME type list is provided in Appendix D.
URIs
Each web server resource has a name, so clients can point out what resources theyare interested in. The server resource name is called a uniform resource identifier,or
URI. URIs are like the postal addresses of the Internet, uniquely identifying andlocating information resources around the world.
Here’s a URI for an image resource on Joe’s Hardware store’s web server:http://www.joes-hardware.com/specials/saw-blade.gif
Figure 1-4 shows how the URI specifies the HTTP protocol to access the saw-blade
GIF resource on Joe’s store’s server. Given the URI, HTTP can retrieve the object.
URIs come in two flavors, called URLs and URNs. Let’s take a peek at each of thesetypes of resource identifiers now.
URLs
The uniform resource locator (URL) is the most common form of resource identifier.
URLsdescribe the specific location of a resource on a particular server. They tell youexactly how to fetch a resource from a precise, fixed location. Figure 1-4 shows howa URL tells precisely where a resource is located and how to access it. Table 1-1shows a few examples of URLs.|
12 3
Use HTTP protocol     Go to www.joes-hardware.com         Grab the resource called /specials/saw-blade.gifhttp://www.joes-hardware.com/specials/saw-blade.gif
Content-type: image/gif
Content-length: 8572
Client               www.joes-hardware.com
Figure 1-4. URLs specify protocol, server, and local resource
Table 1-1. Example URLs
URL        Descriptionhttp://www.oreilly.com/index.html           The home URL for O’Reilly & Associates, Inc.http://www.yahoo.com/images/logo.gif        The URL for the Yahoo! web site’s logohttp://www.joes-hardware.com/inventory-check.                                The URL for a program that checks if inventory itemcgi?item=12731                              #12731 is in stockftp://joe:tools4u@ftp.joes-hardware.com/locking-                             The URL for the locking-pliers.gif image file, usingpliers.gif password-protected FTP as the access protocol
Most URLs follow a standardized format of three main parts:• The first part of the URL is called the scheme, and it describes the protocol usedto access the resource. This is usually the HTTP protocol (http://).• The second part gives the server Internet address (e.g., www.joes-hardware.com).• The rest names a resource on the web server (e.g., /specials/saw-blade.gif).
Today, almost every URI is a URL.
URNs
The second flavor of URI is the uniform resource name, or URN. A URN serves as aunique name for a particular piece of content, independent of where the resourcecurrently resides. These location-independent URNs allow resources to move fromplace to place. URNs also allow resources to be accessed by multiple network accessprotocols while maintaining the same name.
For example, the following URN might be used to name the Internet standards docu-ment “RFC 2141” regardless of where it resides (it may even be copied in severalplaces):urn:ietf:rfc:2141|

URNsare still experimental and not yet widely adopted. To work effectively, URNsneed a supporting infrastructure to resolve resource locations; the lack of such aninfrastructure has also slowed their adoption. But URNs do hold some excitingpromise for the future. We’ll discuss URNs in a bit more detail in Chapter 2, butmost of the remainder of this book focuses almost exclusively on URLs.
Unless stated otherwise, we adopt the conventional terminology and use URI and
URL interchangeably for the remainder of this book.
Transactions
Let’s look in more detail how clients use HTTP to transact with web servers andtheir resources. An HTTP transaction consists of a request command (sent from cli-ent to server), and a response result (sent from the server back to the client). Thiscommunication happens with formatted blocks of data called HTTP messages,asillustrated in Figure 1-5.
HTTP request message containsthe command and the URI
GET /specials/saw-blade.gif HTTP/1.0
Host: www.joes-hardware.com
Internet
Client      HTTP/1.0 200 OK                  www.joes-hardware.com
Content-type: image/gif
Content-length: 8572                               HTTP response message containsthe result of the transaction
Figure 1-5. HTTP transactions consist of request and response messages
Methods
HTTP supports several different request commands, called HTTP methods. Every
HTTPrequestmessagehasamethod.Themethodtellstheserverwhatactiontoper-form (fetch a web page, run a gateway program, delete a file, etc.). Table 1-2lists fivecommon HTTP methods.
Table 1-2. Some common HTTP methods
HTTP method    Description
GET            Send named resource from the server to the client.
PUT            Store data from client into a named server resource.|

Table 1-2. Some common HTTP methods (continued)
HTTP method                       Description
DELETE                            Delete the named resource from a server.
POST                              Send client data into a server gateway application.
HEAD                              Send just the HTTP headers from the response for the named resource.
We’ll discuss HTTP methods in detail in Chapter 3.
Status Codes
Every HTTP response message comes back with a status code. The status code is athree-digit numeric code that tells the client if the request succeeded, or if otheractions are required. A few common status codes are shown in Table 1-3.
Table 1-3. Some common HTTP status codes
HTTP status code                  Description200                               OK. Document returned correctly.302                               Redirect. Go someplace else to get the resource.404                               Not Found. Can’t find this resource.
HTTP also sends an explanatory textual “reason phrase” with each numeric statuscode (see the response message in Figure 1-5). The textual phrase is included only fordescriptive purposes; the numeric code is used for all processing.
The following status codes and reason phrases are treated identically by HTTP soft-ware:200 OK200 Document attached200 Success200 All’s cool, dude
HTTP status codes are explained in detail in Chapter 3.
Web Pages Can Consist of Multiple Objects
An application often issues multiple HTTP transactions to accomplish a task. Forexample, a web browser issues a cascade of HTTP transactions to fetch and display agraphics-rich web page. The browser performs one transaction to fetch the HTML“skeleton” that describes the page layout, then issues additional HTTP transactionsfor each embedded image, graphics pane, Java applet, etc. These embeddedresources might even reside on different servers, as shown in Figure 1-6. Thus, a“web page” often is a collection of resources, not a single resource.|

Internet
Server 1
Server 2
Client
Figure 1-6. Composite web pages require separate HTTP transactions for each embedded resource
Messages
Now let’s take a quick look at the structure of HTTP request and response mes-sages. We’ll study HTTP messages in exquisite detail in Chapter 3.
HTTP messages are simple, line-oriented sequences of characters. Because they areplain text, not binary, they are easy for humans to read and write.* Figure 1-7 showsthe HTTP messages for a simple transaction.(a) Request message                 (b) Response message
GET /test/hi-there.txt HTTP/1.0                         Start line    HTTP/1.0 200 OK
Accept: text/*         Headers       Content-type: text/plain
Accept-Language: en,fr               Content-length: 19
Body        Hi! I’m a message!
Figure 1-7. HTTP messages have a simple, line-oriented text structure
HTTP messages sent from web clients to web servers are called request messages.
Messages from servers to clients are called response messages. There are no otherkinds of HTTP messages. The formats of HTTP request and response messages arevery similar.* Some programmers complain about the difficulty of HTTP parsing, which can be tricky and error-prone,especially when designing high-speed software. A binary format or a more restricted text format might havebeen simpler to process, but most HTTP programmers appreciate HTTP’s extensibility and debuggability.|

HTTP messages consist of three parts:
Start line
The first line of the message is the start line, indicating what to do for a requestor what happened for a response.
Header fields
Zero or more header fields follow the start line. Each header field consists of aname and a value, separated by a colon (:) for easy parsing. The headers endwith a blank line. Adding a header field is as easy as adding another line.
Body
After the blank line is an optional message body containing any kind of data.
Request bodies carry data to the web server; response bodies carry data back tothe client. Unlike the start lines and headers, which are textual and structured,the body can contain arbitrary binary data (e.g., images, videos, audio tracks,software applications). Of course, the body can also contain text.
Simple Message Example
Figure 1-8 shows the HTTP messages that might be sent as part of a simple transac-tion. The browser requests the resource http://www.joes-hardware.com/tools.html.
In Figure 1-8, the browser sends an HTTP request message. The request has a GETmethod in the start line, and the local resource is /tools.html. The request indicates itis speaking Version 1.0 of the HTTP protocol. The request message has no body,because no request data is needed to GET a simple document from a server.
Theserver sends back an HTTP response message. The response contains the HTTPversion number (HTTP/1.0), a success status code (200), a descriptive reason phrase(OK), and a block of response header fields, all followed by the response body con-taining the requested document. The response body length is noted in the Content-
Length header, and the document’s MIME type is noted in the Content-Typeheader.
Connections
Now that we’ve sketched what HTTP’s messages look like, let’s talk for a momentabout how messages move from place to place, across Transmission Control Protocol(TCP) connections.
TCP/IP
HTTP is an application layer protocol. HTTP doesn’t worry about the nitty-grittydetails of network communication; instead, it leaves the details of networking to
TCP/IP, the popular reliable Internet transport protocol.|
(a) Request message
Request start line (command)    GET /tools.html HTTP/1.0
User-agent: Mozilla/4.75 [en] (Win98; U)
Host: www.joes-hardware.com
Request headers     Accept: text/html, image/gif, image/jpeg
Accept-language: en
No request body
Client                 (b) Response message                              www.joes-hardware.com
Response start line  HTTP/1.0 200 OK(status)   Date: Sun, o1 Oct 2000 23:25:17 GMT
Server: Apache/1.3.11 BSafe-SSL/1.38 (Unix)
Response headers     Last-modified: Tue, 04 Jul 2000 09:46:21 GMT
Content-length: 403
Content-type: text/html<HTML><HEAD><TITLE>Joe’s Tools</TITLE></HEAD><BODY><H1>Tools Page</H1><H2>Hammers</H2><P>Joe’s Hardware Online has the largest selection ofhammers on the earth.</P>
Response body     <H2><A NAME=drills></A>Drills</H2><P>Joe’s Hardware has a complete line of cordlessand corded drills, as well as the latest inplutonium-powered atomic drills, for those bigaround the house jobs./<P>...</BODY></HTML>
Figure 1-8. Example GET transaction for http://www.joes-hardware.com/tools.html
TCP provides:• Error-free data transportation• In-order delivery (data will always arrive in the order in which it was sent)• Unsegmented data stream (can dribble out data in any size at any time)
The Internet itself is based on TCP/IP, a popular layered set of packet-switched net-workprotocols spoken by computers and network devices around the world. TCP/IPhides the peculiarities and foibles of individual networks and hardware, letting com-puters and networks of any type talk together reliably.
Once a TCP connection is established, messages exchanged between the client andserver computers will never be lost, damaged, or received out of order.
In networking terms, the HTTP protocol is layered over TCP. HTTP uses TCP totransport its message data. Likewise, TCP is layered over IP (see Figure 1-9).|

HTTP                    Application layer
TCP                    Transport layer
IP                    Network layer
Network-specific link interface      Data link layer
Physical network hardware          Physical layer
Figure 1-9. HTTP network protocol stack
Connections, IP Addresses, and Port Numbers
Before an HTTP client can send a message to a server, it needs to establish a TCP/IPconnection between the client and server using Internet protocol (IP) addresses andport numbers.
Setting up a TCP connection is sort of like calling someone at a corporate office.
First, you dial the company’s phone number. This gets you to the right organization.
Then, you dial the specific extension of the person you’re trying to reach.
In TCP, you need the IP address of the server computer and the TCP port numberassociated with the specific software program running on the server.
This is all well and good, but how do you get the IP address and port number of the
HTTPserver in the first place? Why, the URL, of course! We mentioned before that
URLs are the addresses for resources, so naturally enough they can provide us withthe IP address for the machine that has the resource. Let’s take a look at a few URLs:http://207.200.83.29:80/index.htmlhttp://www.netscape.com:80/index.htmlhttp://www.netscape.com/index.html
The first URL has the machine’s IP address, “207.200.83.29”, and port number,“80”.
ThesecondURLdoesn’thaveanumericIPaddress;ithasatextualdomainname,orhostname (“www.netscape.com”). The hostname is just a human-friendly alias for an
IP address. Hostnames can easily be converted into IP addresses through a facilitycalled the Domain Name Service (DNS), so we’re all set here, too. We will talk muchmore about DNS and URLs in Chapter 2.
Thefinal URL has no port number. When the port number is missing from an HTTP
URL, you can assume the default value of port 80.
With the IP address and port number, a client can easily communicate via TCP/IP.
Figure 1-10 shows how a browser uses HTTP to display a simple HTML resourcethat resides on a distant server.|

Here are the steps:(a) The browser extracts the server’s hostname from the URL.(b) The browser converts the server’s hostname into the server’s IP address.(c) The browser extracts the port number (if any) from the URL.(d) The browser establishes a TCP connection with the web server.(e) The browser sends an HTTP request message to the server.(f)     The server sends an HTTP response back to the browser.(g) The connection is closed, and the browser displays the document.
User types in URL      (c) Get the port number (80)(d) Connect to 161.58.228.45 port 80http://www.joes-hardware.com:80/tools.html
Internet(a) Get the hostname                    Client                             Serverwww.joes-hardware.com(e) Send an HTTP GET request(b) DNS
Internet
Client                             Server(f) Read HTTP response from server
Internet
Client                             Server(g) Close the connection
Internet
Client                             Server
Browser showing page
Figure 1-10. Basic browser connection process|

A Real Example Using Telnet
Because HTTP uses TCP/IP, and is text-based, as opposed to using some obscurebinary format, it is simple to talk directly to a web server.
The Telnet utility connects your keyboard to a destination TCP port and connectsthe TCP port output back to your display screen. Telnet is commonly used forremote terminal sessions, but it can generally connect to any TCP server, including
HTTP servers.
You can use the Telnet utility to talk directly to web servers. Telnet lets you open a
TCP connection to a port on a machine and type characters directly into the port.
The web server treats you as a web client, and any data sent back on the TCP con-nection is displayed onscreen.
Let’s use Telnet to interact with a real web server. We will use Telnet to fetch thedocument pointed to by the URL http://www.joes-hardware.com:80/tools.html (youcan try this example yourself).
Let’s review what should happen:• First, we need to look up the IP address of www.joes-hardware.com and open a
TCP connection to port 80 on that machine. Telnet does this legwork for us.• Once the TCP connection is open, we need to type in the HTTP request.• Whentherequest is complete (indicated by a blank line), the server should sendback the content in an HTTP response and close the connection.
OurexampleHTTPrequestforhttp://www.joes-hardware.com:80/tools.html is shownin Example 1-1. What we typed is shown in boldface.
Example1-1.An HTTP transaction using telnet% telnet www.joes-hardware.com 80
Trying 161.58.228.45...
Connected to joes-hardware.com.
Escape character is '^]'.
GET /tools.html HTTP/1.1
Host: www.joes-hardware.com
HTTP/1.1 200 OK
Date: Sun, 01 Oct 2000 23:25:17 GMT
Server: Apache/1.3.11 BSafe-SSL/1.38 (Unix) FrontPage/4.0.4.3
Last-Modified: Tue, 04 Jul 2000 09:46:21 GMT
ETag: "373979-193-3961b26d"
Accept-Ranges: bytes
Content-Length: 403
Connection: close
Content-Type: text/html|

Example1-1.An HTTP transaction using telnet (continued)<HTML><HEAD><TITLE>Joe's Tools</TITLE></HEAD><BODY><H1>Tools Page</H1><H2>Hammers</H2><P>Joe's Hardware Online has the largest selection of hammers on the earth.</P><H2><A NAME=drills></A>Drills</H2><P>Joe's Hardware has a complete line of cordless and corded drills, as well as the latestin plutonium-powered atomic drills, for those big around the house jobs.</P> ...</BODY></HTML>
Connection closed by foreign host.
Telnet looks up the hostname and opens a connection to the www.joes-hardware.comwebserver, which is listening on port 80. The three lines after the command are out-put from Telnet, telling us it has established a connection.
Wethentypeinourbasicrequestcommand,“GET/tools.htmlHTTP/1.1”,andsenda Host header providing the original hostname, followed by a blank line, asking theserver to GET us the resource “/tools.html” from the server www.joes-hardware.com.
After that, the server responds with a response line, several response headers, a blankline, and finally the body of the HTML document.
Beware that Telnet mimics HTTP clients well but doesn’t work well as a server.
And automated Telnet scripting is no fun at all. For a more flexible tool, youmight want to check out nc (netcat). The nc tool lets you easily manipulate andscript UDP- and TCP-based traffic, including HTTP. See http://netcat.sourceforge.net for details.
Protocol Versions
There are several versions of the HTTP protocol in use today. HTTP applicationsneed to work hard to robustly handle different variations of the HTTP protocol. Theversions in use are:
HTTP/0.9
The1991prototype version of HTTP is known as HTTP/0.9. This protocol con-tains many serious design flaws and should be used only to interoperate withlegacy clients. HTTP/0.9 supports only the GET method, and it does not sup-port MIME typing of multimedia content, HTTP headers, or version numbers.
HTTP/0.9 was originally defined to fetch simple HTML objects. It was soonreplaced with HTTP/1.0.
HTTP/1.01.0 was the first version of HTTP that was widely deployed. HTTP/1.0 addedversion numbers, HTTP headers, additional methods, and multimedia objecthandling. HTTP/1.0 made it practical to support graphically appealing web|
pages and interactive forms, which helped promote the wide-scale adoption ofthe World Wide Web. This specification was never well specified. It representeda collection of best practices in a time of rapid commercial and academic evolu-tion of the protocol.
HTTP/1.0+
Many popular web clients and servers rapidly added features to HTTP in themid-1990s to meet the demands of a rapidly expanding, commercially success-ful World Wide Web. Many of these features, including long-lasting “keep-alive” connections, virtual hosting support, and proxy connection support, wereadded to HTTP and became unofficial, de facto standards. This informal,extended version of HTTP is often referred to as HTTP/1.0+.
HTTP/1.1
HTTP/1.1focusedoncorrecting architectural flaws in the design of HTTP, spec-ifying semantics, introducing significant performance optimizations, and remov-ing mis-features. HTTP/1.1 also included support for the more sophisticatedweb applications and deployments that were under way in the late 1990s.
HTTP/1.1 is the current version of HTTP.
HTTP-NG (a.k.a. HTTP/2.0)
HTTP-NG is a prototype proposal for an architectural successor to HTTP/1.1that focuses on significant performance optimizations and a more powerful frame-work for remote execution of server logic. The HTTP-NG research effort con-cluded in 1998, and at the time of this writing, there are no plans to advance thisproposal as a replacement for HTTP/1.1. See Chapter 10 for more information.
Architectural Components of the Web
In this overview chapter, we’ve focused on how two web applications (web browsersand web servers) send messages back and forth to implement basic transactions.
There are many other web applications that you interact with on the Internet. In thissection, we’ll outline several other important applications, including:
Proxies
HTTP intermediaries that sit between clients and servers
Caches
HTTP storehouses that keep copies of popular web pages close to clients
Gateways
Special web servers that connect to other applications
Tunnels
Special proxies that blindly forward HTTP communications
Agents
Semi-intelligent web clients that make automated HTTP requests|

Proxies
Let’s start by looking at HTTP proxy servers, important building blocks for websecurity, application integration, and performance optimization.
As shown in Figure 1-11, a proxy sits between a client and a server, receiving all ofthe client’s HTTP requests and relaying the requests to the server (perhaps aftermodifying the requests). These applications act as a proxy for the user, accessing theserver on the user’s behalf.
Internet
Client             Proxy                         Server
Figure 1-11. Proxies relay traffic between client and server
Proxies are often used for security, acting as trusted intermediaries through which allweb traffic flows. Proxies can also filter requests and responses; for example, todetect application viruses in corporate downloads or to filter adult content awayfrom elementary-school students. We’ll talk about proxies in detail in Chapter 6.
Caches
Awebcache or caching proxy is a special type of HTTP proxy server that keeps cop-ies of popular documents that pass through the proxy. The next client requesting thesame document can be served from the cache’s personal copy (see Figure 1-12).
Internet
Client          Server
Proxy cache
Client
Figure 1-12. Caching proxies keep local copies of popular documents to improve performance|

A client may be able to download a document much more quickly from a nearbycache than from a distant web server. HTTP defines many facilities to make cachingmoreeffective and to regulate the freshness and privacy of cached content. We covercaching technology in Chapter 7.
Gateways
Gateways are special servers that act as intermediaries for other servers. They areoften used to convert HTTP traffic to another protocol. A gateway always receivesrequests as if it was the origin server for the resource. The client may not be aware itis communicating with a gateway.
For example, an HTTP/FTP gateway receives requests for FTP URIs via HTTPrequests but fetches the documents using the FTP protocol (see Figure 1-13). Theresulting document is packed into an HTTP message and sent to the client. We dis-cuss gateways in Chapter 8.
HTTP                       FTP
HTTP client                HTTP/FTP                 FTP servergateway
Figure 1-13. HTTP/FTP gateway
Tunnels
Tunnels are HTTP applications that, after setup, blindly relay raw data between twoconnections. HTTP tunnels are often used to transport non-HTTP data over one ormore HTTP connections, without looking at the data.
One popular use of HTTP tunnels is to carry encrypted Secure Sockets Layer (SSL)traffic through an HTTP connection, allowing SSL traffic through corporate fire-walls that permit only web traffic. As sketched in Figure 1-14, an HTTP/SSL tunnelreceives an HTTP request to establish an outgoing connection to a destinationaddress and port, then proceeds to tunnel the encrypted SSL traffic over the HTTPchannel so that it can be blindly relayed to the destination server.
Agents
User agents (or just agents) are client programs that make HTTP requests on theuser’s behalf. Any application that issues web requests is an HTTP agent. So far,we’ve talked about only one kind of HTTP agent: web browsers. But there are manyother kinds of user agents.|

Client
Port 443
SSL    SSL             SSL             SSLconnection
Tunnel start                           Tunnel endpoint     Server
Port 80
HTTP     SSL             HTTP           HTTP     SSLconnection
Figure 1-14. Tunnels forward data across non-HTTP networks (HTTP/SSL tunnel shown)
For example, there are machine-automated user agents that autonomously wanderthe Web, issuing HTTP transactions and fetching content, without human supervi-sion. These automated agents often have colorful names, such as “spiders” or “webrobots” (see Figure 1-15). Spiders wander the Web to build useful archives of webcontent, such as a search engine’s database or a product catalog for a comparison-shopping robot. See Chapter 9 for more information.
Web server      Web server     Web server
Search engine“spider”
Search enginedatabase
Figure 1-15. Automated search engine “spiders” are agents, fetching web pages around the world|

The End of the Beginning
That’s it for our quick introduction to HTTP. In this chapter, we highlighted HTTP’srole as a multimedia transport protocol. We outlined how HTTP uses URIs to namemultimedia resources on remote servers, we sketched how HTTP request andresponse messages are used to manipulate multimedia resources on remote servers,and we finished by surveying a few of the web applications that use HTTP.
The remaining chapters explain the technical machinery of the HTTP protocol,applications, and resources in much more detail.
For More Information
Later chapters of this book will explore HTTP in much more detail, but you mightfind that some of the following sources contain useful background about particulartopics we covered in this chapter.
HTTP Protocol Information
HTTP Pocket Reference
Clinton Wong, O’Reilly & Associates, Inc. This little book provides a conciseintroduction to HTTP and a quick reference to each of the headers and statuscodes that compose HTTP transactions.http://www.w3.org/Protocols/
This W3C web page contains many great links about the HTTP protocol.http://www.ietf.org/rfc/rfc2616.txt
RFC 2616, “Hypertext Transfer Protocol—HTTP/1.1,” is the official specifica-tion for HTTP/1.1, the current version of the HTTP protocol. The specificationis a well-written, well-organized, detailed reference for HTTP, but it isn’t idealfor readers who want to learn the underlying concepts and motivations of HTTPor the differences between theory and practice. We hope that this book fills inthe underlying concepts, so you can make better use of the specification.http://www.ietf.org/rfc/rfc1945.txt
RFC1945, “Hypertext Transfer Protocol—HTTP/1.0,” is an informational RFCthat describes the modern foundation for HTTP. It details the officially sanc-tioned and “best-practice” behavior of web applications at the time the specifica-tion was written. It also contains some useful descriptions about behavior that isdeprecated in HTTP/1.1 but still widely implemented by legacy applications.http://www.w3.org/Protocols/HTTP/AsImplemented.html
This web page contains a description of the 1991 HTTP/0.9 protocol, whichimplements only GET requests and has no content typing.|

Historical Perspectivehttp://www.w3.org/Protocols/WhyHTTP.html
This brief web page from 1991, from the author of HTTP, highlights some of theoriginal, minimalist goals of HTTP.http://www.w3.org/History.html“ALittle History of the World Wide Web” gives a short but interesting perspec-tive on some of the early goals and foundations of the World Wide Web and
HTTP.http://www.w3.org/DesignIssues/Architecture.html“Web Architecture from 50,000 Feet” paints a broad, ambitious view of the
World Wide Web and the design principles that affect HTTP and related webtechnologies.
Other World Wide Web Informationhttp://www.w3.org
The World Wide Web Consortium (W3C) is the technology steering team forthe Web. The W3C develops interoperable technologies (specifications, guide-lines, software, and tools) for the evolving Web. The W3C site is a treasure troveof introductory and detailed documentation about web technologies.http://www.ietf.org/rfc/rfc2396.txt
RFC2396,“UniformResourceIdentifiers (URI): Generic Syntax,” is the detailedreference for URIs and URLs.http://www.ietf.org/rfc/rfc2141.txt
RFC 2141, “URN Syntax,” is a 1997 specification describing URN syntax.http://www.ietf.org/rfc/rfc2046.txt
RFC2046,“MIMEPart2:MediaTypes,”isthesecondinasuiteoffive Internetspecifications defining the Multipurpose Internet Mail Extensions standard formultimedia content management.http://www.wrec.org/Drafts/draft-ietf-wrec-taxonomy-06.txt
This Internet draft, “Internet Web Replication and Caching Taxonomy,” speci-fies standard terminology for web architectural components.|

CHAPTER 2
URLs and Resources
Think of the Internet as a giant, expanding city, full of places to see and things to do.
Youandtheotherresidents and tourists of this booming community would use stan-dard naming conventions for the city’s vast attractions and services. You’d use streetaddresses for museums, restaurants, and people’s homes. You’d use phone numbersfor the fire department, the boss’s secretary, and your mother, who says you don’tcall enough.
Everything has a standardized name, to help sort out the city’s resources. Books have
ISBN numbers, buses have route numbers, bank accounts have account numbers,and people have social security numbers. Tomorrow you will meet your businesspartners at gate 31 of the airport. Every morning you take a Red-line train and exit at
Kendall Square station.
And because everyone agreed on standards for these different names, we can easilyshare the city’s treasures with each other. You can tell the cab driver to take you to246 McAllister Street, and he’ll know what you mean (even if he takes the long way).
Uniform resource locators (URLs) are the standardized names for the Internet’sresources. URLs point to pieces of electronic information, telling you where they arelocated and how to interact with them.
In this chapter, we’ll cover:• URL syntax and what the various URL components mean and do• URL shortcuts that many web clients support, including relative URLs andexpandomatic URLs• URL encoding and character rules• Common URL schemes that support a variety of Internet information systems• The future of URLs, including uniform resource names (URNs)—a frameworkto support objects that move from place to place while retaining stable names23
Navigating the Internet’s Resources
URLs are the resource locations that your browser needs to find information. Theylet people and applications find, use, and share the billions of data resources on the
Internet. URLs are the usual human access point to HTTP and other protocols: aperson points a browser at a URL and, behind the scenes, the browser sends theappropriate protocol messages to get the resource that the person wants.
URLsactually are a subset of a more general class of resource identifier called a uni-form resource identifier, or URI. URIs are a general concept comprised of two mainsubsets, URLs and URNs. URLs identify resources by describing where resources arelocated, whereas URNs (which we’ll cover later in this chapter) identify resources byname, regardless of where they currently reside.
TheHTTPspecification uses the more general concept of URIs as its resource identi-fiers; in practice, however, HTTP applications deal only with the URL subset of
URIs. Throughout this book, we’ll sometimes refer to URIs and URLs interchange-ably, but we’re almost always talking about URLs.
Say you want to fetch the URL http://www.joes-hardware.com/seasonal/index-fall.html:• Thefirst part of the URL (http) is the URL scheme. The scheme tells a web clienthow to access the resource. In this case, the URL says to use the HTTP protocol.• The second part of the URL (www.joes-hardware.com) is the server location.
This tells the web client where the resource is hosted.• The third part of the URL (/seasonal/index-fall.html) is the resource path. Thepath tells what particular local resource on the server is being requested.
See Figure 2-1 for an illustration.http://www.joes-hardware.com/seasonal/index-fall.html
Scheme                Host                              Path(how)                (where)                           (what)
Web pagetmlx fall.hinde
Client                         Server                             Disk
Figure 2-1. How URLs relate to browser, machine, server, and location on the server’s filesystem
URLs can direct you to resources available through protocols other than HTTP.
They can point you to any resource on the Internet, from a person’s email account:mailto:president@whitehouse.gov|
to files that are available through other protocols, such as the File Transfer Protocol(FTP):ftp://ftp.lots-o-books.com/pub/complete-price-list.xlsto movies hosted off of streaming video servers:rtsp://www.joes-hardware.com:554/interview/cto_video
URLs provide a way to uniformly name resources. Most URLs have the same“scheme://server location/path” structure. So, for every resource out there and everywaytogetthose resources, you have a single way to name each resource so that any-one can use that name to find it. However, this wasn’t always the case.
The Dark Days Before URLs
Before the Web and URLs, people relied on a rag-tag assortment of applications toaccess data distributed throughout the Net. Most people were not lucky enough tohave all the right applications or were not savvy and patient enough to use them.
Before URLs came along, if you wanted to share the complete-catalog.xls file with afriend, you would have had to say something like this: “Use FTP to connect to ftp.joes-hardware.com. Log in as anonymous. Then type your username as the password.
Change to the pub directory. Switch to binary mode. Now download the file namedcomplete-catalog.xls to your local filesystem and view it there.”
Today, browsers such as Netscape Navigator and Microsoft Internet Explorer bun-dle much of this functionality into one convenient package. Using URLs, these appli-cations are able to access many resources in a uniform way, through one interface.
Instead of the complicated instructions above, you could just say “Point yourbrowser at ftp://ftp.lots-o-books.com/pub/complete-catalog.xls.”
URLs have provided a means for applications to be aware of how to access aresource. In fact, many users are probably unaware of the protocols and access meth-ods their browsers use to get the resources they are requesting.
With web browsers, you no longer need a news reader to read Internet news or an
FTPclient to access files on FTP servers. You don’t need an electronic mail programto send and receive email messages. URLs have helped to simplify the online world,by allowing the browser to be smart about how to access and handle resources.*
Applications can use URLs to simplify access to information.
URLs give you and your browser all you need to find a piece of information. Theydefine the particular resource you want, where it is located, and how to get it.* Browsers often use other applications to handle specific resources. For example, Internet Explorer launchesan email application to handle URLs that identify email resources.|

URL Syntax
URLs provide a means of locating any resource on the Internet, but these resourcescan be accessed by different schemes (e.g., HTTP, FTP, SMTP), and URL syntax var-ies from scheme to scheme.
Does this mean that each different URL scheme has a radically different syntax? Inpractice, no. Most URLs adhere to a general URL syntax, and there is significantoverlap in the style and syntax between different URL schemes.
Most URL schemes base their URL syntax on this nine-part general format:<scheme>://<user>:<password>@<host>:<port>/<path>;<params>?<query>#<frag>
Almost no URLs contain all these components. The three most important parts of a
URL are the scheme, the host, and the path. Table 2-1 summarizes the variouscomponents.
Table 2-1. General URL components
Component        Description              Default valuescheme           Which protocol to use when accessing a server to get a resource.                           Noneuser             The username some schemes require to access a resource.   anonymouspassword         The password that may be included after the username, separated by a colon (:).            <Email address>host             The hostname or dotted IP address of the server hosting the resource.                      Noneport             The port number on which the server hosting the resource is listening. Many schemes        Scheme-specifichave default port numbers (the default port number for HTTP is 80).path             The local name for the resource on the server, separated from the previous URL com-        Noneponents by a slash (/). The syntax of the path component is server- and scheme-spe-cific. (We will see later in this chapter that a URL’s path can be divided into segments,and each segment can have its own components specific to that segment.)params           Used by some schemes to specify input parameters. Params are name/value pairs. A           None
URLcancontainmultipleparamsfields,separatedfromthemselvesandtherestofthepath by semicolons (;).query            Used by some schemes to pass parameters to active applications (such as databases,         Nonebulletin boards, search engines, and other Internet gateways). There is no commonformat for the contents of the query component. It is separated from the rest of the
URL by the “?” character.frag             A name for a piece or part of the resource. The frag field is not passed to the server     Nonewhen referencing the object; it is used internally by the client. It is separated from therest of the URL by the “#” character.
For example, consider the URL http://www.joes-hardware.com:80/index.html. Thescheme is “http”, the host is “www.joes-hardware.com”, the port is “80”, and thepath is “/index.html”.|

Schemes: What Protocol to Use
The scheme is really the main identifier of how to access a given resource; it tells theapplication interpreting the URL what protocol it needs to speak. In our simple
HTTP URL, the scheme is simply “http”.
The scheme component must start with an alphabetic character, and it is separatedfrom the rest of the URL by the first “:” character. Scheme names are case-insensitive, so the URLs “http://www.joes-hardware.com” and “HTTP://www.joes-hardware.com” are equivalent.
Hosts and Ports
To find a resource on the Internet, an application needs to know what machine ishosting the resource and where on that machine it can find the server that has accessto the desired resource. The host and port components of the URL provide these twopieces of information.
The host component identifies the host machine on the Internet that has access to theresource. The name can be provided as a hostname, as above (“www.joes-hardware.com”) or as an IP address. For example, the following two URLs point to the sameresource—the first refers to the server by its hostname and the second by its IP address:http://www.joes-hardware.com:80/index.htmlhttp://161.58.228.45:80/index.html
The port component identifies the network port on which the server is listening. For
HTTP, which uses the underlying TCP protocol, the default port is 80.
Usernames and Passwords
More interesting components are the user and password components. Many serversrequire a username and password before you can access data through them. FTPservers are a common example of this. Here are a few examples:ftp://ftp.prep.ai.mit.edu/pub/gnuftp://anonymous@ftp.prep.ai.mit.edu/pub/gnuftp://anonymous:my_passwd@ftp.prep.ai.mit.edu/pub/gnuhttp://joe:joespasswd@www.joes-hardware.com/sales_info.txt
The first example has no user or password component, just our standard scheme,host, and path. If an application is using a URL scheme that requires a username andpassword, such as FTP, it generally will insert a default username and password ifthey aren’t supplied. For example, if you hand your browser an FTP URL withoutspecifying a username and password, it will insert “anonymous” for your usernameandsendadefault password (Internet Explorer sends “IEUser”, while Netscape Nav-igator sends “mozilla”).|

The second example shows a username being specified as “anonymous”. This user-name,combinedwiththehostcomponent,looksjustlikeanemailaddress.The“@”character separates the user and password components from the rest of the URL.
In the third example, both a username (“anonymous”) and password (“my_passwd”)are specified, separated by the “:” character.
Paths
The path component of the URL specifies where on the server machine the resourcelives. The path often resembles a hierarchical filesystem path. For example:http://www.joes-hardware.com:80/seasonal/index-fall.html
The path in this URL is “/seasonal/index-fall.html”, which resembles a filesystempath on a Unix filesystem. The path is the information that the server needs to locatethe resource.* The path component for HTTP URLs can be divided into path seg-ments separated by “/” characters (again, as in a file path on a Unix filesystem). Eachpath segment can have its own params component.
Parameters
For many schemes, a simple host and path to the object just aren’t enough. Asidefrom what port the server is listening to and even whether or not you have access tothe resource with a username and password, many protocols require more informa-tion to work.
Applications interpreting URLs need these protocol parameters to access theresource. Otherwise, the server on the other side might not service the request or,worse yet, might service it wrong. For example, take a protocol like FTP, which hastwo modes of transfer, binary and text. You wouldn’t want your binary image trans-ferred in text mode, because the binary image could be scrambled.
Togiveapplications the input parameters they need in order to talk to the server cor-rectly, URLs have a params component. This component is just a list of name/valuepairs in the URL, separated from the rest of the URL (and from each other) by “;”characters. They provide applications with any additional information that they needto access the resource. For example:ftp://prep.ai.mit.edu/pub/gnu;type=d
In this example, there is one param, type=d, where the name of the param is “type”and its value is “d”.* This is a bit of a simplification. In “Virtual Hosting” in Chapter 18, we will see that the path is not alwaysenough information to locate a resource. Sometimes a server needs additional information.|

As we mentioned earlier, the path component for HTTP URLs can be broken intopath segments. Each segment can have its own params. For example:http://www.joes-hardware.com/hammers;sale=false/index.html;graphics=true
In this example there are two path segments, hammers and index.html. The hammerspath segment has the param sale, and its value is false. The index.html segment hasthe param graphics, and its value is true.
Query Strings
Some resources, such as database services, can be asked questions or queries to nar-row down the type of resource being requested.
Let’s say Joe’s Hardware store maintains a list of unsold inventory in a database andallows the inventory to be queried, to see whether products are in stock. The follow-ing URLmightbeusedtoqueryawebdatabasegatewaytoseeifitemnumber12731is available:http://www.joes-hardware.com/inventory-check.cgi?item=12731
For the most part, this resembles the other URLs we have looked at. What is new iseverything to the right of the question mark (?). This is called the query component.
The query component of the URL is passed along to a gateway resource, with thepath component of the URL identifying the gateway resource. Basically, gatewayscan be thought of as access points to other applications (we discuss gateways indetail in Chapter 8).
Figure 2-2 shows an example of a query component being passed to a server that isacting as a gateway to Joe’s Hardware’s inventory-checking application. The query ischecking whether a particular item, 12731, is in inventory in size large and colorblue.http://www.joes-hardware.com/inventory-check.cgi?item=12731&color=blue&size=largeitem=12731&color=blue&size=large
Internet
Client                           Server“Inventory-check”gateway
Figure 2-2. The URL query component is sent along to the gateway application
There is no requirement for the format of the query component, except that somecharacters are illegal, as we’ll see later in this chapter. By convention, many gateways|
expect the query string to be formatted as a series of “name=value” pairs, separatedby “&” characters:http://www.joes-hardware.com/inventory-check.cgi?item=12731&color=blue
In this example, there are two name/value pairs in the query component: item=12731andcolor=blue.
Fragments
Some resource types, such as HTML, can be divided further than just the resourcelevel. For example, for a single, large text document with sections in it, the URL forthe resource would point to the entire text document, but ideally you could specifythe sections within the resource.
To allow referencing of parts or fragments of a resource, URLs support a frag com-ponent to identify pieces within a resource. For example, a URL could point to a par-ticular image or section within an HTML document.
Afragment dangles off the right-hand side of a URL, preceded by a # character. Forexample:http://www.joes-hardware.com/tools.html#drills
In this example, the fragment drills references a portion of the /tools.html web pagelocated on the Joe’s Hardware web server. The portion is named “drills”.
Because HTTP servers generally deal only with entire objects,* not with fragments ofobjects, clients don’t pass fragments along to servers (see Figure 2-3). After yourbrowser gets the entire resource from the server, it then uses the fragment to displaythe part of the resource in which you are interested.
URL Shortcuts
Webclients understand and use a few URL shortcuts. Relative URLs are a convenientshorthand for specifying a resource within a resource. Many browsers also support“automatic expansion” of URLs, where the user can type in a key (memorable) part ofa URL, and the browser fills in the rest. This is explained in “Expandomatic URLs.”
Relative URLs
URLscomeintwoflavors:absolute and relative. So far, we have looked only at abso-lute URLs. With an absolute URL, you have all the information you need to access aresource.* In “Range Requests” in Chapter 15, we will see that HTTP agents may request byte ranges of objects. How-ever, in the context of URL fragments, the server sends the entire object and the agent applies the fragmentidentifier to the resource.|
http://www.joes-hardware.com/tools.html#drills(a) User selects link to “http://www.joes-hardware.com/tools.html#drills “(Fragment is NOT sent to the server)(b) Browser makes request to http://www.joes-hardware.com/tools.html
Internet
Client                        www.joes-hardware.com(c) Server returns entire HTML page
Browser scrolls down to startat named “drills” fragment(d) Browser displays HTML page starting withnamed “drills” fragment
Figure 2-3. The URL fragment is used only by the client, because the server deals with entire objects
Onthe other hand, relative URLs are incomplete. To get all the information neededto access a resource from a relative URL, you must interpret it relative to another
URL, called its base.
Relative URLs are a convenient shorthand notation for URLs. If you have ever writ-ten HTML by hand, you have probably found them to be a great shortcut.
Example2-1 contains an example HTML document with an embedded relative URL.
Example2-1.HTML snippet with relative URLs<HTML><HEAD><TITLE>Joe's Tools</TITLE></HEAD><BODY><H1> Tools Page </H1><H2> Hammers <H2><P> Joe's Hardware Online has the largest selection of <A HREF="./hammers.html">hammers</A> on earth.</BODY></HTML>
In Example 2-1, we have an HTML document for the resource:http://www.joes-hardware.com/tools.html
In the HTML document, there is a hyperlink containing the URL ./hammers.html.
This URL seems incomplete, but it is a legal relative URL. It can be interpreted rela-tive to the URL of the document in which it is found; in this case, relative to theresource /tools.html on the Joe’s Hardware web server.|

The abbreviated relative URL syntax lets HTML authors omit from URLs thescheme, host, and other components. These components can be inferred by the base
URLoftheresourcetheyarein.URLsforotherresourcesalsocanbespecifiedinthisshorthand.
In Example 2-1, our base URL is:http://www.joes-hardware.com/tools.html
Using this URL as a base, we can infer the missing information. We know theresource is ./hammers.html, but we don’t know the scheme or host. Using the base
URL, we can infer that the scheme is http and the host is www.joes-hardware.com.
Figure 2-4 illustrates this.
Base URL:               Relative URL:http://www.joes-hardware.com/tools.html                     ./hammers.htmlhttp://www.joes-hardware.com/hammers.html
New absolute URL
Figure 2-4. Using a base URL
Relative URLs are only fragments or pieces of URLs. Applications that process URLs(such as your browser) need to be able to convert between relative and absolute
URLs.
It is also worth noting that relative URLs provide a convenient way to keep a set ofresources (such as HTML pages) portable. If you use relative URLs, you can move aset of documents around and still have their links work, because they will be inter-preted relative to the new base. This allows for things like mirroring content on otherservers.
Base URLs
Thefirst step in the conversion process is to find a base URL. The base URL serves asa point of reference for the relative URL. It can come from a few places:
Explicitly provided in the resource
Someresources explicitly specify the base URL. An HTML document, for exam-ple, may include a <BASE> HTML tag defining the base URL by which to convertall relative URLs in that HTML document.
Base URL of the encapsulating resource
If a relative URL is found in a resource that does not explicitly specify a base
URL,asinExample2-1,itcanusetheURLoftheresourceinwhichitisembed-ded as a base (as we did in our example).|

No base URL
In some instances, there is no base URL. This often means that you have anabsolute URL; however, sometimes you may just have an incomplete or broken
URL.
Resolving relative references
Previously, we showed the basic components and syntax of URLs. The next step inconverting a relative URL into an absolute one is to break up both the relative andbase URLs into their component pieces.
In effect, you are just parsing the URL, but this is often called decomposing the URL,because you are breaking it up into its components. Once you have broken the baseand relative URLs into their components, you can then apply the algorithm picturedin Figure 2-5 to finish the conversion.
Parsed relative URL:{ scheme= X, user= Y, . . . }
Scheme empty                        All components empty                    Nonempty scheme
Inherit base URL scheme                          Defaults to base                      URL is absolute
Examine user, password,host, and port components
All components empty
Inherit base URL, user, password,host, and port
Examine path component
Nonempty path
Path empty                         with leading “/”
Inherit base URL path              Have absolute path proceed
Nonempty path  Examine param componentw/o leading “/”
Remove “./” and “<seg>/./” from path                 Param                   Param
Proceed             empty                   nonempty
Inherit base URL param
Examine query component
Query empty                       Query nonempty
Inherit base URL query
Proceed
Combine inherited and relative components into new absolute URL
Figure 2-5. Converting relative to absolute URLs|

This algorithm converts a relative URL to its absolute form, which can then be usedto reference the resource. This algorithm was originally specified in RFC 1808 andlater incorporated into RFC 2396.
With our ./hammers.html example from Example 2-1, we can apply the algorithmdepicted in Figure 2-5:1. Path is ./hammers.html; base URL is http://www.joes-hardware.com/tools.html.2. Scheme is empty; proceed down left half of chart and inherit the base URLscheme (HTTP).3. At least one component is non-empty; proceed to bottom, inheriting host andport components.4. CombiningthecomponentswehavefromtherelativeURL(path:./hammers.html)with what we have inherited (scheme: http, host: www.joes-hardware.com, port:80), we get our new absolute URL: http://www.joes-hardware.com/hammers.html.
Expandomatic URLs
Some browsers try to expand URLs automatically, either after you submit the URLor while you’re typing. This provides users with a shortcut: they don’t have to type inthe complete URL, because it automatically expands itself.
These “expandomatic” features come in two flavors:
Hostname expansion
In hostname expansion, the browser can often expand the hostname you type ininto the full hostname without your help, just by using some simple heuristics.
For example if you type “yahoo” in the address box, your browser can automati-cally insert “www.” and “.com” onto the hostname, creating “www.yahoo.com”.
Somebrowserswill try this if they are unable to find a site that matches “yahoo”,trying a few expansions before giving up. Browsers apply these simple tricks tosave you some time and frustration.
However, these expansion tricks on hostnames can cause problems for other
HTTP applications, such as proxies. In Chapter 6, we will discuss these prob-lems in more detail.
History expansion
Another technique that browsers use to save you time typing URLs is to store ahistory of the URLs that you have visited in the past. As you type in the URL,they can offer you completed choices to select from by matching what you typeto the prefixes of the URLs in your history. So, if you were typing in the start of a
URL that you had visited previously, such as http://www.joes-, your browsercould suggest http://www.joes-hardware.com. You could then select that insteadof typing out the complete URL.|

Be aware that URL auto-expansion may behave differently when used with proxies.
Wediscuss this further in “URI Client Auto-Expansion and Hostname Resolution”in Chapter 6.
Shady Characters
URLs were designed to be portable. They were also designed to uniformly name allthe resources on the Internet, which means that they will be transmitted throughvarious protocols. Because all of these protocols have different mechanisms fortransmitting their data, it was important for URLs to be designed so that they couldbe transmitted safely through any Internet protocol.
Safe transmission means that URLs can be transmitted without the risk of losinginformation. Some protocols, such as the Simple Mail Transfer Protocol (SMTP) for*electronic mail, use transmission methods that can strip off certain characters. Toget around this, URLs are permitted to contain only characters from a relativelysmall, universally safe alphabet.
In addition to wanting URLs to be transportable by all Internet protocols, designerswanted them to be readable by people. So invisible, nonprinting characters also areprohibited in URLs, even though these characters may pass through mailers and oth-erwise be portable.†
To complicate matters further, URLs also need to be complete. URL designers real-ized there would be times when people would want URLs to contain binary data orcharacters outside of the universally safe alphabet. So, an escape mechanism wasadded, allowing unsafe characters to be encoded into safe characters for transport.
This section summarizes the universal alphabet and encoding rules for URLs.
The URL Character Set
Default computer system character sets often have an Anglocentric bias. Histori-cally, many computer applications have used the US-ASCII character set. US-ASCIIuses 7 bits to represent most keys available on an English typewriter and a few non-printing control characters for text formatting and hardware signalling.
US-ASCIIisveryportable,duetoitslonglegacy.Butwhileit’sconvenienttocitizens ofthe U.S., it doesn’t support the inflected characters common in European languages orthe hundreds of non-Romanic languages read by billions of people around the world.* This is caused by the use of a 7-bit encoding for messages; this can strip off information if the source isencoded in 8 bits or more.†Nonprinting characters include whitespace (note that RFC 2396 recommends that applications ignorewhitespace).|

Furthermore, some URLs may need to contain arbitrary binary data. Recognizing theneed for completeness, the URL designers have incorporated escape sequences.
Escape sequences allow the encoding of arbitrary character values or data using arestricted subset of the US-ASCII character set, yielding portability and completeness.
Encoding Mechanisms
To get around the limitations of a safe character set representation, an encodingscheme was devised to represent characters in a URL that are not safe. The encodingsimply represents the unsafe character by an “escape” notation, consisting of a per-cent sign (%) followed by two hexadecimal digits that represent the ASCII code ofthe character.
Table 2-2 shows a few examples.
Table 2-2. Some encoded character examples
Character          ASCII code                   Example URL~                  126 (0x7E)                   http://www.joes-hardware.com/%7Ejoe
SPACE              32 (0x20)                    http://www.joes-hardware.com/more%20tools.html%                  37 (0x25)                    http://www.joes-hardware.com/100%25satisfaction html
Character Restrictions
Several characters have been reserved to have special meaning inside of a URL. Oth-ers are not in the defined US-ASCII printable set. And still others are known to con-fuse some Internet gateways and protocols, so their use is discouraged.
Table 2-3 lists characters that should be encoded in a URL before you use them foranything other than their reserved purposes.
Table 2-3. Reserved and restricted characters
Character          Reservation/Restriction%                  Reserved as escape token for encoded characters/                  Reserved for delimiting splitting up path segments in the path component.                  Reserved in the path component..                 Reserved in the path component#                  Reserved as the fragment delimiter?                  Reserved as the query-string delimiter;                  Reserved as the params delimiter:                  Reserved to delimit the scheme, user/password, and host/port components$ , +              Reserved@ & =              Reserved because they have special meaning in the context of some schemes|

Table 2-3. Reserved and restricted characters (continued)
Character          Reservation/Restriction{ } | \ ^ ~ [ ] ‘  Restricted because of unsafe handling by various transport agents, such as gateways< > "              Unsafe; should be encoded because these characters often have meaning outside the scope of the URL,such as delimiting the URL itself in a document (e.g., “http://www.joes-hardware.com”)0x00–0x1F, 0x7F    Restricted;characterswithinthesehexrangesfallwithinthenonprintablesectionoftheUS-ASCIIcharac-ter set> 0x7F             Restricted; characters whose hex values fall within this range do not fall within the 7-bit range of the US-
ASCII character set
A Bit More
You might be wondering why nothing bad has happened when you have used char-acters that are unsafe. For instance, you can visit Joe’s home page at:http://www.joes-hardware.com/~joeand not encode the “~” character. For some transport protocols this is not an issue,but it is still unwise for application developers not to encode unsafe characters.
Applications need to walk a fine line. It is best for client applications to convert anyunsafe or restricted characters before sending any URL to any other application.*
Once all the unsafe characters have been encoded, the URL is in a canonical formthat can be shared between applications; there is no need to worry about the otherapplication getting confused by any of the characters’ special meanings.
The original application that gets the URL from the user is best fit to determinewhichcharacters need to be encoded. Because each component of the URL may haveits own safe/unsafe characters, and which characters are safe/unsafe is scheme-dependent, only the application receiving the URL from the user really is in a posi-tion to determine what needs to be encoded.
Ofcourse, the other extreme is for the application to encode all characters. While thisis not recommended, there is no hard and fast rule against encoding characters that areconsidered safe already; however, in practice this can lead to odd and broken behav-ior, because some applications may assume that safe characters will not be encoded.
Sometimes, malicious folks encode extra characters in an attempt to get aroundapplications that are doing pattern matching on URLs—for example, web filteringapplications. Encoding safe URL components can cause pattern-matching applica-tions to fail to recognize the patterns for which they are searching. In general, appli-cations interpreting URLs must decode the URLs before processing them.* Here we are specifically talking about client applications, not other HTTP intermediaries, like proxies. In“In-Flight URI Modification” in Chapter 6, we discuss some of the problems that can arise when proxies orother intermediary HTTP applications attempt to change (e.g., encode) URLs on the behalf of a client.|

Some URL components, such as the scheme, need to be recognized readily and arerequired to start with an alphabetic character. Refer back to “URL Syntax” for moreguidelines on the use of reserved and unsafe characters within different URL*components.
A Sea of Schemes
In this section, we’ll take a look at the more common scheme formats on the Web.
AppendixA gives a fairly exhaustive list of schemes and references to their individ-ual documentation.
Table 2-4 summarizes some of the most popular schemes. Reviewing “URL Syntax”will make the syntax portion of the table a little more familiar.
Table 2-4. Common scheme formats
Scheme     Descriptionhttp       The Hypertext Transfer Protocol scheme conforms to the general URL format, except that there is no usernameor password. The port defaults to 80 if omitted.
Basic form:http://<host>:<port>/<path>?<query>#<frag>
Examples:http://www.joes-hardware.com/index.htmlhttp://www.joes-hardware.com:80/index htmlhttps      The https scheme is a twin to the http scheme. The only difference is that the https scheme uses Netscape’s
SecureSocketsLayer(SSL),whichprovidesend-to-endencryptionofHTTPconnections.Itssyntaxisidenticaltothat of HTTP, with a default port of 443.
Basic form:https://<host>:<port>/<path>?<query>#<frag>
Example:https://www.joes-hardware.com/secure.htmlmailto     MailtoURLsrefertoemailaddresses.Becauseemailbehavesdifferentlyfromotherschemes(itdoesnotrefertoobjectsthatcanbeaccesseddirectly),theformatofamailtoURLdiffersfromthatofthestandardURL.Thesyn-tax for Internet email addresses is documented in Internet RFC 822.
Basic form:mailto:<RFC-822-addr-spec>
Example:mailto:joe@joes-hardware.com* Table 2-3 lists reserved characters for the various URL components. In general, encoding should be limitedto those characters that are unsafe for transport.|

Table 2-4. Common scheme formats (continued)
Scheme          Descriptionftp             File Transfer Protocol URLs can be used to download and upload files on an FTP server and to obtain listings ofthe contents of a directory structure on an FTP server.
FTP has been around since before the advent of the Web and URLs. Web applications have assimilated FTP as adata-access scheme. The URL syntax follows the general form.
Basic form:ftp //<user>:<password>@<host>:<port>/<path>;<params>
Example:ftp //anonymous:joe%40joes-hardware.com@prep.ai.mit.edu:21/pub/gnu/rtsp, rtspu     RTSP URLs are identifiers for audio and video media resources that can be retrieved through the Real Time
Streaming Protocol.
The “u” in the rtspu scheme denotes that the UDP protocol is used to retrieve the resource.
Basic forms:rtsp://<user>:<password>@<host>:<port>/<path>rtspu://<user>:<password>@<host>:<port>/<path>
Example:rtsp://www.joes-hardware.com:554/interview/cto_videofile            The file scheme denotes files directly accessible on a given host machine (by local disk, a network filesystem, orsomeotherfile-sharingsystem).Thefieldsfollowthegeneralform.Ifthehostisomitted,itdefaultstothelocalhost from which the URL is being used.
Basic form:file://<host>/<path>
Example:file://OFFICE-FS/policies/casual-fridays.docnews            The news scheme is used to access specific articles or newsgroups, as defined by RFC 1036. It has the unusualproperty that a news URL in itself does not contain sufficient information to locate the resource.
The news URL is missing information about where to acquire the resource—no hostname or machine name issupplied. It is the interpreting application’s job to acquire this information from the user. For example, in your
Netscape browser, under the Options menu, you can specify your NNTP (news) server. This tells your browserwhat server to use when it has a news URL.
Newsresourcescanbeaccessedfrommultipleservers.Theyaresaidtobelocation-independent,astheyarenotdependent on any one source for access.
The “@” character is reserved within a news URL and is used to distinguish between news URLs that refer tonewsgroups and news URLs that refer to specific news articles.
Basic forms:news:<newsgroup>news:<news-article-id>
Example:news:rec.arts startrek|

Table 2-4. Common scheme formats (continued)
Scheme     Descriptiontelnet     Thetelnetschemeisusedtoaccessinteractiveservices.Itdoesnotrepresentanobjectperse,butaninteractiveapplication (resource) accessible via the telnet protocol.
Basic form:telnet //<user>:<password>@<host>:<port>/
Example:telnet //slurp:webhound@joes-hardware.com:23/
The Future
URLsare a powerful tool. Their design allows them to name all existing objects andeasily encompass new formats. They provide a uniform naming mechanism that canbe shared between Internet protocols.
However, they are not perfect. URLs are really addresses, not true names. Thismeans that a URL tells you where something is located, for the moment. It providesyou with the name of a specific server on a specific port, where you can find theresource. The downfall of this scheme is that if the resource is moved, the URL is nolonger valid. And at that point, it provides no way to locate the object.
Whatwouldbeidealisifyouhadtherealnameofanobject,whichyoucouldusetolook up that object regardless of its location. As with a person, given the name of theresource and a few other facts, you could track down that resource, regardless ofwhere it moved.
The Internet Engineering Task Force (IETF) has been working on a new standard,uniform resource names (URNs), for some time now, to address just this issue.
URNs provide a stable name for an object, regardless of where that object moves(either inside a web server or across web servers).
Persistent uniform resource locators (PURLs) are an example of how URN functional-ity can be achieved using URLs. The concept is to introduce another level of indirec-tion in looking up a resource, using an intermediary resource locator server thatcatalogues and tracks the actual URL of a resource. A client can request a persistent
URLfromthelocator, which can then respond with a resource that redirects the cli-ent to the actual and current URL for the resource (see Figure 2-6). For more infor-mation on PURLs, visit http://purl.oclc.org.
If Not Now, When?
The ideas behind URNs have been around for some time. Indeed, if you look at thepublication dates for some of their specifications, you might ask yourself why theyhave yet to be adopted.|

Get http://purl.oclc.org/jhardware/
STEP 1: Ask the resource resolver what the
Joe’s Hardware URL is. Receive from the   Internetresolver the current location of the resource.
Client purl.oclc.org
Actual: http://www.joes-hardware.com/
STEP 2: Get the actual URL for the resource         Get http://www.joes-hardware.com/
Internet
Client                           www.joes-hardware.com
Figure 2-6. PURLs use a resource locator server to name the current location of a resource
The change from URLs to URNs is an enormous task. Standardization is a slow pro-cess, often for good reason. Support for URNs will require many changes—consensusfrom the standards bodies, modifications to various HTTP applications, etc. A tre-mendous amount of critical mass is required to make such changes, and unfortu-nately (or perhaps fortunately), there is so much momentum behind URLs that it willbe some time before all the stars align to make such a conversion possible.
Throughout the explosive growth of the Web, Internet users—everyone from com-puter scientists to the average Internet user—have been taught to use URLs. Whilethey suffer from clumsy syntax (for the novice) and persistence problems, people havelearned how to use them and how to deal with their drawbacks. URLs have some lim-itations, but they’re not the web development community’s most pressing problem.
Currently, and for the foreseeable future, URLs are the way to name resources on the
Internet. They are everywhere, and they have proven to be a very important part ofthe Web’s success. It will be a while before any other naming scheme unseats URLs.
However, URLs do have their limitations, and it is likely that new standards (possi-bly URNs) will emerge and be deployed to address some of these limitations.
For More Information
For more information on URLs, refer to:http://www.w3.org/Addressing/
The W3C web page about naming and addressing URIs and URLs.http://www.ietf.org/rfc/rfc1738
RFC1738,“UniformResourceLocators (URL),” by T. Berners-Lee, L. Masinter,and M. McCahill.|
http://www.ietf.org/rfc/rfc2396.txt
RFC2396,“UniformResourceIdentifiers (URI): Generic Syntax,” by T. Berners-
Lee, R. Fielding, and L. Masinter.http://www.ietf.org/rfc/rfc2141.txt
RFC 2141, “URN Syntax,” by R. Moats.http://purl.oclc.org
The persistent uniform resource locator web site.http://www.ietf.org/rfc/rfc1808.txt
RFC 1808, “Relative Uniform Resource Locators,” by R. Fielding.|

CHAPTER 3
HTTP Messages
If HTTP is the Internet’s courier, HTTP messages are the packages it uses to movethings around. In Chapter 1, we showed how HTTP programs send each other mes-sages to get work done. This chapter tells you all about HTTP messages—how tocreate them and how to understand them. After reading this chapter, you’ll knowmost of what you need to know to write your own HTTP applications. In particular,you’ll understand:• How messages flow• The three parts of HTTP messages (start line, headers, and entity body)• The differences between request and response messages• The various functions (methods) that request messages support• The various status codes that are returned with response messages• What the various HTTP headers do
The Flow of Messages
HTTP messages are the blocks of data sent between HTTP applications. Theseblocks of data begin with some text meta-information describing the message con-tents and meaning, followed by optional data. These messages flow between clients,servers, and proxies. The terms “inbound,” “outbound,” “upstream,” and “down-stream” describe message direction.
Messages Commute Inbound to the Origin Server
HTTPusesthetermsinboundandoutboundtodescribe transactional direction. Mes-sages travel inbound to the origin server, and when their work is done, they traveloutbound back to the user agent (see Figure 3-1).43
Inbound (to server)          GET /index.html HTTP/1.0
Proxy 1             Proxy 2             Proxy 3
Client                  Server
HTTP/1.0 200 OK  Outbound (to user agent)
Content-type: text/html...
Figure 3-1. Messages travel inbound to the origin server and outbound back to the client
Messages Flow Downstream
HTTPmessagesflowlikerivers. All messages flow downstream, regardless of whetherthey are request messages or response messages (see Figure 3-2). The sender of anymessage is upstream of the receiver. In Figure 3-2, proxy 1 is upstream of proxy 3 forthe request but downstream of proxy 3 for the response.*
The Parts of a Message
HTTPmessages are simple, formatted blocks of data. Take a peek at Figure 3-3 foran example. Each message contains either a request from a client or a response froma server. They consist of three parts: a start line describing the message, a block ofheaders containing attributes, and an optional body containing data.
Thestart line and headers are just ASCII text, broken up by lines. Each line ends witha two-character end-of-line sequence, consisting of a carriage return (ASCII 13) and aline-feed character (ASCII 10). This end-of-line sequence is written “CRLF.” It isworth pointing out that while the HTTP specification for terminating lines is CRLF,robust applications also should accept just a line-feed character. Some older or bro-ken HTTP applications do not always send both the carriage return and line feed.
The entity body or message body (or just plain “body”) is simply an optional chunkof data. Unlike the start line and headers, the body can contain text or binary data orcan be empty.
In the example in Figure 3-3, the headers give you a bit of information about thebody. The Content-Type line tells you what the body is—in this example, it is aplain-text document. The Content-Length line tells you how big the body is; here itis a meager 19 bytes.* Theterms“upstream”and“downstream”relateonlytothesenderandreceiver.Wecan’ttellwhetherames-sage is heading to the origin server or the client, because both are downstream.|

Request (flowing downstream)
Client            Proxy 1
Proxy 2
Proxy 3
No messages ever go upstream
Server
Proxy 3
Proxy 2
Proxy 1                             eam)wnstr
Client   wing doesponse (flo
R
Figure 3-2. All messages flow downstream
Start line HTTP/1.0 200 OK
Headers   Content-type: text/plain
Content-length: 19
Client                  Body     Hi! I’m a message!        Server
Figure 3-3. Three parts of an HTTP message
Message Syntax
All HTTP messages fall into two types: request messages and response messages.
Request messages request an action from a web server. Response messages carryresults of a request back to a client. Both request and response messages have thesamebasicmessagestructure. Figure 3-4 shows request and response messages to geta GIF image.
Here’s the format for a request message:<method> <request-URL> <version><headers><entity-body>|

HTTP request message containsthe command and the URL
GET /specials/saw-blade.gif HTTP/1.0
Host: www.joes-hardware.com
Internet
Client      HTTP/1.0 200 OK                           www.joes-hardware.com
Content-Type: image/gif
Content-Length: 8572                               HTTP response message containsthe result of the transaction
Figure 3-4. An HTTP transaction has request and response messages
Here’s the format for a response message (note that the syntax differs only in thestart line):<version> <status> <reason-phrase><headers><entity-body>
Here’s a quick description of the various parts:method
Theaction that the client wants the server to perform on the resource. It is a sin-gle word, like “GET,” “HEAD,” or “POST”. We cover the method in detail laterin this chapter.request-URL
Acomplete URL naming the requested resource, or the path component of the
URL. If you are talking directly to the server, the path component of the URL isusually okay as long as it is the absolute path to the resource—the server canassume itself as the host/port of the URL. Chapter 2 covers URL syntax in detail.version
The version of HTTP that the message is using. Its format looks like:
HTTP/<major>.<minor>where major and minor both are integers. We discuss HTTP versioning a bitmore later in this chapter.status-code
A three-digit number describing what happened during the request. The firstdigit of each code describes the general class of status (“success,” “error,” etc.).
An exhaustive list of status codes defined in the HTTP specification and theirmeanings is provided later in this chapter.|
reason-phrase
Ahuman-readable version of the numeric status code, consisting of all the textuntil the end-of-line sequence. Example reason phrases for all the status codesdefined in the HTTP specification are provided later in this chapter. The reasonphrase is meant solely for human consumption, so, for example, response linescontaining “HTTP/1.0 200 NOT OK” and “HTTP/1.0 200 OK” should betreated as equivalent success indications, despite the reason phrases suggestingotherwise.headers
Zero or more headers, each of which is a name, followed by a colon (:), fol-lowed by optional whitespace, followed by a value, followed by a CRLF. Theheaders are terminated by a blank line (CRLF), marking the end of the list ofheaders and the beginning of the entity body. Some versions of HTTP, such as
HTTP/1.1, require certain headers to be present for the request or response mes-sage to be valid. The various HTTP headers are covered later in this chapter.entity-body
The entity body contains a block of arbitrary data. Not all messages containentity bodies, so sometimes a message terminates with a bare CRLF. We discussentities in detail in Chapter 15.
Figure 3-5 demonstrates hypothetical request and response messages.(a) Request message                 (b) Response message
GET /test/hi-there.txt HTTP/1.1                         Start line    HTTP/1.0 200 OK
Accept: text/*         Headers       Content-type: text/plain
Host: www.joes-hardware.com          Content-length: 19
Body        Hi! I’m a message!
Figure 3-5. Example request and response messages
NotethatasetofHTTPheadersshouldalwaysendinablankline(bareCRLF),evenif there are no headers and even if there is no entity body. Historically, however,many clients and servers (mistakenly) omitted the final CRLF if there was no entitybody. To interoperate with these popular but noncompliant implementations, cli-ents and servers should accept messages that end without the final CRLF.
Start Lines
All HTTP messages begin with a start line. The start line for a request message sayswhat to do. The start line for a response message says what happened.|

Request line
Request messages ask servers to do something to a resource. The start line for arequest message, or request line, contains a method describing what operation theserver should perform and a request URL describing the resource on which to per-form the method. The request line also includes an HTTP version which tells theserver what dialect of HTTP the client is speaking.
All of these fields are separated by whitespace. In Figure 3-5a, the request method is
GET, the request URL is /test/hi-there.txt, and the version is HTTP/1.1. Prior to
HTTP/1.0, request lines were not required to contain an HTTP version.
Response line
Response messages carry status information and any resulting data from an opera-tion back to a client. The start line for a response message, or response line, containsthe HTTP version that the response message is using, a numeric status code, and atextual reason phrase describing the status of the operation.
All these fields are separated by whitespace. In Figure 3-5b, the HTTP version is
HTTP/1.0, the status code is 200 (indicating success), and the reason phrase is OK,meaningthedocumentwasreturnedsuccessfully.Prior to HTTP/1.0, responses werenot required to contain a response line.
Methods
Themethodbeginsthestart line of requests, telling the server what to do. For exam-ple, in the line “GET /specials/saw-blade.gif HTTP/1.0,” the method is GET.
The HTTPspecifications have defined a set of common request methods. For exam-ple, the GET method gets a document from a server, the POST method sends data toa server for processing, and the OPTIONS method determines the general capabili-ties of a web server or the capabilities of a web server for a specific resource.
Table 3-1 describes seven of these methods. Note that some methods have a body inthe request message, and other methods have bodyless requests.
Table 3-1. Common HTTP methods
Method                   Description                         Message body?
GET                      Get a document from the server.     No
HEAD                     Get just the headers for a document from the server.                 No
POST                     Send data to the server for processing.                              Yes
PUT                      Store the body of the request on the server.                         Yes
TRACE                    Trace the message through proxy servers to the server.               No
OPTIONS                  Determine what methods can operate on a server.                      No
DELETE                   Remove a document from the server.  No|

Not all servers implement all seven of the methods in Table 3-1. Furthermore,because HTTP was designed to be easily extensible, other servers may implementtheir own request methods in addition to these. These additional methods are calledextension methods, because they extend the HTTP specification.
Status codes
As methods tell the server what to do, status codes tell the client what happened.
Status codes live in the start lines of responses. For example, in the line “HTTP/1.0200 OK,” the status code is 200.
Whenclients send request messages to an HTTP server, many things can happen. Ifyouarefortunate, the request will complete successfully. You might not always be solucky. The server may tell you that the resource you requested could not be found,that you don’t have permission to access the resource, or perhaps that the resourcehas moved someplace else.
Status codes are returned in the start line of each response message. Both a numericand a human-readable status are returned. The numeric code makes error process-ing easy for programs, while the reason phrase is easily understood by humans.
Thedifferent status codes are grouped into classes by their three-digit numeric codes.
Status codes between 200 and 299 represent success. Codes between 300 and 399indicate that the resource has been moved. Codes between 400 and 499 mean thatthe client did something wrong in the request. Codes between 500 and 599 meansomething went awry on the server.
The status code classes are shown in Table 3-2.
Table 3-2. Status code classes
Overall range             Defined range             Category100-199                   100-101                   Informational200-299                   200-206                   Successful300-399                   300-305                   Redirection400-499                   400-415                   Client error500-599                   500-505                   Server error
Current versions of HTTP define only a few codes for each status category. As theprotocol evolves, more status codes will be defined officially in the HTTP specifica-tion. If you receive a status code that you don’t recognize, chances are someone hasdefined it as an extension to the current protocol. You should treat it as a generalmember of the class whose range it falls into.
For example, if you receive status code 515 (which is outside of the defined range for5XX codes listed in Table 3-2), you should treat the response as indicating a servererror, which is the general class of 5XX messages.|

Table 3-3 lists some of the most common status codes that you will see. We willexplain all the current HTTP status codes in detail later in this chapter.
Table 3-3. Common status codes
Status code              Reason phrase             Meaning200                      OK                        Success! Any requested data is in the response body.401                      Unauthorized              You need to enter a username and password.404                      Not Found                 The server cannot find a resource for the requested URL.
Reason phrases
The reason phrase is the last component of the start line of the response. It providesa textual explanation of the status code. For example, in the line “HTTP/1.0 200
OK,” the reason phrase is OK.
Reason phrases are paired one-to-one with status codes. The reason phrase providesa human-readable version of the status code that application developers can passalong to their users to indicate what happened during the request.
The HTTP specification does not provide any hard and fast rules for what reasonphrases should look like. Later in this chapter, we list the status codes and some sug-gested reason phrases.
Version numbers
Version numbers appear in both request and response message start lines in the for-mat HTTP/x.y. They provide a means for HTTP applications to tell each other whatversion of the protocol they conform to.
Version numbers are intended to provide applications speaking HTTP with a clueabout each other’s capabilities and the format of the message. An HTTP Version 1.2application communicating with an HTTP Version 1.1 application should know thatit should not use any new 1.2features, as they likely are not implemented by theapplication speaking the older version of the protocol.
The version number indicates the highest version of HTTP that an application sup-ports. In some cases this leads to confusion between applications,* because HTTP/1.0applications interpret a response with HTTP/1.1 in it to indicate that the response isa 1.1 response, when in fact that’s just the level of protocol used by the respondingapplication.
Notethatversion numbers are not treated as fractional numbers. Each number in theversion (for example, the “1” and “0” in HTTP/1.0) is treated as a separate number.
So, when comparing HTTP versions, each number must be compared separately in* See http://httpd.apache.org/docs-2.0/misc/known_client_problems.html for more on cases in which Apachehas run into this problem with clients.|
order to determine which is the higher version. For example, HTTP/2.22 is a higherversion than HTTP/2.3, because 22 is a larger number than 3.
Headers
The previous section focused on the first line of request and response messages(methods, status codes, reason phrases, and version numbers). Following the startline comes a list of zero, one, or many HTTP header fields (see Figure 3-5).
HTTP header fields add additional information to request and response messages.
They are basically just lists of name/value pairs. For example, the following headerline assigns the value 19 to the Content-Length header field:
Content-length: 19
Header classiﬁcations
The HTTP specification defines several header fields. Applications also are free toinvent their own home-brewed headers. HTTP headers are classified into:
General headers
Can appear in both request and response messages
Request headers
Provide more information about the request
Response headers
Provide more information about the response
Entity headers
Describe body size and contents, or the resource itself
Extension headers
New headers that are not defined in the specification
Each HTTPheaderhasasimplesyntax:aname,followedbyacolon(:), followed byoptional whitespace, followed by the field value, followed by a CRLF. Table 3-4 listssome common header examples.
Table 3-4. Common header examples
Header example            Description
Date: Tue, 3 Oct 1997 02:16:03 GMT                         The date the server generated the response
Content-length: 15040     The entity body contains 15,040 bytes of data
Content-type: image/gif   The entity body is a GIF image
Accept: image/gif, image/jpeg, text/html                   The client accepts GIF and JPEG images and HTML
Header continuation lines
Long header lines can be made more readable by breaking them into multiple lines,preceding each extra line with at least one space or tab character.|

For example:
HTTP/1.0 200 OK
Content-Type: image/gif
Content-Length: 8572
Server: Test Server
Version 1.0
In this example, the response message contains a Server header whose value is bro-ken into continuation lines. The complete value of the header is “Test Server Ver-sion 1.0”.
We’ll briefly describe all the HTTP headers later in this chapter. We also provide amore detailed reference summary of all the headers in Appendix C.
Entity Bodies
The third part of an HTTP message is the optional entity body. Entity bodies are thepayload of HTTP messages. They are the things that HTTP was designed to transport.
HTTP messages can carry many kinds of digital data: images, video, HTML docu-ments, software applications, credit card transactions, electronic mail, and so on.
Version 0.9 Messages
HTTP Version 0.9 was an early version of the HTTP protocol. It was the startingpoint for the request and response messages that HTTP has today, but with a farsimpler protocol (see Figure 3-6).
GET /specials/saw-blade.gif
No version number
Client                         www.joes-hardware.com
Client                         www.joes-hardware.com
Figure 3-6. HTTP/0.9 transaction
HTTP/0.9 messages also consisted of requests and responses, but the request con-tained merely the method and the request URL, and the response contained only theentity. No version information (it was the first and only version at the time), no sta-tus code or reason phrase, and no headers were included.|

However, this simplicity did not allow for much flexibility or the implementation ofmost of the HTTP features and applications described in this book. We brieflydescribe it here because there are still clients, servers, and other applications that useit, and application writers should be aware of its limitations.
Methods
Let’s talk in more detail about some of the basic HTTP methods, listed earlier in
Table 3-1. Note that not all methods are implemented by every server. To be compli-ant with HTTP Version 1.1, a server need implement only the GET and HEAD meth-ods for its resources.
Even when servers do implement all of these methods, the methods most likely haverestricted uses. For example, servers that support DELETE or PUT (described later inthis section) would not want just anyone to be able to delete or store resources.
These restrictions generally are set up in the server’s configuration, so they vary fromsite to site and from server to server.
Safe Methods
HTTP defines a set of methods that are called safe methods. The GET and HEADmethods are said to be safe, meaning that no action should occur as a result of an
HTTP request that uses either the GET or HEAD method.
By no action, we mean that nothing will happen on the server as a result of the
HTTPrequest. For example, consider when you are shopping online at Joe’s Hard-ware and you click on the “submit purchase” button. Clicking on the button sub-mits a POST request (discussed later) with your credit card information, and anaction is performed on the server on your behalf. In this case, the action is yourcredit card being charged for your purchase.
There is no guarantee that a safe method won’t cause an action to be performed (inpractice, that is up to the web developers). Safe methods are meant to allow HTTPapplication developers to let users know when an unsafe method that may causesome action to be performed is being used. In our Joe’s Hardware example, yourwebbrowsermaypopupawarningmessagelettingyouknowthatyouaremakingarequest with an unsafe method and that, as a result, something might happen on theserver (e.g., your credit card being charged).
GET
GET is the most common method. It usually is used to ask a server to send aresource. HTTP/1.1 requires servers to implement this method. Figure 3-7 shows anexample of a client making an HTTP request with the GET method.|

Request message
GET /seasonal/index-fall.html HTTP/1.1
Host: www.joes-hardware.com
Accept: *
Response message
HTTP/1.1 200 OK
Content-Type: text/html
Client             Context-Length: 617                         www.joes-hardware.com<HTML><HEAD><TITLE>Joe’s Special Offers </TITLE>...
Figure 3-7. GET example
HEAD
TheHEADmethodbehavesexactlyliketheGETmethod,buttheserverreturnsonlythe headers in the response. No entity body is ever returned. This allows a client toinspect the headers for a resource without having to actually get the resource. Using
HEAD, you can:• Find out about a resource (e.g., determine its type) without getting it.• See if an object exists, by looking at the status code of the response.• Test if the resource has been modified, by looking at the headers.
Server developers must ensure that the headers returned are exactly those that a GETrequest would return. The HEAD method also is required for HTTP/1.1 compli-ance. Figure 3-8 shows the HEAD method in action.
Request message
HEAD /seasonal/index-fall.html HTTP/1.1
Host: www.joes-hardware.com
Accept: *
Response message
HTTP/1.1 200 OK
Content-Type: text/html
Client                                Context-Length: 617      www.joes-hardware.comno entity body
Figure 3-8. HEAD example
PUT
The PUT method writes documents to a server, in the inverse of the way that GETreads documents from a server. Some publishing systems let you create web pagesand install them directly on a web server using PUT (see Figure 3-9).|

Request message
PUT /product-list.txt HTTP/1.1
Host: www.joes-hardware.com
Content-type: text/plain
Content-length: 34
Updated product list coming soon!
Joe      Response message                            www.joes-hardware.com Server updates/createsresource “/product-list.txt”
HTTP/1.1 201 Created         and writes it to its disk.
Location: http://www.joes-hardware.com/product-list.txt
Content-Type: text/plain
Context-Length: 47http://www.joes-hardware.com/product-list.txt
Figure 3-9. PUT example
The semantics of the PUT method are for the server to take the body of the requestand either use it to create a new document named by the requested URL or, if that
URL already exists, use the body to replace it.
Because PUT allows you to change content, many web servers require you to log inwith a password before you can perform a PUT. You can read more about passwordauthentication in Chapter 12.
POST*
The POST method was designed to send input data to the server. In practice, it isoften used to support HTML forms. The data from a filled-in form typically is sent tothe server, which then marshals it off to where it needs to go (e.g., to a server gatewayprogram, which then processes it). Figure 3-10 shows a client making an HTTPrequest—sending form data to a server—with the POST method.
TRACE
When a client makes a request, that request may have to travel through firewalls,proxies, gateways, or other applications. Each of these has the opportunity to mod-ify the original HTTP request. The TRACE method allows clients to see how itsrequest looks when it finally makes it to the server.
A TRACE request initiates a “loopback” diagnostic at the destination server. Theserver at the final leg of the trip bounces back a TRACE response, with the virgin* POSTisusedtosenddatatoaserver.PUTisusedtodepositdataintoaresourceontheserver(e.g.,afile).|

Browser sticks data in entitybody of message
Request message
POST /inventory-check.cgi HTTP/1.1
Host: www.joes-hardware.com
Content-type: text/plain
Content-length: 18item=bandsaw 2647
Response message               YES!
Client                HTTP/1.1 20o OK                     www.joes-hardware.com
Content-type: text/plain
Context-length: 37                    “item= bandsaw 2647”
The bandsaw model 2647 is in stock!
CGI program
Inventory check
Inventorylist
Figure 3-10. POST examplerequest message it received in the body of its response. A client can then see how, orif, its original message was munged or modified along the request/response chain ofany intervening HTTP applications (see Figure 3-11).
TheTRACEmethodisusedprimarilyfordiagnostics; i.e., verifying that requests aregoing through the request/response chain as intended. It’s also a good tool for see-ing the effects of proxies and other applications on your requests.
As good as TRACE is for diagnostics, it does have the drawback of assuming thatintervening applications will treat different types of requests (different methods—
GET, HEAD, POST, etc.) the same. Many HTTP applications do different thingsdepending on the method—for example, a proxy might pass a POST request directlyto the server but attempt to send a GET request to another HTTP application (suchas a web cache). TRACE does not provide a mechanism to distinguish methods.
Generally, intervening applications make the call as to how they process a TRACErequest.|

Request message                          TRACE /product-list.txt HTTP/1.1
TRACE /product-list.txt HTTP/1.1        Host: www.joes-hardware.com
Accept: *                               Accept: *
Host: www.joes-hardware.com             Via: 1.1 proxy3.company.com
Client   Proxy Response message            www.joes-hardware.com
HTTP/1.1 200 OK                          HTTP/1.1 200 OK
Content-type: text/plain                 Content-type: text/plain
Content-length: 96                       Content-length: 96
Via: 1.1 proxy3.company.com
TRACE /product-list.txt HTTP/1.1
TRACE /product-list.txt HTTP/1.1         Host: www.joes-hardware.com
Host: www.joes-hardware.com              Accept: *
Accept: *                                Via: 1.1 proxy3.company.com
Via: 1.1 proxy3.company.com
Examining the entity, the client can see that its request was upgraded to protocol Version 1.1.
Along with the upgrade came a few additional request headers.
Figure 3-11. TRACE example
No entity body can be sent with a TRACE request. The entity body of the TRACEresponse contains, verbatim, the request that the responding server received.
OPTIONS
TheOPTIONSmethodaskstheservertotellusaboutthevarioussupportedcapabil-ities of the web server. You can ask a server about what methods it supports in gen-eral or for particular resources. (Some servers may support particular operations onlyon particular kinds of objects).
This provides a means for client applications to determine how best to access vari-ous resources without actually having to access them. Figure 3-12shows a requestscenario using the OPTIONS method.
Request message
OPTIONS * HTTP/1.1
Host: www.joes-hardware.com
Accept: *
Since the request is for optionson all resources, the server justreturns the methods it supportsfor its resources.
Response message
Client                HTTP/1.1 200 OK                 www.joes-hardware.com
Allow: GET, POST, PUT, OPTIONS
Context-length: 0
Figure 3-12. OPTIONS example|

DELETE
The DELETE method does just what you would think—it asks the server to deletethe resources specified by the request URL. However, the client application is notguaranteed that the delete is carried out. This is because the HTTP specificationallows the server to override the request without telling the client. Figure 3-13 showsan example of the DELETE method.
Request message
DELETE /product-list.txt HTTP/1.1
Host: www.joes-hardware.com
Response message
Client                    HTTP/1.1 200 OK              www.joes-hardware.com   File “product-list.txt”
Content-Type: text/plain                               removed from
Content-Length: 54     server’s disk
Client thinks               I have your delete request,resource                   will take time to process.was deleted
Figure 3-13. DELETE example
Extension Methods
HTTPwasdesignedtobefield-extensible, so new features wouldn’t cause older soft-ware to fail. Extension methods are methods that are not defined in the HTTP/1.1specification. They provide developers with a means of extending the capabilities ofthe HTTP services their servers implement on the resources that the servers manage.
Some common examples of extension methods are listed in Table 3-5. These meth-ods are all part of the WebDAV HTTP extension (see Chapter 19) that helps sup-port publishing of web content to web servers over HTTP.
Table 3-5. Example web publishing extension methods
Method        Description
LOCK          Allowsauserto“lock”aresource—forexample,youcouldlockaresourcewhileyouareeditingittopreventothers from editing it at the same time
MKCOL         Allows a user to create a resource
COPY          Facilitates copying resources on a server
MOVE          Moves a resource on a server
It’s important to note that not all extension methods are defined in a formal specifi-cation. If you define an extension method, it’s likely not to be understood by most
HTTP applications. Likewise, it’s possible that your HTTP applications could runinto extension methods being used by other applications that it does not understand.|

In these cases, it is best to be tolerant of extension methods. Proxies should try torelay messages with unknown methods through to downstream servers if they arecapable of doing that without breaking end-to-end behavior. Otherwise, they shouldrespond with a 501 Not Implemented status code. Dealing with extension methods(and HTTP extensions in general) is best done with the old rule, “be conservative inwhat you send, be liberal in what you accept.”
Status Codes
HTTP status codes are classified into five broad categories, as shown earlier in
Table 3-2. This section summarizes the HTTP status codes for each of the five classes.
The status codes provide an easy way for clients to understand the results of theirtransactions. In this section, we also list example reason phrases, though there is noreal guidance on the exact text for reason phrases. We include the recommended rea-son phrases from the HTTP/1.1 specification.100–199: Informational Status Codes
HTTP/1.1 introduced the informational status codes to the protocol. They are rela-tively new and subject to a bit of controversy about their complexity and perceivedvalue. Table 3-6 lists the defined informational status codes.
Table 3-6. Informational status codes and reason phrases
Status code     Reason phrase         Meaning100             Continue              Indicates that an initial part of the request was received and the client should con-tinue. After sending this, the server must respond after receiving the request. Seethe Expect header in AppendixC for more information.101             Switching Protocols   Indicates that the server is changing protocols, as specified by the client, to onelisted in the Upgrade header.
The 100 Continue status code, in particular, is a bit confusing. It’s intended to opti-mize the case where an HTTP client application has an entity body to send to aserver but wants to check that the server will accept the entity before it sends it. Wediscuss it here in a bit more detail (how it interacts with clients, servers, and proxies)because it tends to confuse HTTP programmers.
Clients and 100 Continue
If a client is sending an entity to a server and is willing to wait for a 100 Continueresponse before it sends the entity, the client needs to send an Expect request header(see Appendix C) with the value 100-continue. If the client is not sending an entity, itshouldn’t send a 100-continue Expect header, because this will only confuse theserver into thinking that the client might be sending an entity.|
100-continue, in many ways, is an optimization. A client application should reallyuse 100-continue only to avoid sending a server a large entity that the server will notbe able to handle or use.
Because of the initial confusion around the 100 Continue status (and given some ofthe older implementations out there), clients that send an Expect header for 100-continue should not wait forever for the server to send a 100 Continue response.
After some timeout, the client should just send the entity.
In practice, client implementors also should be prepared to deal with unexpected 100
Continue responses (annoying, but true). Some errant HTTP applications send thiscode inappropriately.
Servers and 100 Continue
If a server receives a request with the Expect header and 100-continue value, it shouldrespond with either the 100 Continue response or an error code (see Table 3-9). Serv-ers should never send a 100 Continue status code to clients that do not send the 100-continue expectation. However, as we noted above, some errant servers do this.
If for some reason the server receives some (or all) of the entity before it has had achance to send a 100 Continue response, it does not need to send this status code,because the client already has decided to continue. When the server is done readingthe request, however, it still needs to send a final status code for the request (it canjust skip the 100 Continue status).
Finally, if a server receives a request with a 100-continue expectation and it decides toendtherequestbefore it has read the entity body (e.g., because an error has occurred),it should not just send a response and close the connection, as this can prevent the cli-ent from receiving the response (see “TCP close and reset errors” in Chapter 4).
Proxies and 100 Continue
Aproxythat receives from a client a request that contains the 100-continue expecta-tion needs to do a few things. If the proxy either knows that the next-hop server (dis-cussed in Chapter 6) is HTTP/1.1-compliant or does not know what version thenext-hop server is compliant with, it should forward the request with the Expectheader in it. If it knows that the next-hop server is compliant with a version of HTTPearlier than 1.1, it should respond with the 417 Expectation Failed error.
If a proxy decides to include an Expect header and 100-continue value in its requeston behalf of a client that is compliant with HTTP/1.0 or earlier, it should not for-ward the 100 Continue response (if it receives one from the server) to the client,because the client won’t know what to make of it.
It can pay for proxies to maintain some state about next-hop servers and the ver-sions of HTTP they support (at least for servers that have received recent requests),so they can better handle requests received with a 100-continue expectation.|
200–299: Success Status Codes
When clients make requests, the requests usually are successful. Servers have anarray of status codes to indicate success, matched up with different types of requests.
Table 3-7 lists the defined success status codes.
Table 3-7. Success status codes and reason phrases
Status code     Reason phrase        Meaning200             OK                   Request is okay, entity body contains requested resource.201             Created              For requests that create server objects (e.g., PUT). The entity body of the responseshould contain the various URLs for referencing the created resource, with the Loca-tion header containing the most specific reference. See Table 3-21 for more on the
Location header.
The server must have created the object prior to sending this status code.202             Accepted             The request was accepted, but the server has not yet performed any action with it.
There are no guarantees that the server will complete the request; this just meansthat the request looked valid when accepted.
The server should include an entity body with a description indicating the status ofthe request and possibly an estimate for when it will be completed (or a pointer towhere this information can be obtained).203             Non-Authoritative    The information contained in the entity headers (see “Entity Headers” for more infor-
Information          mation on entity headers) came not from the origin server but from a copy of theresource. This could happen if an intermediary had a copy of a resource but could notor did not validate the meta-information (headers) it sent about the resource.
Thisresponsecodeisnotrequiredtobeused;itisanoptionforapplicationsthathavea response that would be a 200 status if the entity headers had come from the originserver.204             No Content           The response message contains headers and a status line, but no entity body. Prima-rily used to update browsers without having them move to a new document (e.g.,refreshing a form page).205             Reset Content        Another code primarily for browsers. Tells the browser to clear any HTML form ele-ments on the current page.206             Partial Content      A partial or range request was successful. Later, we will see that clients can requestpart or a range of a document by using special headers—this status code indicatesthat the range request was successful. See “Range Requests” in Chapter 15 for moreon the Range header.
A 206 response must include a Content-Range, Date, and either ETag or Content-
Location header.300–399: Redirection Status Codes
The redirection status codes either tell clients to use alternate locations for theresources they’re interested in or provide an alternate response instead of the con-tent. If a resource has moved, a redirection status code and an optional Locationheader can be sent to tell the client that the resource has moved and where it can|
now be found (see Figure 3-14). This allows browsers to go to the new locationtransparently, without bothering their human users.
Request message
GET /pet-products.txt HTTP/1.1
Host: www.joes-hardware.com
Accept: *
Response message
Client             HTTP/1.1 301 OK                            www.joes-hardware.com
Location: http://www.gentle-grooming.com/
Content-length: 56
Content-type: text/plain
Please go to our partner site,www.gentle-grooming.com
Request message
GET / HTTP/1.1
Host: www.gentle-grooming.com
Accept: *
Response message
Client                              HTTP/1.1 200 OK          www.gentle-grooming.com
Content-type: text/html
Content-length: 3307...
Figure 3-14. Redirected request to new location
Some of the redirection status codes can be used to validate an application’s localcopy of a resource with the origin server. For example, an HTTP application cancheck if the local copy of its resource is still up-to-date or if the resource has beenmodified on the origin server. Figure 3-15 shows an example of this. The client sendsa special If-Modified-Since header saying to get the document only if it has beenmodified since October 1997. The document has not changed since this date, so theserver replies with a 304 status code instead of the contents.|

Client has previously requested copy of:http://www.joes-hardware.com/seasonal/index-fall.html
Request message
GET /seasonal/index-fall.html HTTP/1.1
Client          Host: www.joes-hardware.com
Accept: *  Has not changed
If-Modified-Since: Fri, Oct 3 1997 02:16:00 GMT
Response message
HTTP/1.1 304 Not Modified                               www.joes-hardware.com...
Client
Browser displays local copy, since the originalhas not changed since we last requested it.
Figure 3-15. Request redirected to use local copy
In general, it’s good practice for responses to non-HEAD requests that include a redi-rection status code to include an entity with a description and links to the redirected
URL(s)—see the first response message in Figure 3-14. Table 3-8 lists the definedredirection status codes.
Table 3-8. Redirection status codes and reason phrases
Status code       Reason phrase            Meaning300               Multiple Choices         Returned when a client has requested a URL that actually refers to multipleresources, such as a server hosting an English and French version of an HTML docu-ment. This code is returned along with a list of options; the user can then selectwhich one he wants. See Chapter17 for more on clients negotiating when there aremultiple versions. The server can include the preferred URL in the Location header.301               Moved Permanently        Used when the requested URL has been moved. The response should contain in the
Location header the URL where the resource now resides.302               Found                    Like the 301 status code; however, the client should use the URL given in the Loca-tion header to locate the resource temporarily. Future requests should use the old
URL.|

Table 3-8. Redirection status codes and reason phrases (continued)
Status code     Reason phrase         Meaning303             See Other             UsedtotelltheclientthattheresourceshouldbefetchedusingadifferentURL.Thisnew URL is in the Location header of the response message. Its main purpose is toallow responses to POST requests to direct a client to a resource.304             Not Modified          Clients can maketheirrequestsconditionalbytherequestheaderstheyinclude.See
Table3-15 for more on conditional headers. If a client makes a conditional request,suchasaGETiftheresourcehasnotbeenchangedrecently,thiscodeisusedtoindi-cate that the resource has not changed. Responses with this status code should notcontain an entity body.305             Use Proxy             Usedtoindicatethattheresourcemustbeaccessedthroughaproxy;thelocationofthe proxy is given in the Location header. It’s important that clients interpret thisresponse relative to a specific resource and do not assume that this proxy should beused for all requests or even all requests to the server holding the requestedresource.Thiscouldleadtobrokenbehavioriftheproxymistakenlyinterferedwitharequest, and it poses a security hole.306             (Unused)              Not currently used.307             Temporary Redirect    Like the 301 status code; however, the client should use the URL given in the Loca-tion header to locate the resource temporarily. Future requests should use the old
URL.
From Table3-8, you may have noticed a bit of overlap between the 302, 303, and307 status codes. There is some nuance to how these status codes are used, most ofwhich stems from differences in the ways that HTTP/1.0 and HTTP/1.1 applicationstreat these status codes.
WhenanHTTP/1.0 client makes a POST request and receives a 302redirect statuscode in response, it will follow the redirect URL in the Location header with a GETrequest to that URL (instead of making a POST request, as it did in the originalrequest).
HTTP/1.0 servers expect HTTP/1.0 clients to do this—when an HTTP/1.0 serversends a 302status code after receiving a POST request from an HTTP/1.0 client, theserver expects that client to follow the redirect with a GET request to the redirected
URL.
The confusion comes in with HTTP/1.1. The HTTP/1.1 specification uses the 303status code to get this same behavior (servers send the 303 status code to redirect aclient’s POST request to be followed with a GET request).
To get around the confusion, the HTTP/1.1 specification says to use the 307 statuscode in place of the 302status code for temporary redirects to HTTP/1.1 clients.
Servers can then save the 302 status code for use with HTTP/1.0 clients.
What this all boils down to is that servers need to check a client’s HTTP version toproperly select which redirect status code to send in a redirect response.|
400–499: Client Error Status Codes
Sometimes a client sends something that a server just can’t handle, such as a badlyformed request message or, most often, a request for a URL that does not exist.
We’ve all seen the infamous 404 Not Found error code while browsing—this is justthe server telling us that we have requested a resource about which it knows nothing.
Many of the client errors are dealt with by your browser, without it ever botheringyou. A few, like 404, might still pass through. Table 3-9 shows the various clienterror status codes.
Table 3-9. Client error status codes and reason phrases
Status code     Reason phrase             Meaning400             Bad Request               Used to tell the client that it has sent a malformed request.401             Unauthorized              Returned along with appropriate headers that ask the client to authenticateitself before it can gain access to the resource. See Chapter 12 for more onauthentication.402             Payment Required          Currently this status code is not used, but it has been set aside for future use.403             Forbidden                 Used to indicate that the request was refused by the server. If the server wantstoindicatewhytherequestwasdenied,itcanincludeanentitybodydescribingthereason.However,thiscodeusuallyisusedwhentheserverdoesnotwanttoreveal the reason for the refusal.404             Not Found                 Used to indicate that the server cannot find the requested URL. Often, an entityis included for the client application to display to the user.405             Method Not Allowed        Used when a request is made with a method that is not supported for therequested URL. The Allow header should be included in the response to tell theclient what methods are allowed on the requested resource. See “Entity Head-ers” for more on the Allow header.406             Not Acceptable            Clients can specify parameters about what types of entities they are willing toaccept.ThiscodeisusedwhentheserverhasnoresourcematchingtheURLthatis acceptable for the client. Often, servers include headers that allow the clientto figure out why the request could not be satisfied. See “Content Negotiationand Transcoding” in Chapter17 for more information.407             Proxy Authentication      Like the 401 status code, but used for proxy servers that require authentication
Required                  for a resource.408             Request Timeout           If a client takes too long to complete its request, a server can send back this sta-tus code and close down the connection. The length of this timeout varies fromserver to server but generally is long enough to accommodate any legitimaterequest.409             Conflict                  Used to indicate some conflict that the request may be causing on a resource.
Servers might send this code when they fear that a request could cause a con-flict. The response should contain a body describing the conflict.410             Gone                      Similar to 404, except that the server once held the resource. Used mostly forweb site maintenance, so a server’s administrator can notify clients when aresource has been removed.|

Table 3-9. Client error status codes and reason phrases (continued)
Status code     Reason phrase             Meaning411             Length Required           Used when the server requires a Content-Length header in the request mes-sage. See “Content headers” for more on the Content-Length header.412             Precondition Failed       Used if a client makes a conditional request and one of the conditions fails. Con-ditionalrequestsoccurwhenaclientincludesanExpectheader.SeeAppendixCfor more on the Expect header.413             Request Entity Too Large  Used when a client sends an entity body that is larger than the server can orwants to process.414             Request URI Too Long      Used when a client sends a request with a request URL that is larger than theserver can or wants to process.415             UnsupportedMediaType      Used when a client sends an entity of a content type that the server does notunderstand or support.416             Requested Range Not       Usedwhentherequestmessagerequestedarangeofagivenresourceandthat
Satisfiable               range either was invalid or could not be met.417             Expectation Failed        Used when the request contained an expectation in the Expect request headerthat the server could not satisfy. See Appendix C for more on the Expect header.
A proxy or other intermediary application can send this response code if it hasunambiguous evidence that the origin server will generate a failed expectationfor the request.500–599: Server Error Status Codes
Sometimes a client sends a valid request, but the server itself has an error. This couldbe a client running into a limitation of the server or an error in one of the server’ssubcomponents, such as a gateway resource.
Proxies often run into problems when trying to talk to servers on a client’s behalf.
Proxies issue 5XX server error status codes to describe the problem (Chapter 6 cov-ers this in detail). Table 3-10 lists the defined server error status codes.
Table 3-10. Server error status codes and reason phrases
Status code     Reason phrase             Meaning500             Internal Server Error     Used when the server encounters an error that prevents it from servicing therequest.501             Not Implemented           Usedwhenaclientmakesarequestthatisbeyondtheserver’scapabilities(e.g.,using a request method that the server does not support).502             Bad Gateway               Used when a server acting as a proxy or gateway encounters a bogus responsefromthenextlinkintherequestresponsechain(e.g.,ifitisunabletoconnecttoits parent gateway).503             Service Unavailable       Used to indicate that the server currently cannot service the request but will beable to in the future. If the server knows when the resource will become avail-able, it can include a Retry-After header in the response. See “Response Head-ers” for more on the Retry-After header.|

Table 3-10. Server error status codes and reason phrases (continued)
Status code     Reason phrase             Meaning504             Gateway Timeout           Similar to status code 408, except that the response is coming from a gatewayor proxy that has timed out waiting for a response to its request from anotherserver.505             HTTP Version Not          Usedwhenaserverreceivesarequestinaversionoftheprotocolthatitcan’tor
Supported                 won’t support. Some server applications elect not to support older versions ofthe protocol.
Headers
Headers and methods work together to determine what clients and servers do. Thissection quickly sketches the purposes of the standard HTTP headers and some head-ers that are not explicitly defined in the HTTP/1.1 specification (RFC 2616).
AppendixC summarizes all these headers in more detail.
There are headers that are specific for each type of message and headers that aremore general in purpose, providing information in both request and response mes-sages. Headers fall into five main classes:
General headers
These are generic headers used by both clients and servers. They serve generalpurposes that are useful for clients, servers, and other applications to supply tooneanother. For example, the Date header is a general-purpose header that allowsboth sides to indicate the time and date at which the message was constructed:
Date: Tue, 3 Oct 1974 02:16:00 GMT
Request headers
As the name implies, request headers are specific to request messages. They pro-vide extra information to servers, such as what type of data the client is willingto receive. For example, the following Accept header tells the server that the cli-ent will accept any media type that matches its request:
Accept: */*
Response headers
Response messages have their own set of headers that provide information to theclient (e.g., what type of server the client is talking to). For example, the follow-ing Server header tells the client that it is talking to a Version 1.0 Tiki-Hut server:
Server: Tiki-Hut/1.0
Entity headers
Entity headers refer to headers that deal with the entity body. For instance,entity headers can tell the type of the data in the entity body. For example, thefollowing Content-Type header lets the application know that the data is an
HTML document in the iso-latin-1 character set:
Content-Type: text/html; charset=iso-latin-1|

Extension headers
Extension headers are nonstandard headers that have been created by applica-tion developers but not yet added to the sanctioned HTTP specification. HTTPprograms need to tolerate and forward extension headers, even if they don’tknow what the headers mean.
General Headers
Some headers provide very basic information about a message. These headers arecalled general headers. They are the fence straddlers, supplying useful informationabout a message regardless of its type.
For example, whether you are constructing a request message or a response mes-sage, the date and time the message is created means the same thing, so the headerthat provides this kind of information is general to both types of messages.
Table 3-11 lists the general informational headers.
Table 3-11. General informational headers
Header                Description
Connection            Allows clients and servers to specify options about the request/response connection
Datea                 Provides a date and time stamp telling when the message was created
MIME-Version          Gives the version of MIME that the sender is using
Trailer              Lists the set of headers that are in the trailer of a message encodedwiththechunkedtransferencodingb
Transfer-Encoding     Tells the receiver whatencodingwasperformedonthemessageinorderforittobetransportedsafely
Upgrade               Gives a new version or protocol that the sender would like to “upgrade” to using
Via                   Shows what intermediaries (proxies, gateways) the message has gone througha AppendixC lists the acceptable date formats for the Date header.b Chunked transfer codings are discussed further in “Chunking and persistent connections” in Chapter 15.
General caching headers
HTTP/1.0 introduced the first headers that allowed HTTP applications to cachelocal copies of objects instead of always fetching them directly from the origin server.
The latest version of HTTP has a very rich set of cache parameters. In Chapter 7, wecover caching in depth. Table 3-12 lists the basic caching headers.
Table 3-12. General caching headers
Header                Description
Cache-Control         Used to pass caching directions along with the message
Pragmaa               Another way to pass directions along with the message, though not specific to cachinga Pragmatechnically is a request header. It was never specified for use in responses. Because of its common misuse as a response header,manyclientsandproxieswillinterpretPragmaasaresponseheader,buttheprecisesemanticsarenotwelldefined.Inanycase,Pragmais deprecated in favor of Cache-Control.|

Request Headers
Request headers are headers that make sense only in a request message. They giveinformation about who or what is sending the request, where the request originated,or what the preferences and capabilities of the client are. Servers can use the informa-tion the request headers give them about the client to try to give the client a betterresponse. Table 3-13 lists the request informational headers.
Table 3-13. Request informational headers
Header                              Description
Client-IPa                          Provides the IP address of the machine on which the client is runningb
From                                Provides the email address of the client’s user
Host                                Gives the hostname and port of the server to which the request is being sent
Referer                             Provides the URL of the document that contains the current request URI
UA-Color                            Provides information about the color capabilities of the client machine’s display
UA-CPUc                             Gives the type or manufacturer of the client’s CPU
UA-Disp                             Provides information about the client’s display (screen) capabilities
UA-OS                               Gives the name and version of operating system running on the client machine
UA-Pixels                           Provides pixel information about the client machine’s display
User-Agent                          Tells the server the name of the application making the requesta Client-IP and the UA-* headers are not defined in RFC 2616 but are implemented by many HTTP client applications.b An RFC 822 email address format.c  Whileimplementedbysomeclients,theUA-*headerscanbeconsideredharmful.Content,specificallyHTML,shouldnotbetargetedatspecific client configurations.
Accept headers
Accept headers give the client a way to tell servers their preferences and capabilities:what they want, what they can use, and, most importantly, what they don’t want.
Servers can then use this extra information to make more intelligent decisions aboutwhat to send. Accept headers benefit both sides of the connection. Clients get whatthey want, and servers don’t waste their time and bandwidth sending something theclient can’t use. Table 3-14 lists the various accept headers.
Table 3-14. Accept headers
Header                              Description
Accept                              Tells the server what media types are okay to send
Accept-Charset                      Tells the server what charsets are okay to send
Accept-Encoding                     Tells the server what encodings are okay to send
Accept-Language                     Tells the server what languages are okay to send
TEaTells the server what extension transfer codings are okay to usea See “Transfer-Encoding Headers” in Chapter15 for more on the TE header.|

Conditional request headers
Sometimes, clients want to put some restrictions on a request. For instance, if the cli-ent already has a copy of a document, it might want to ask a server to send the docu-ment only if it is different from the copy the client already has. Using conditionalrequest headers, clients can put such restrictions on requests, requiring the server tomake sure that the conditions are true before satisfying the request. Table 3-15 liststhe various conditional request headers.
Table 3-15. Conditional request headers
Header                   Description
Expect                   Allows a client to list server behaviors that it requires for a request
If-Match                 Gets the document if the entity tag matches the current entity tag for the documenta
If-Modified-Since        Restricts the request unless the resource has been modified since the specified date
If-None-Match            Gets the document if the entity tags supplied do not match those of the current document
If-Range                 Allows a conditional request for a range of a document
If-Unmodified-Since      Restricts the request unless the resource has not been modified since the specified dateb
Range                    Requests a specific range of a resource, if the server supports range requestsa See Chapter7 for more on entity tags. The tag is basically an identifier for a version of the resource.b See “Range Requests” in Chapter15 for more on the Range header.
Request security headers
HTTP natively supports a simple challenge/response authentication scheme forrequests. It attempts to make transactions slightly more secure by requiring clients toauthenticate themselves before getting access to certain resources. We discuss thischallenge/response scheme in Chapter 14, along with other security schemes thathave been implemented on top of HTTP. Table 3-16 lists the request security headers.
Table 3-16. Request security headers
Header                   Description
Authorization            Contains the data the client is supplying to the server to authenticate itself
Cookie                   Used by clients to pass a token to the server—not a true security header, but it does have securityimplicationsa
Cookie2                  Used to note the version of cookies a requestor supports; see “Version 1 (RFC 2965) Cookies” in
Chapter11a The Cookie header is not defined in RFC 2616; it is discussed in detail in Chapter 11.
Proxy request headers
As proxies become increasingly common on the Internet, a few headers have beendefined to help them function better. In Chapter 6, we discuss these headers indetail. Table 3-17 lists the proxy request headers.|

Table 3-17. Proxy request headers
Header                              Description
Max-Forwards                        Themaximumnumberoftimesarequestshouldbeforwardedtoanotherproxyorgatewayonitswayto the origin server—used with the TRACE methoda
Proxy-Authorization                 Same as Authorization, but used when authenticating with a proxy
Proxy-Connection                    Same as Connection, but used when establishing connections with a proxya See “Max-Forwards” in Chapter6.
Response Headers
Response messages have their own set of response headers. Response headers pro-vide clients with extra information, such as who is sending the response, the capabil-ities of the responder, or even special instructions regarding the response. Theseheaders help the client deal with the response and make better requests in the future.
Table 3-18 lists the response informational headers.
Table 3-18. Response informational headers
Header                              Description
AgeHow old the response isab
Public                              A list of request methods the server supports for its resources
Retry-After                         A date or time to try back, if a resource is unavailable
Server                              The name and version of the server’s application software
Titlec                              For HTML documents, the title as given by the HTML document source
Warning                             A more detailed warning message than what is in the reason phrasea Implies that the response has traveled through an intermediary, possibly from a proxy cache.b The Public header is defined in RFC 2068 but does not appear in the latest HTTP definition (RFC 2616).c  The Title header is not defined in RFC 2616; see the original HTTP/1.0 draft definition (http://www.w3.org/Protocols/HTTP/HTTP2.html).
Negotiation headers
HTTP/1.1 provides servers and clients with the ability to negotiate for a resource ifmultiple representations are available—for instance, when there are both French and
German translations of an HTML document on a server. Chapter 17 walks throughnegotiation in detail. Here are a few headers servers use to convey information aboutresources that are negotiable. Table 3-19 lists the negotiation headers.
Table 3-19. Negotiation headers
Header                              Description
Accept-Ranges                       The type of ranges that a server will accept for this resource
Vary                                A list of other headers that the server looks at and that may cause the response to vary; i.e., a list ofheaders the server looks at to pick which is the best version of a resource to send the client|

Response security headers
You’ve already seen the request security headers, which are basically the responseside of HTTP’s challenge/response authentication scheme. We talk about security indetail in Chapter 14. For now, here are the basic challenge headers. Table 3-20 liststhe response security headers.
Table 3-20. Response security headers
Header                 Description
Proxy-Authenticate     A list of challenges for the client from the proxy
Set-Cookie             Not a true security header, but it has security implications; used to set a token on the client side thatthe server can use to identify the clienta
Set-Cookie2            Similar to Set-Cookie, RFC 2965 Cookie definition; see “Version 1 (RFC 2965) Cookies” in Chapter 11
WWW-Authenticate       A list of challenges for the client from the servera Set-Cookie and Set-Cookie2 are extension headers that are also covered in Chapter 11.
Entity Headers
There are many headers to describe the payload of HTTP messages. Because bothrequest and response messages can contain entities, these headers can appear ineither type of message.
Entity headers provide a broad range of information about the entity and its content,from information about the type of the object to valid request methods that can bemadeontheresource. In general, entity headers tell the receiver of the message whatit’s dealing with. Table 3-21 lists the entity informational headers.
Table 3-21. Entity informational headers
Header                Description
Allow                 Lists the request methods that can be performed on this entity
Location              Tells the client where the entity really is located; used in directing the receiver to a (possibly new)location (URL) for the resource
Content headers
The content headers provide specific information about the content of the entity,revealing its type, size, and other information useful for processing it. For instance, aweb browser can look at the content type returned and know how to display theobject. Table 3-22 lists the various content headers.
Table 3-22. Content headers
Header                 Description
Content-Basea          The base URL for resolving relative URLs within the body
Content-Encoding       Any encoding that was performed on the body|

Table 3-22. Content headers (continued)
Header                Description
Content-Language      The natural language that is best used to understand the body
Content-Length        The length or size of the body
Content-Location      Where the resource actually is located
Content-MD5           An MD5 checksum of the body
Content-Range         The range of bytes that this entity represents from the entire resource
Content-Type          The type of object that this body isa The Content-Base header is not defined in RFC 2616.
Entity caching headers
The general caching headers provide directives about how or when to cache. Theentity caching headers provide information about the entity being cached—forexample, information needed to validate whether a cached copy of the resource isstill valid and hints about how better to estimate when a cached resource may nolonger be valid.
In Chapter 7, we dive deep into the heart of caching HTTP requests and responses.
We will see these headers again there. Table 3-23 lists the entity caching headers.
Table 3-23. Entity caching headers.
Header                Description
ETag                  The entity tag associated with this entitya
Expires               The date and time at which this entity will no longer be valid and will need to be fetched from theoriginal source
Last-Modified         The last date and time when this entity changeda Entity tags are basically identifiers for a particular version of a resource.
For More Information
For more information, refer to:http://www.w3.org/Protocols/rfc2616/rfc2616.txt
RFC2616,“HypertextTransferProtocol,” by R. Fielding, J. Gettys, J. Mogul, H.
Frystyk, L. Mastinter, P. Leach, and T. Berners-Lee.
HTTP Pocket Reference
Clintin Wong, O’Reilly & Associates, Inc.http://www.w3.org/Protocols/
The W3C architecture page for HTTP.|

CHAPTER 4
Connection Management
The HTTP specifications explain HTTP messages fairly well, but they don’t talkmuch about HTTP connections, the critical plumbing that HTTP messages flowthrough. If you’re a programmer writing HTTP applications, you need to under-stand the ins and outs of HTTP connections and how to use them.
HTTPconnection management has been a bit of a black art, learned as much fromexperimentation and apprenticeship as from published literature. In this chapter,you’ll learn about:• How HTTP uses TCP connections• Delays, bottlenecks and clogs in TCP connections• HTTP optimizations, including parallel, keep-alive, and pipelined connections• Dos and don’ts for managing connections
TCP Connections
Just about all of the world’s HTTP communication is carried over TCP/IP, a popularlayered set of packet-switched network protocols spoken by computers and networkdevices around the globe. A client application can open a TCP/IP connection to aserver application, running just about anywhere in the world. Once the connection isestablished, messages exchanged between the client’s and server’s computers willnever be lost, damaged, or received out of order.*
Say you want the latest power tools price list from Joe’s Hardware store:http://www.joes-hardware.com:80/power-tools.html
WhengiventhisURL,yourbrowserperformsthestepsshowninFigure4-1.InSteps1–3, the IP address and port number of the server are pulled from the URL. A TCP* Though messages won’t be lost or corrupted, communication between client and server can be severed if acomputerornetworkbreaks.Inthiscase,theclientandserverarenotifiedofthecommunicationbreakdown.74connection is made to the web server in Step 4, and a request message is sent acrossthe connection in Step 5. The response is read in Step 6, and the connection is closedin Step 7.http://www.joes-hardware.com:80/power-tools.html(1) The browser extracts the hostname                           www.joes-hardware.com(2) The browser looks up the IP address for this hostname (DNS) 202.43.78.3(3) The browser gets the port number (80)                       80(4) The browser makes a TCP connection to 202.43.78.3 port 80                          80
Internet
Client                  Server(202.43.78.3)(5) The browser sends an HTTP GET request message to the server
Internet
Client                  Server(6) The browser reads the HTTP response message from the server
Internet
Client                  Server(7) The browser closes the connection
Internet
Client                  Server
Figure 4-1. Web browsers talk to web servers over TCP connections
TCP Reliable Data Pipes
HTTP connections really are nothing more than TCP connections, plus a few rulesabout how to use them. TCP connections are the reliable connections of the Inter-net. To send data accurately and quickly, you need to know the basics of TCP.*
TCP gives HTTP a reliable bit pipe. Bytes stuffed in one side of a TCP connectioncome out the other side correctly, and in the right order (see Figure 4-2).* If you are trying to write sophisticated HTTP applications, and especially if you want them to be fast, you’llwant to learn a lot more about the internals and performance of TCP than we discuss in this chapter. Werecommend the “TCP/IP Illustrated” books by W. Richard Stevens (Addison Wesley).|

Internet...TH  lmth.xedni/ TEG
Client                   Server
Figure 4-2. TCP carries HTTP data in order, and without corruption
TCP Streams Are Segmented and Shipped by IP Packets
TCP sends its data in little chunks called IP packets (or IP datagrams). In this way,
HTTPisthetoplayerina“protocolstack”of“HTTPoverTCPoverIP,”asdepictedin Figure 4-3a. A secure variant, HTTPS, inserts a cryptographic encryption layer(called TLS or SSL) between HTTP and TCP (Figure 4-3b).
HTTP                       Application layer
HTTP                       Application layer                      TSL or SSL                    Security layer
TCP                       Transport layer                            TCP                       Transport layer
IP                       Network layer                               IP                       Network layer
Network interfaces                 Data link layer                   Network interfaces                 Data link layer(a) HTTP                           (b) HTTPS
Figure 4-3. HTTP and HTTPS network protocol stacks
When HTTP wants to transmit a message, it streams the contents of the messagedata, in order, through an open TCP connection. TCP takes the stream of data,chops up the data stream into chunks called segments, and transports the segmentsacross the Internet inside envelopes called IP packets (see Figure 4-4). This is all han-dled by the TCP/IP software; the HTTP programmer sees none of it.
Each TCP segment is carried by an IP packet from one IP address to another IPaddress. Each of these IP packets contains:• An IP packet header (usually 20 bytes)• A TCP segment header (usually 20 bytes)• A chunk of TCP data (0 or more bytes)
The IP header contains the source and destination IP addresses, the size, and otherflags. The TCP segment header contains TCP port numbers, TCP control flags, andnumeric values used for data ordering and integrity checking.|

TCP                 TCP                 TCPsegment             segment             segment#1                  #2                  #3
Client                           Server
Version    Hdr length      Type of service           Total datagram length(words)           (TOS)                       (bytes)
Packet ID                      Flags      Fragmentation offset(16-bit number)
Time to live        Upper-level protocol          Header checksum(TTL)
Source IP address
Destination IP addresset
Source port                       Destination port
IP pack
TCP sequence number
Piggybacked acknowledgment
CP segment     Hdr length Reserved     K     RST   FIN           Window size
T               (words)             URGAC PSH   SYNeam                   TCP checksum                        Urgent pointer
CP data str            GET /index.html HTTP/1.1<CR><LF>
T                      Host: www.joes-hardware.chunk of 
C
Figure 4-4. IP packets carry TCP segments, which carry chunks of the TCP data stream
Keeping TCP Connections Straight
Acomputer might have several TCP connections open at any one time. TCP keepsall these connections straight through port numbers.
Port numbers are like employees’ phone extensions. Just as a company’s main phonenumber gets you to the front desk and the extension gets you to the right employee,the IP address gets you to the right computer and the port number gets you to theright application. A TCP connection is distinguished by four values:<source-IP-address, source-port, destination-IP-address, destination-port>
Together, these four values uniquely define a connection. Two different TCP connec-tions are not allowed to have the same values for all four address components (butdifferent connections can have the same values for some of the components).|

In Figure 4-5, there are four connections: A, B, C and D. The relevant informationfor each port is listed in Table 4-1.
Table 4-1. TCP connection values
Connection        Source IP address       Source port       Destination IP address     Destination port
A                 209.1.32.34             2034              204.62.128.58              4133
B                 209.1.32.35             3227              204.62.128.58              4140
C                 209.1.32.35             3105              207.25.71.25               80
D                 209.1.33.89             5100              207.25.71.25               80204.62.128.58                    207.25.71.254133    4140                          80
A             B                   C            D2034               3227       3105                        5100209.1.32.34                    209.1.32.35                    209.1.33.89
Figure 4-5. Four distinct TCP connections
Notethat some of the connections share the same destination port number (C and Dboth have destination port 80). Some of the connections have the same source IPaddress (B and C). Some have the same destination IP address (A and B, and C and
D). But no two different connections share all four identical values.
Programming with TCP Sockets
Operating systems provide different facilities for manipulating their TCP connec-tions. Let’s take a quick look at one TCP programming interface, to make thingsconcrete. Table 4-2shows some of the primary interfaces provided by the sockets
API. This sockets API hides all the details of TCP and IP from the HTTP program-mer. The sockets API was first developed for the Unix operating system, but variantsare now available for almost every operating system and language.
Table 4-2. Common socket interface functions for programming TCP connections
Sockets API call                        Descriptions = socket(<parameters>)                Creates a new, unnamed, unattached socket.bind(s, <local IP:port>)                Assigns a local port number and interface to the socket.|

Table 4-2. Common socket interface functions for programming TCP connections (continued)
Sockets API call                               Descriptionconnect(s, <remote IP:port>)                   Establishes a TCP connection to a local socket and a remote host and port.listen(s,...) Marks a local socket as legal to accept connections.s2 = accept(s)Waits for someone to establish a connection to a local port.n = read(s,buffer,n)                           Tries to read n bytes from the socket into the buffer.n = write(s,buffer,n)                          Tries to write n bytes from the buffer into the socket.close(s)      Completely closes the TCP connection.shutdown(s,<side>)                             Closes just the input or the output of the TCP connection.getsockopt(s, ...)                             Reads the value of an internal socket configuration option.setsockopt(s, ...)                             Changes the value of an internal socket configuration option.
The sockets API lets you create TCP endpoint data structures, connect these end-points to remote server TCP endpoints, and read and write data streams. The TCP
APIhidesall the details of the underlying network protocol handshaking and the seg-mentation and reassembly of the TCP data stream to and from IP packets.
In Figure 4-1, we showed how a web browser could download the power-tools.htmlweb page from Joe’s Hardware store using HTTP. The pseudocode in Figure 4-6sketches how we might use the sockets API to highlight the steps the client andserver could perform to implement this HTTP transaction.
Client     Server(S1) create new socket (socket)(S2) bind socket to port 80 (bind)(S3) permit socket connections (listen)(S4) wait for connection (accept)(C1) get IP address & port(C2) create new socket (socket)(C3) connect to server IP:port (connect)(S5) application notified of connection(C4) connection successful                   (S6) start reading request (read)(C5) send HTTP request (write)(C6) wait for HTTP response (read)(S7) process HTTP request message(C7) process HTTP response                   (S8) send back HTTP response (write)(C8) close connection (close)                (S9) close connection (close)
Figure 4-6. How TCP clients and servers communicate using the TCP sockets interface|

Webegin with the web server waiting for a connection (Figure 4-6, S4). The clientdetermines the IP address and port number from the URL and proceeds to establisha TCPconnection to the server (Figure 4-6, C3). Establishing a connection can take awhile, depending on how far away the server is, the load on the server, and the con-gestion of the Internet.
Once the connection is set up, the client sends the HTTP request (Figure 4-6, C5)and the server reads it (Figure 4-6, S6). Once the server gets the entire request mes-sage, it processes the request, performs the requested action (Figure 4-6, S7), andwrites the data back to the client. The client reads it (Figure 4-6, C6) and processesthe response data (Figure 4-6, C7).
TCP Performance Considerations
Because HTTP is layered directly on TCP, the performance of HTTP transactionsdepends critically on the performance of the underlying TCP plumbing. This sectionhighlights some significant performance considerations of these TCP connections. Byunderstanding some of the basic performance characteristics of TCP, you’ll betterappreciate HTTP’s connection optimization features, and you’ll be able to designand implement higher-performance HTTP applications.
This section requires some understanding of the internal details of the TCP proto-col. If you are not interested in (or are comfortable with) the details of TCP perfor-mance considerations, feel free to skip ahead to “HTTP Connection Handling.”
Because TCP is a complex topic, we can provide only a brief overview of TCP perfor-mance here. Refer to the section “For More Information” at the end of this chapterfor a list of excellent TCP references.
HTTP Transaction Delays
Let’s start our TCP performance tour by reviewing what networking delays occur inthe course of an HTTP request. Figure 4-7 depicts the major connect, transfer, andprocessing delays for an HTTP transaction.
Server
DNS lookup         Connect             Request   Process     Response      Close                Time
Client
Figure 4-7. Timeline of a serial HTTP transaction|

Notice that the transaction processing time can be quite small compared to the timerequired to set up TCP connections and transfer the request and response messages.
Unless the client or server is overloaded or executing complex dynamic resources,most HTTP delays are caused by TCP network delays.
There are several possible causes of delay in an HTTP transaction:1. A client first needs to determine the IP address and port number of the webserver from the URI. If the hostname in the URI was not recently visited, it maytake tens of seconds to convert the hostname from a URI into an IP address*using the DNS resolution infrastructure.2. Next, the client sends a TCP connection request to the server and waits for theserver to send back a connection acceptance reply. Connection setup delayoccurs for every new TCP connection. This usually takes at most a second ortwo, but it can add up quickly when hundreds of HTTP transactions are made.3. Once the connection is established, the client sends the HTTP request over thenewly established TCP pipe. The web server reads the request message from the
TCP connection as the data arrives and processes the request. It takes time forthe request message to travel over the Internet and get processed by the server.4. The web server then writes back the HTTP response, which also takes time.
ThemagnitudeoftheseTCPnetworkdelaysdependsonhardwarespeed,theloadofthe network and server, the size of the request and response messages, and the dis-tance between client and server. The delays also are significantly affected by techni-cal intricacies of the TCP protocol.
Performance Focus Areas
Theremainder of this section outlines some of the most common TCP-related delaysaffecting HTTP programmers, including the causes and performance impacts of:• The TCP connection setup handshake• TCP slow-start congestion control• Nagle’s algorithm for data aggregation• TCP’s delayed acknowledgment algorithm for piggybacked acknowledgments• TIME_WAIT delays and port exhaustion
If you are writing high-performance HTTP software, you should understand each ofthese factors. If you don’t need this level of performance optimization, feel free toskip ahead.* Luckily, most HTTPclients keep a small DNS cache of IP addresses for recently accessed sites. When the IPaddress is already “cached” (recorded) locally, the lookup is instantaneous. Because most web browsing isto a small number of popular sites, hostnames usually are resolved very quickly.|

TCP Connection Handshake Delays
When you set up a new TCP connection, even before you send any data, the TCPsoftware exchanges a series of IP packets to negotiate the terms of the connection(see Figure 4-8). These exchanges can significantly degrade HTTP performance if theconnections are used for small data transfers.(a) SYN              (c) ACK
Server                    GET / HTTP. . .(b)                               (d) HTTP/1.1 304 Not modified
SYN+ACK                          . . .
Connect                Time
Connection handshake delay          Data transfer
Client
Figure 4-8. TCP requires two packet transfers to set up the connection before it can send data
Here are the steps in the TCP connection handshake:1. To request a new TCP connection, the client sends a small TCP packet (usually40–60bytes) to the server. The packet has a special “SYN” flag set, which meansit’s a connection request. This is shown in Figure 4-8a.2. If the server accepts the connection, it computes some connection parametersand sends a TCP packet back to the client, with both the “SYN” and “ACK”flags set, indicating that the connection request is accepted (see Figure 4-8b).3. Finally, the client sends an acknowledgment back to the server, letting it knowthat the connection was established successfully (see Figure 4-8c). Modern TCPstacks let the client send data in this acknowledgment packet.
The HTTPprogrammer never sees these packets—they are managed invisibly by the
TCP/IPsoftware. All the HTTP programmer sees is a delay when creating a new TCPconnection.
The SYN/SYN+ACK handshake (Figure4-8a and b) creates a measurable delaywhen HTTPtransactions do not exchange much data, as is commonly the case. The
TCP connect ACK packet (Figure4-8c) often is large enough to carry the entire*
HTTP request message, and many HTTP server response messages fit into a single
IP packet (e.g., when the response is a small HTML file of a decorative graphic, or a304 Not Modified response to a browser cache request).* IP packets are usually a few hundred bytes for Internet traffic and around 1,500 bytes for local traffic.|

Theendresult is that small HTTP transactions may spend 50% or more of their timedoing TCP setup. Later sections will discuss how HTTP allows reuse of existing con-nections to eliminate the impact of this TCP setup delay.
Delayed Acknowledgments
Because the Internet itself does not guarantee reliable packet delivery (Internet rout-ers are free to destroy packets at will if they are overloaded), TCP implements itsown acknowledgment scheme to guarantee successful data delivery.
Each TCP segment gets a sequence number and a data-integrity checksum. Thereceiver of each segment returns small acknowledgment packets back to the senderwhen segments have been received intact. If a sender does not receive an acknowl-edgment within a specified window of time, the sender concludes the packet wasdestroyed or corrupted and resends the data.
Because acknowledgments are small, TCP allows them to “piggyback” on outgoingdata packets heading in the same direction. By combining returning acknowledg-ments with outgoing data packets, TCP can make more efficient use of the network.
To increase the chances that an acknowledgment will find a data packet headed inthe same direction, many TCP stacks implement a “delayed acknowledgment” algo-rithm. Delayed acknowledgments hold outgoing acknowledgments in a buffer for acertain window of time (usually 100–200 milliseconds), looking for an outgoing datapacket on which to piggyback. If no outgoing data packet arrives in that time, theacknowledgment is sent in its own packet.
Unfortunately, the bimodal request-reply behavior of HTTP reduces the chances thatpiggybacking can occur. There just aren’t many packets heading in the reverse direc-tion when you want them. Frequently, the disabled acknowledgment algorithmsintroduce significant delays. Depending on your operating system, you may be ableto adjust or disable the delayed acknowledgment algorithm.
Before you modify any parameters of your TCP stack, be sure you know what youare doing. Algorithms inside TCP were introduced to protect the Internet frompoorly designed applications. If you modify any TCP configurations, be absolutelysure your application will not create the problems the algorithms were designed toavoid.
TCP Slow Start
The performance of TCP data transfer also depends on the age of the TCP connec-tion. TCP connections “tune” themselves over time, initially limiting the maximumspeed of the connection and increasing the speed over time as data is transmittedsuccessfully. This tuning is called TCP slow start, and it is used to prevent suddenoverloading and congestion of the Internet.|

TCP slow start throttles the number of packets a TCP endpoint can have in flight atany one time. Put simply, each time a packet is received successfully, the sender getspermission to send two more packets. If an HTTP transaction has a large amount ofdata to send, it cannot send all the packets at once. It must send one packet and waitfor an acknowledgment; then it can send two packets, each of which must be acknowl-edged, which allows four packets, etc. This is called “opening the congestion window.”
Because of this congestion-control feature, new connections are slower than “tuned”connections that already have exchanged a modest amount of data. Because tunedconnections are faster, HTTP includes facilities that let you reuse existing connec-tions. We’ll talk about these HTTP “persistent connections” later in this chapter.
Nagle’s Algorithm and TCP_NODELAY
TCPhas a data stream interface that permits applications to stream data of any sizeto the TCP stack—even a single byte at a time! But because each TCP segment car-ries at least 40 bytes of flags and headers, network performance can be degradedseverely if TCP sends large numbers of packets containing small amounts of data.*
Nagle’s algorithm (named for its creator, John Nagle) attempts to bundle up a largeamount of TCP data before sending a packet, aiding network efficiency. The algo-rithm is described in RFC 896, “Congestion Control in IP/TCP Internetworks.”
Nagle’s algorithm discourages the sending of segments that are not full-size (amaximum-size packet is around 1,500 bytes on a LAN, or a few hundred bytesacross the Internet). Nagle’s algorithm lets you send a non-full-size packet only if allother packets have been acknowledged. If other packets are still in flight, the partialdata is buffered. This buffered data is sent only when pending packets are acknowl-edged or when the buffer has accumulated enough data to send a full packet.†
Nagle’s algorithm causes several HTTP performance problems. First, small HTTPmessages may not fill a packet, so they may be delayed waiting for additional datathat will never arrive. Second, Nagle’s algorithm interacts poorly with disabledacknowledgments—Nagle’s algorithm will hold up the sending of data until anacknowledgment arrives, but the acknowledgment itself will be delayed 100–200‡milliseconds by the delayed acknowledgment algorithm.
HTTPapplications often disable Nagle’s algorithm to improve performance, by settingthe TCP_NODELAY parameter on their stacks. If you do this, you must ensure thatyou write large chunks of data to TCP so you don’t create a flurry of small packets.* Sending a storm of single-byte packets is called “sender silly window syndrome.” This is inefficient, anti-social, and can be disruptive to other Internet traffic.†Several variations of this algorithm exist, including timeouts and acknowledgment logic changes, but thebasic algorithm causes buffering of data smaller than a TCP segment.‡These problems can become worse when using pipelined connections (described later in this chapter),because clients may have several messages to send to the same server and do not want delays.|

TIME_WAIT Accumulation and Port Exhaustion
TIME_WAIT port exhaustion is a serious performance problem that affects perfor-mance benchmarking but is relatively uncommon in real deployments. It warrantsspecial attention because most people involved in performance benchmarking even-tually run into this problem and get unexpectedly poor performance.
WhenaTCPendpointclosesaTCPconnection,itmaintainsinmemoryasmallcon-trol block recording the IP addresses and port numbers of the recently closed con-nection. This information is maintained for a short time, typically around twice the*estimated maximum segment lifetime (called “2MSL”; often two minutes ), to makesure a new TCP connection with the same addresses and port numbers is not cre-ated during this time. This prevents any stray duplicate packets from the previousconnection from accidentally being injected into a new connection that has the sameaddresses and port numbers. In practice, this algorithm prevents two connectionswith the exact same IP addresses and port numbers from being created, closed, andrecreated within two minutes.
Today’s higher-speed routers make it extremely unlikely that a duplicate packet willshow up on a server’s doorstep minutes after a connection closes. Some operatingsystems set 2MSL to a smaller value, but be careful about overriding this value. Pack-ets do get duplicated, and TCP data will be corrupted if a duplicate packet from apast connection gets inserted into a new stream with the same connection values.
The 2MSL connection close delay normally is not a problem, but in benchmarkingsituations, it can be. It’s common that only one or a few test load-generation com-puters are connecting to a system under benchmark test, which limits the number ofclient IP addresses that connect to the server. Furthermore, the server typically is lis-tening on HTTP’s default TCP port, 80. These circumstances limit the availablecombinations of connection values, at a time when port numbers are blocked fromreuse by TIME_WAIT.
In a pathological situation with one client and one web server, of the four values thatmake up a TCP connection:<source-IP-address, source-port, destination-IP-address, destination-port>three of them are fixed—only the source port is free to change:<client-IP, source-port, server-IP, 80>
Each time the client connects to the server, it gets a new source port in order to havea unique connection. But because a limited number of source ports are available(say, 60,000) and no connection can be reused for 2MSL seconds (say, 120 sec-onds), this limits the connect rate to 60,000 / 120 = 500 transactions/sec. If you keep* The 2MSL value of two minutes is historical. Long ago, when routers were much slower, it was estimatedthat a duplicate copy of a packet might be able to remain queued in the Internet for up to a minute beforebeing destroyed. Today, the maximum segment lifetime is much smaller.|
making optimizations, and your server doesn’t get faster than about 500 transac-tions/sec, make sure you are not experiencing TIME_WAIT port exhaustion. Youcan fix this problem by using more client load-generator machines or making surethe client and server rotate through several virtual IP addresses to add more connec-tion combinations.
Even if you do not suffer port exhaustion problems, be careful about having largenumbers of open connections or large numbers of control blocks allocated for con-nection in wait states. Some operating systems slow down dramatically when thereare numerous open connections or control blocks.
HTTP Connection Handling
The first two sections of this chapter provided a fire-hose tour of TCP connectionsand their performance implications. If you’d like to learn more about TCP network-ing, check out the resources listed at the end of the chapter.
We’re going to switch gears now and get squarely back to HTTP. The rest of thischapter explains the HTTP technology for manipulating and optimizing connec-tions. We’ll start with the HTTP Connection header, an often misunderstood butimportant part of HTTP connection management. Then we’ll talk about HTTP’sconnection optimization techniques.
The Oft-Misunderstood Connection Header
HTTP allows a chain of HTTP intermediaries between the client and the ultimateorigin server (proxies, caches, etc.). HTTP messages are forwarded hop by hop fromthe client, through intermediary devices, to the origin server (or the reverse).
In some cases, two adjacent HTTP applications may want to apply a set of options totheir shared connection. The HTTP Connection header field has a comma-separatedlist of connection tokens that specify options for the connection that aren’t propa-gated to other connections. For example, a connection that must be closed aftersending the next message can be indicated by Connection: close.
The Connection header sometimes is confusing, because it can carry three differenttypes of tokens:• HTTP header field names, listing headers relevant for only this connection• Arbitrary token values, describing nonstandard options for this connection• The value close, indicating the persistent connection will be closed when done
If a connection token contains the name of an HTTP header field, that header fieldcontains connection-specific information and must not be forwarded. Any headerfields listed in the Connection header must be deleted before the message is for-warded. Placing a hop-by-hop header name in a Connection header is known as|
“protecting the header,” because the Connection header protects against accidentalforwarding of the local header. An example is shown in Figure 4-9.
The Connection header says the Meter header         HTTP/1.1 200 OKshould not be forwarded, the hypothetical           Cache-control: max-age=3600“bill-my-credit-card” option applies, and thepersistent connection will be closed when this      Connection: meter, close, bill-my-credit-cardtransaction is done.                                Meter: max-uses=3, max-refuses=6, dont-report
Proxy
Client                   Server
Figure 4-9. The Connection header allows the sender to specify connection-specific options
When an HTTP application receives a message with a Connection header, thereceiver parses and applies all options requested by the sender. It then deletes the
Connection header and all headers listed in the Connection header before forward-ing the message to the next hop. In addition, there are a few hop-by-hop headers thatmight not be listed as values of a Connection header, but must not be proxied. Theseinclude Proxy-Authenticate, Proxy-Connection, Transfer-Encoding, and Upgrade.
For more about the Connection header, see Appendix C.
Serial Transaction Delays
TCP performance delays can add up if the connections are managed naively. Forexample, suppose you have a web page with three embedded images. Your browserneeds to issue four HTTP transactions to display this page: one for the top-level
HTMLandthree for the embedded images. If each transaction requires a new con-*nection, the connection and slow-start delays can add up (see Figure 4-10).
Transaction 1            Transaction 2            Transaction 3             Transaction 4
Server                           Response- 1               Response- 2              Response- 3              Response- 4
Request- 1                Request- 2               Request- 3               Request- 4
Connect- 1               Connect- 2               Connect- 3               Connect- 4                          Time
Client
Figure 4-10. Four transactions (serial)* For the purpose of this example, assume all objects are roughly the same size and are hosted from the sameserver, and that the DNS entry is cached, eliminating the DNS lookup time.|

In addition to the real delay imposed by serial loading, there is also a psychologicalperception of slowness when a single image is loading and nothing is happening on*the rest of the page. Users prefer multiple images to load at the same time.
Another disadvantage of serial loading is that some browsers are unable to displayanything onscreen until enough objects are loaded, because they don’t know thesizes of the objects until they are loaded, and they may need the size information todecide where to position the objects on the screen. In this situation, the browser maybe making good progress loading objects serially, but the user may be faced with a†blank white screen, unaware that any progress is being made at all.
Several current and emerging techniques are available to improve HTTP connectionperformance. The next several sections discuss four such techniques:
Parallel connections
Concurrent HTTP requests across multiple TCP connections
Persistent connections
Reusing TCP connections to eliminate connect/close delays
Pipelined connections
Concurrent HTTP requests across a shared TCP connection
Multiplexed connections
Interleaving chunks of requests and responses (experimental)
Parallel Connections
As we mentioned previously, a browser could naively process each embedded objectserially by completely requesting the original HTML page, then the first embeddedobject, then the second embedded object, etc. But this is too slow!
HTTP allows clients to open multiple connections and perform multiple HTTPtransactions in parallel, as sketched in Figure 4-11. In this example, four embedded‡images are loaded in parallel, with each transaction getting its own TCP connection.
Parallel Connections May Make Pages Load Faster
Composite pages consisting of embedded objects may load faster if they take advan-tage of the dead time and bandwidth limits of a single connection. The delays can be* This is true even if loading multiple images at the same time is slower than loading images one at a time!
Users often perceive multiple-image loading as faster.†HTMLdesignerscanhelpeliminate this “layout delay” by explicitly adding width and height attributes to
HTMLtagsforembeddedobjectssuchasimages.Explicitlyprovidingthewidthandheightoftheembeddedimage allows the browser to make graphical layout decisions before it receives the objects from the server.‡Theembeddedcomponentsdonotallneedtobehostedonthesamewebserver,sotheparallelconnectionscan be established to multiple servers.|

Internet
Server 1
Server 2
Client
Figure 4-11. Each component of a page involves a separate HTTP transactionoverlapped, and if a single connection does not saturate the client’s Internet band-width, the unused bandwidth can be allocated to loading additional objects.
Figure 4-12shows a timeline for parallel connections, which is significantly fasterthan Figure 4-10. The enclosing HTML page is loaded first, and then the remainingthree transactions are processed concurrently, each with their own connection.*
Because the images are loaded in parallel, the connection delays are overlapped.
Transaction 2, 3,  4
Transaction 1               (parallel connections)
Server            Response- 1             Re                  Response- 3      Response- 4
Request- 3           se- 2
Request- 1              Request- 2                          Request- 4
Connect- 1             Connect- 2                                Time
Client        Connect- 3
Connect- 4(Usually a small software delaybetween each connection)
Figure 4-12. Four transactions (parallel)
Parallel Connections Are Not Always Faster
Even though parallel connections may be faster, however, they are not always faster.
Whentheclient’s network bandwidth is scarce (for example, a browser connected to* There will generally still be a small delay between each connection request due to software overheads, butthe connection requests and transfer times are mostly overlapped.|
the Internet through a 28.8-Kbps modem), most of the time might be spent justtransferring data. In this situation, a single HTTP transaction to a fast server couldeasily consume all of the available modem bandwidth. If multiple objects are loadedin parallel, each object will just compete for this limited bandwidth, so each object*will load proportionally slower, yielding little or no performance advantage.
Also, a large number of open connections can consume a lot of memory and causeperformance problems of their own. Complex web pages may have tens or hundredsof embedded objects. Clients might be able to open hundreds of connections, butfew web servers will want to do that, because they often are processing requests formanyotherusers at the same time. A hundred simultaneous users, each opening 100connections, will put the burden of 10,000 connections on the server. This can causesignificant server slowdown. The same situation is true for high-load proxies.
In practice, browsers do use parallel connections, but they limit the total number ofparallel connections to a small number (often four). Servers are free to close exces-sive connections from a particular client.
Parallel Connections May “Feel” Faster
Okay, so parallel connections don’t always make pages load faster. But even if theydon’t actually speed up the page transfer, as we said earlier, parallel connectionsoften make users feel that the page loads faster, because they can see progress beingmade as multiple component objects appear onscreen in parallel.† Human beingsperceive that web pages load faster if there’s lots of action all over the screen, even ifa stopwatch actually shows the aggregate page download time to be slower!
Persistent Connections
Web clients often open connections to the same site. For example, most of theembedded images in a web page often come from the same web site, and a signifi-cant number of hyperlinks to other objects often point to the same site. Thus, anapplication that initiates an HTTP request to a server likely will make more requeststo that server in the near future (to fetch the inline images, for example). This prop-erty is called site locality.
For this reason, HTTP/1.1 (and enhanced versions of HTTP/1.0) allows HTTPdevices to keep TCP connections open after transactions complete and to reuse thepreexisting connections for future HTTP requests. TCP connections that are kept* In fact, because of the extra overhead from multiple connections, it’s quite possible that parallel connectionscould take longer to load the entire page than serial downloads.†Thiseffect is amplified by the increasing use of progressive images that produce low-resolution approxima-tions of images first and gradually increase the resolution.|
open after transactions complete are called persistent connections. Nonpersistentconnections are closed after each transaction. Persistent connections stay openacross transactions, until either the client or the server decides to close them.
Byreusing an idle, persistent connection that is already open to the target server, youcan avoid the slow connection setup. In addition, the already open connection canavoid the slow-start congestion adaptation phase, allowing faster data transfers.
Persistent Versus Parallel Connections
As we’ve seen, parallel connections can speed up the transfer of composite pages.
But parallel connections have some disadvantages:• Each transaction opens/closes a new connection, costing time and bandwidth.• Each new connection has reduced performance because of TCP slow start.• There is a practical limit on the number of open parallel connections.
Persistent connections offer some advantages over parallel connections. They reducethe delay and overhead of connection establishment, keep the connections in a tunedstate, and reduce the potential number of open connections. However, persistentconnections need to be managed with care, or you may end up accumulating a largenumber of idle connections, consuming local resources and resources on remote cli-ents and servers.
Persistent connections can be most effective when used in conjunction with parallelconnections. Today, many web applications open a small number of parallel connec-tions, each persistent. There are two types of persistent connections: the older
HTTP/1.0+ “keep-alive” connections and the modern HTTP/1.1 “persistent” con-nections. We’ll look at both flavors in the next few sections.
HTTP/1.0+ Keep-Alive Connections
ManyHTTP/1.0browsers and servers were extended (starting around 1996) to sup-port an early, experimental type of persistent connections called keep-alive connec-tions. These early persistent connections suffered from some interoperability designproblems that were rectified in later revisions of HTTP/1.1, but many clients andservers still use these earlier keep-alive connections.
Some of the performance advantages of keep-alive connections are visible in
Figure 4-13, which compares the timeline for four HTTP transactions over serial con-nections against the same transactions over a single persistent connection. The time-*line is compressed because the connect and close overheads are removed.* Additionally, the request and response time might also be reduced because of elimination of the slow-startphase. This performance benefit is not depicted in the figure.|
(a) Serial connections
Transaction 1            Transaction 2            Transaction 3             Transaction 4
Server                           Response- 1               Response- 2              Response- 3              Response- 4
Request- 1                Request- 2               Request- 3               Request- 4
Connect- 1               Connect- 2               Connect- 3               Connect- 4                          Time
Client(b) Persistent connection
Transaction 1   Transaction 2    Transaction 3   Transaction 4
Server                 Response- 1      Response- 2      Response- 3      Response- 4
Request- 1      Request- 2      Request- 3        Request- 4
Time
Client
Figure 4-13. Four transactions (serial versus persistent)
Keep-Alive Operation
Keep-alive is deprecated and no longer documented in the current HTTP/1.1 specifi-cation. However, keep-alive handshaking is still in relatively common use by brows-ers and servers, so HTTP implementors should be prepared to interoperate with it.
We’ll take a quick look at keep-alive operation now. Refer to older versions of the
HTTP/1.1 specification (such as RFC 2068) for a more complete explanation ofkeep-alive handshaking.
Clients implementing HTTP/1.0 keep-alive connections can request that a connec-tion be kept open by including the Connection: Keep-Alive request header.
If the server is willing to keep the connection open for the next request, it willrespond with the same header in the response (see Figure 4-14). If there is no Con-nection: keep-alive header in the response, the client assumes that the server doesnot support keep-alive and that the server will close the connection when theresponse message is sent back.
Keep-Alive Options
Note that the keep-alive headers are just requests to keep the connection alive. Cli-ents and servers do not need to agree to a keep-alive session if it is requested. They|

GET /index.html HTTP/1.0
Host: www.joes-hardware.com
Connection: Keep-Alive
Internet
Client  Server
HTTP/1.0 200 OK
Content-type: text/html
Content-length: 3104
Connection: Keep-Alive...
Figure 4-14. HTTP/1.0 keep-alive transaction header handshakecan close idle keep-alive connections at any time and are free to limit the number oftransactions processed on a keep-alive connection.
The keep-alive behavior can be tuned by comma-separated options specified in the
Keep-Alive general header:• The timeout parameter is sent in a Keep-Alive response header. It estimates howlong the server is likely to keep the connection alive for. This is not a guarantee.• The max parameter is sent in a Keep-Alive response header. It estimates howmany more HTTP transactions the server is likely to keep the connection alivefor. This is not a guarantee.• The Keep-Alive header also supports arbitrary unprocessed attributes, primarilyfor diagnostic and debugging purposes. The syntax is name [= value].
The Keep-Alive header is completely optional but is permitted only when Connec-tion: Keep-Alive also is present. Here’s an example of a Keep-Alive response headerindicating that the server intends to keep the connection open for at most five moretransactions, or until it has sat idle for two minutes:
Connection: Keep-Alive
Keep-Alive: max=5, timeout=120
Keep-Alive Connection Restrictions and Rules
Here are some restrictions and clarifications regarding the use of keep-aliveconnections:• Keep-alive does not happen by default in HTTP/1.0. The client must send a
Connection: Keep-Alive request header to activate keep-alive connections.• The Connection: Keep-Alive header must be sent with all messages that want tocontinue the persistence. If the client does not send a Connection: Keep-Aliveheader, the server will close the connection after that request.|
• Clients can tell if the server will close the connection after the response bydetecting the absence of the Connection: Keep-Alive response header.• The connection can be kept open only if the length of the message’s entity bodycan be determined without sensing a connection close—this means that the entitybody must have a correct Content-Length, have a multipart media type, or beencoded with the chunked transfer encoding. Sending the wrong Content-Lengthback on a keep-alive channel is bad, because the other end of the transaction willnot be able to accurately detect the end of one message and the start of another.• Proxies and gateways must enforce the rules of the Connection header; the proxyor gateway must remove any header fields named in the Connection header, andthe Connection header itself, before forwarding or caching the message.• Formally, keep-alive connections should not be established with a proxy serverthat isn’t guaranteed to support the Connection header, to prevent the problemwith dumb proxies described below. This is not always possible in practice.• Technically, any Connection header fields (including Connection: Keep-Alive)received from an HTTP/1.0 device should be ignored, because they may havebeen forwarded mistakenly by an older proxy server. In practice, some clientsand servers bend this rule, although they run the risk of hanging on older proxies.• Clients must be prepared to retry requests if the connection closes before theyreceive the entire response, unless the request could have side effects if repeated.
Keep-Alive and Dumb Proxies
Let’s take a closer look at the subtle problem with keep-alive and dumb proxies. Aweb client’s Connection: Keep-Alive header is intended to affect just the single TCPlink leaving the client. This is why it is named the “connection” header. If the clientis talking to a web server, the client sends a Connection: Keep-Alive header to tell theserver it wants keep-alive. The server sends a Connection: Keep-Alive header back ifit supports keep-alive and doesn’t send it if it doesn’t.
The Connection header and blind relays
The problem comes with proxies—in particular, proxies that don’t understand the
Connection header and don’t know that they need to remove the header before proxy-ing it down the chain. Many older or simple proxies act as blind relays, tunneling bytesfrom one connection to another, without specially processing the Connection header.
Imagine a web client talking to a web server through a dumb proxy that is acting as ablind relay. This situation is depicted in Figure 4-15.
Here’s what’s going on in this figure:1. In Figure 4-15a, a web client sends a message to the proxy, including the Connec-tion: Keep-Alive header, requesting a keep-alive connection if possible. The clientwaits for a response to learn if its request for a keep-alive channel was granted.|
(b) Server won’t close connectionwhen done because it thinks it has(a) Connection: Keep-Alive                     (b) Connection: Keep-Alive              been asked to speak keep-alive(d) Connection: Keep-Alive Dumb proxy            (c) Connection: Keep-Alive
Client                      Server(c) Proxy waits for connection
Next request                              to close, ignoring any newrequests on the connection(e) Client’s second request onthe keep-alive connection justhangs because the proxy neverprocesses it
Figure 4-15. Keep-alive doesn’t interoperate with proxies that don’t support Connection headers2. The dumb proxy gets the HTTP request, but it doesn’t understand the Connec-tion header (it just treats it as an extension header). The proxy has no idea whatkeep-alive is, so it passes the message verbatim down the chain to the server(Figure 4-15b). But the Connection header is a hop-by-hop header; it applies toonly a single transport link and shouldn’t be passed down the chain. Bad thingsare about to happen.3. In Figure 4-15b, the relayed HTTP request arrives at the web server. When theweb server receives the proxied Connection: Keep-Alive header, it mistakenlyconcludes that the proxy (which looks like any other client to the server) wantsto speak keep-alive! That’s fine with the web server—it agrees to speak keep-alive and sends a Connection: Keep-Alive response header back in Figure 4-15c.
So, at this point, the web server thinks it is speaking keep-alive with the proxyand will adhere to rules of keep-alive. But the proxy doesn’t know the first thingabout keep-alive. Uh-oh.4. In Figure 4-15d, the dumb proxy relays the web server’s response message back tothe client, passing along the Connection: Keep-Alive header from the web server.
The client sees this header and assumes the proxy has agreed to speak keep-alive.
So at this point, both the client and server believe they are speaking keep-alive,but the proxy they are talking to doesn’t know anything about keep-alive.5. Because the proxy doesn’t know anything about keep-alive, it reflects all thedata it receives back to the client and then waits for the origin server to close theconnection. But the origin server will not close the connection, because itbelieves the proxy explicitly asked the server to keep the connection open. Sothe proxy will hang waiting for the connection to close.6. When the client gets the response message back in Figure 4-15d, it moves rightalong to the next request, sending another request to the proxy on the keep-aliveconnection (see Figure 4-15e). Because the proxy never expects another request|
on the same connection, the request is ignored and the browser just spins, mak-ing no progress.7. This miscommunication causes the browser to hang until the client or server*times out the connection and closes it.
Proxies and hop-by-hop headers
To avoid this kind of proxy miscommunication, modern proxies must never proxythe Connection header or any headers whose names appear inside the Connectionvalues. So if a proxy receives a Connection: Keep-Alive header, it shouldn’t proxyeither the Connection header or any headers named Keep-Alive.
In addition, there are a few hop-by-hop headers that might not be listed as values ofa Connection header, but must not be proxied or served as a cache response either.
These include Proxy-Authenticate, Proxy-Connection, Transfer-Encoding, and
Upgrade. For more information, refer back to “The Oft-Misunderstood Connection
Header.”
The Proxy-Connection Hack
Browser and proxy implementors at Netscape proposed a clever workaround to theblind relay problem that didn’t require all web applications to support advanced ver-sions of HTTP. The workaround introduced a new header called Proxy-Connectionand solved the problem of a single blind relay interposed directly after the client—but not all other situations. Proxy-Connection is implemented by modern browserswhen proxies are explicitly configured and is understood by many proxies.
The idea is that dumb proxies get into trouble because they blindly forward hop-by-hop headers such as Connection: Keep-Alive. Hop-by-hop headers are relevant onlyfor that single, particular connection and must not be forwarded. This causes trou-ble when the forwarded headers are misinterpreted by downstream servers asrequests from the proxy itself to control its connection.
In the Netscape workaround, browsers send nonstandard Proxy-Connection exten-sion headers to proxies, instead of officially supported and well-known Connectionheaders. If the proxy is a blind relay, it relays the nonsense Proxy-Connection headerto the web server, which harmlessly ignores the header. But if the proxy is a smartproxy (capable of understanding persistent connection handshaking), it replaces thenonsense Proxy-Connection header with a Connection header, which is then sent tothe server, having the desired effect.
Figure 4-16a–d shows how a blind relay harmlessly forwards Proxy-Connection head-ers to the web server, which ignores the header, causing no keep-alive connection to* There are many similar scenarios where failures occur due to blind relays and forwarded handshaking.|
be established between the client and proxy or the proxy and server. The smart proxyin Figure 4-16e–h understands the Proxy-Connection header as a request to speakkeep-alive, and it sends out its own Connection: Keep-Alive headers to establishkeep-alive connections.
The server does not recognize the Proxy-Connection header, and ignores it.
No keep-alive Connection is established.(a) Proxy-Connection: Keep-Alive                     (b) Proxy-Connection: Keep-Alive(d) No Connection header   Dumb proxy                  (c) No Connection header
Client Server
A dumb proxy forwards the Proxy-Connection header, which the server ignores.
The proxy recognizes the Proxy-Connection header, agrees to talkkeep-alive with the client, and may also (optionally) decide toset up a keep-alive Connection with the server.(e) Proxy-Connection: Keep-Alive                     (f) Connection: Keep-Alive(h) Connection: Keep-Alive Smart proxy               (g) Connection: Keep-Alive
Client Server
A smart proxy understands the Proxy-Connection header and actively sendsa Connection: Keep-Alive header to the server.
Figure 4-16. Proxy-Connection header fixes single blind relay
This scheme works around situations where there is only one proxy between the cli-ent and server. But if there is a smart proxy on either side of the dumb proxy, theproblem will rear its ugly head again, as shown in Figure 4-17.
Furthermore, it is becoming quite common for “invisible” proxies to appear in net-works, either as firewalls, intercepting caches, or reverse proxy server accelerators.
Because these devices are invisible to the browser, the browser will not send them
Proxy-Connection headers. It is critical that transparent web applications implementpersistent connections correctly.
HTTP/1.1 Persistent Connections
HTTP/1.1 phased out support for keep-alive connections, replacing them with animproved design called persistent connections. The goals of persistent connections arethe same as those of keep-alive connections, but the mechanisms behave better.|
(a)                                (b)                                (c)
Proxy-Connection: Keep-Alive       Proxy-Connection: Keep-Alive       Connection: Keep-Alive(f)                     Dumb       (e)                     Smart      (d)
Connection: Keep-Alive  proxy      Connection: Keep-Alive   proxy     Connection: Keep-Alive
Client Server
A dumb proxy unwittingly advertises keep-Alive to browser and smart proxy.(g)                                (h)                                (i)
Proxy-Connection: Keep-Alive       Connection: Keep-Alive             Connection: Keep-Alive(l)                      Smart     (k)                      Dumb      (j)
Connection: Keep-Alive   proxy     Connection: Keep-Alive   proxy     Connection: Keep-Alive
Client Server
A dumb proxy unwittingly advertises keep-Alive to smart proxy and server.
Figure 4-17. Proxy-Connection still fails for deeper hierarchies of proxies
Unlike HTTP/1.0+ keep-alive connections, HTTP/1.1 persistent connections areactive by default. HTTP/1.1 assumes all connections are persistent unless otherwiseindicated. HTTP/1.1 applications have to explicitly add a Connection: close headerto a message to indicate that a connection should close after the transaction is com-plete. This is a significant difference from previous versions of the HTTP protocol,where keep-alive connections were either optional or completely unsupported.
An HTTP/1.1 client assumes an HTTP/1.1 connection will remain open after aresponse, unless the response contains a Connection: close header. However, clientsand servers still can close idle connections at any time. Not sending Connection:close does not mean that the server promises to keep the connection open forever.
Persistent Connection Restrictions and Rules
Here are the restrictions and clarifications regarding the use of persistent connections:• After sending a Connection: close request header, the client can’t send morerequests on that connection.• If a client does not want to send another request on the connection, it shouldsend a Connection: close request header in the final request.• The connection can be kept persistent only if all messages on the connectionhave a correct, self-defined message length—i.e., the entity bodies must havecorrect Content-Lengths or be encoded with the chunked transfer encoding.|
• HTTP/1.1 proxies must manage persistent connections separately with clientsand servers—each persistent connection applies to a single transport hop.• HTTP/1.1 proxy servers should not establish persistent connections with an
HTTP/1.0 client (because of the problems of older proxies forwarding Connec-tion headers) unless they know something about the capabilities of the client.
This is, in practice, difficult, and many vendors bend this rule.• Regardless of the values of Connection headers, HTTP/1.1 devices may close theconnection at any time, though servers should try not to close in the middle oftransmitting a message and should always respond to at least one request beforeclosing.• HTTP/1.1 applications must be able to recover from asynchronous closes. Cli-ents should retry the requests as long as they don’t have side effects that couldaccumulate.• Clients must be prepared to retry requests if the connection closes before theyreceive the entire response, unless the request could have side effects if repeated.• A single user client should maintain at most two persistent connections to anyserver or proxy, to prevent the server from being overloaded. Because proxiesmay need more connections to a server to support concurrent users, a proxyshould maintain at most 2N connections to any server or parent proxy, if thereare N users trying to access the servers.
Pipelined Connections
HTTP/1.1 permits optional request pipelining over persistent connections. This is afurther performance optimization over keep-alive connections. Multiple requests canbe enqueued before the responses arrive. While the first request is streaming acrossthe network to a server on the other side of the globe, the second and third requestscan get underway. This can improve performance in high-latency network condi-tions, by reducing network round trips.
Figure 4-18a-c shows how persistent connections can eliminate TCP connectiondelays and how pipelined requests (Figure 4-18c) can eliminate transfer latencies.
There are several restrictions for pipelining:• HTTP clients should not pipeline until they are sure the connection is persistent.• HTTPresponsesmustbereturnedinthesameorderastherequests.HTTPmes-sages are not tagged with sequence numbers, so there is no way to matchresponses with requests if the responses are received out of order.• HTTP clients must be prepared for the connection to close at any time and beprepared to redo any pipelined requests that did not finish. If the client opens apersistent connection and immediately issues 10 requests, the server is free toclose the connection after processing only, say, 5 requests. The remaining 5|
(a) Serial connections
Transaction 1           Transaction 2          Transaction 3           Transaction 4
Server            Response- 1             Response- 2             Response- 3            Response- 4
Request- 1              Request- 2            Request- 3              Request- 4
Connect- 1             Connect- 2             Connect- 3             Connect- 4                   Time
Client(b) Persistent connection
Transaction 1           Transaction 2            Transaction 3              Transaction 4
Server          Response- 1               Response- 2                Response- 3               Response- 4
Request- 1                Request- 2               Request- 3                  Request- 4
Time
Client(c) Pipelined, persistent connection
Server              Resp                  Re                 Response- 3      Response- 41                 e- 2
Request- 1           Request- 2        Request- 3        Request- 4
Transaction- 1             Time
ClientTransaction- 2
Transaction- 3
Transaction- 4
Figure 4-18. Four transactions (pipelined connections)requests will fail, and the client must be willing to handle these premature closesand reissue the requests.• HTTP clients should not pipeline requests that have side effects (such as
POSTs). In general, on error, pipelining prevents clients from knowing which ofa series of pipelined requests were executed by the server. Because nonidempo-tent requests such as POSTs cannot safely be retried, you run the risk of somemethods never being executed in error conditions.|

The Mysteries of Connection Close
Connection management—particularly knowing when and how to close connec-tions—is one of the practical black arts of HTTP. This issue is more subtle thanmany developers first realize, and little has been written on the subject.“At Will” Disconnection
AnyHTTPclient, server, or proxy can close a TCP transport connection at any time.
The connections normally are closed at the end of a message,* but during error con-ditions, the connection may be closed in the middle of a header line or in otherstrange places.
This situation is common with pipelined persistent connections. HTTP applicationsare free to close persistent connections after any period of time. For example, after apersistent connection has been idle for a while, a server may decide to shut it down.
However, the server can never know for sure that the client on the other end of theline wasn’t about to send data at the same time that the “idle” connection was beingshut down by the server. If this happens, the client sees a connection error in themiddle of writing its request message.
Content-Length and Truncation
EachHTTPresponseshouldhaveanaccurateContent-Lengthheadertodescribethesize of the response body. Some older HTTP servers omit the Content-Length headeror include an erroneous length, depending on a server connection close to signify theactual end of data.
Whenaclient or proxy receives an HTTP response terminating in connection close,and the actual transferred entity length doesn’t match the Content-Length (or thereis no Content-Length), the receiver should question the correctness of the length.
If the receiver is a caching proxy, the receiver should not cache the response (to mini-mize future compounding of a potential error). The proxy should forward the ques-tionable message intact, without attempting to “correct” the Content-Length, tomaintain semantic transparency.
Connection Close Tolerance, Retries, and Idempotency
Connections can close at any time, even in non-error conditions. HTTP applica-tions have to be ready to properly handle unexpected closes. If a transport connec-tion closes while the client is performing a transaction, the client should reopen the* Serversshouldn’tcloseaconnectioninthemiddleofaresponseunlessclientornetworkfailureissuspected.|
connection and retry one time, unless the transaction has side effects. The situationis worse for pipelined connections. The client can enqueue a large number ofrequests, but the origin server can close the connection, leaving numerous requestsunprocessed and in need of rescheduling.
Side effects are important. When a connection closes after some request data wassent but before the response is returned, the client cannot be 100% sure how muchof the transaction actually was invoked by the server. Some transactions, such as
GETting a static HTML page, can be repeated again and again without changinganything. Other transactions, such as POSTing an order to an online book store,shouldn’t be repeated, or you may risk multiple orders.
Atransaction is idempotent if it yields the same result regardless of whether it is exe-cuted once or many times. Implementors can assume the GET, HEAD, PUT,
DELETE, TRACE, and OPTIONS methods share this property.* Clients shouldn’tpipeline nonidempotent requests (such as POSTs). Otherwise, a premature termina-tion of the transport connection could lead to indeterminate results. If you want tosend a nonidempotent request, you should wait for the response status for the previ-ous request.
Nonidempotent methods or sequences must not be retried automatically, althoughuser agents may offer a human operator the choice of retrying the request. For exam-ple, most browsers will offer a dialog box when reloading a cached POST response,asking if you want to post the transaction again.
Graceful Connection Close
TCPconnections are bidirectional, as shown in Figure 4-19. Each side of a TCP con-nection has an input queue and an output queue, for data being read or written.
Data placed in the output of one side will eventually show up on the input of theother side.in                      outout                      in
Client                                Server
Figure 4-19. TCP connections are bidirectional
Full and half closes
An application can close either or both of the TCP input and output channels. Aclose() sockets call closes both the input and output channels of a TCP connection.*Administrators who use GET-based dynamic forms should make sure the forms are idempotent.|

This is called a “full close” and is depicted in Figure 4-20a. You can use theshutdown() sockets call to close either the input or output channel individually. Thisis called a “half close” and is depicted in Figure 4-20b.(a) Server full closein                          outout                           in
Client      Server(b) Server output half close (graceful close)in                          outout                           in
Client      Server(c) Server input half closein                          outout                           in
Client      Server
Figure 4-20. Full and half close
TCP close and reset errors
Simple HTTP applications can use only full closes. But when applications start talk-ing to many other types of HTTP clients, servers, and proxies, and when they startusing pipelined persistent connections, it becomes important for them to use halfcloses to prevent peers from getting unexpected write errors.
In general, closing the output channel of your connection is always safe. The peer onthe other side of the connection will be notified that you closed the connection bygetting an end-of-stream notification once all the data has been read from its buffer.
Closing the input channel of your connection is riskier, unless you know the otherside doesn’t plan to send any more data. If the other side sends data to your closedinput channel, the operating system will issue a TCP “connection reset by peer” mes-sage back to the other side’s machine, as shown in Figure 4-21. Most operating sys-tems treat this as a serious error and erase any buffered data the other side has notread yet. This is very bad for pipelined connections.
Say you have sent 10 pipelined requests on a persistent connection, and theresponses already have arrived and are sitting in your operating system’s buffer (butthe application hasn’t read them yet). Now say you send request #11, but the serverdecides you’ve used this connection long enough, and closes it. Your request #11will arrive at a closed connection and will reflect a reset back to you. This reset willerase your input buffers.|

RESETin                     outout                     in
Client Server
Figure 4-21. Data arriving at closed connection generates “connection reset by peer” error
When you finally get to reading data, you will get a connection reset by peer error,and the buffered, unread response data will be lost, even though much of it success-fully arrived at your machine.
Graceful close
TheHTTPspecification counsels that when clients or servers want to close a connec-tion unexpectedly, they should “issue a graceful close on the transport connection,”but it doesn’t describe how to do that.
In general, applications implementing graceful closes will first close their outputchannels and then wait for the peer on the other side of the connection to close itsoutput channels. When both sides are done telling each other they won’t be sendingany more data (i.e., closing output channels), the connection can be closed fully,with no risk of reset.
Unfortunately, there is no guarantee that the peer implements or checks for halfcloses. For this reason, applications wanting to close gracefully should half closetheir output channels and periodically check the status of their input channels (look-ing for data or for the end of the stream). If the input channel isn’t closed by the peerwithin some timeout period, the application may force connection close to saveresources.
For More Information
This completes our overview of the HTTP plumbing trade. Please refer to the fol-lowing reference sources for more information about TCP performance and HTTPconnection-management facilities.
HTTP Connectionshttp://www.ietf.org/rfc/rfc2616.txt
RFC2616,“Hypertext Transfer Protocol—HTTP/1.1,” is the official specificationfor HTTP/1.1; it explains the usage of and HTTP header fields for implementing|
parallel, persistent, and pipelined HTTP connections. This document does notcover the proper use of the underlying TCP connections.http://www.ietf.org/rfc/rfc2068.txt
RFC2068isthe1997version of the HTTP/1.1 protocol. It contains explanationof the HTTP/1.0+ Keep-Alive connections that is missing from RFC 2616.http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-connection-00.txt
This expired Internet draft, “HTTP Connection Management,” has some gooddiscussion of issues facing HTTP connection management.
HTTP Performance Issueshttp://www.w3.org/Protocols/HTTP/Performance/
This W3C web page, entitled “HTTP Performance Overview,” contains a fewpapers and tools related to HTTP performance and connection management.http://www.w3.org/Protocols/HTTP/1.0/HTTPPerformance.html
This short memo by Simon Spero, “Analysis of HTTP Performance Problems,” isone of the earliest (1994) assessments of HTTP connection performance. Thememo gives some early performance measurements of the effect of connectionsetup, slow start, and lack of connection sharing.ftp://gatekeeper.dec.com/pub/DEC/WRL/research-reports/WRL-TR-95.4.pdf“The Case for Persistent-Connection HTTP.”http://www.isi.edu/lsam/publications/phttp_tcp_interactions/paper.html“Performance Interactions Between P-HTTP and TCP Implementations.”http://www.sun.com/sun-on-net/performance/tcp.slowstart.html“TCP Slow Start Tuning for Solaris” is a web page from Sun Microsystems thattalks about some of the practical implications of TCP slow start. It’s a usefulread, even if you are working with different operating systems.
TCP/IP
The following three books by W. Richard Stevens are excellent, detailed engineeringtexts on TCP/IP. These are extremely useful for anyone using TCP:
TCP Illustrated, Volume I: The Protocols
W. Richard Stevens, Addison Wesley
UNIX Network Programming, Volume 1: Networking APIs
W. Richard Stevens, Prentice-Hall
UNIX Network Programming, Volume 2: The Implementation
W. Richard Stevens, Prentice-Hall|

The following papers and specifications describe TCP/IP and features that affect itsperformance. Some of these specifications are over 20 years old and, given the world-wide success of TCP/IP, probably can be classified as historical treasures:http://www.acm.org/sigcomm/ccr/archive/2001/jan01/ccr-200101-mogul.pdf
In “Rethinking the TCP Nagle Algorithm,” Jeff Mogul and Greg Minshallpresent a modern perspective on Nagle’s algorithm, outline what applicationsshould and should not use the algorithm, and propose several modifications.http://www.ietf.org/rfc/rfc2001.txt
RFC 2001, “TCP Slow Start, Congestion Avoidance, Fast Retransmit, and Fast
Recovery Algorithms,” defines the TCP slow-start algorithm.http://www.ietf.org/rfc/rfc1122.txt
RFC 1122, “Requirements for Internet Hosts—Communication Layers,” dis-cusses TCP acknowledgment and delayed acknowledgments.http://www.ietf.org/rfc/rfc896.txt
RFC896, “Congestion Control in IP/TCP Internetworks,” was released by John
Nagle in 1984. It describes the need for TCP congestion control and introduceswhat is now called “Nagle’s algorithm.”http://www.ietf.org/rfc/rfc0813.txt
RFC 813, “Window and Acknowledgement Strategy in TCP,” is a historical(1982) specification that describes TCP window and acknowledgment imple-mentation strategies and provides an early description of the delayed acknowl-edgment technique.http://www.ietf.org/rfc/rfc0793.txt
RFC 793, “Transmission Control Protocol,” is Jon Postel’s classic 1981 defini-tion of the TCP protocol.|

PART II
HTTP Architecture
The six chapters of Part II highlight the HTTP server, proxy, cache, gateway, androbot applications, which are the building blocks of web systems architecture:• Chapter5,Web Servers, gives an overview of web server architectures.• Chapter6, Proxies, describes HTTP proxy servers, which are intermediary serversthat connect HTTP clients and act as platforms for HTTP services and controls.• Chapter7, Caching, delves into the science of web caches—devices that improveperformance and reduce traffic by making local copies of popular documents.• Chapter8, Integration Points:Gateways, Tunnels, and Relays, explains applica-tions that allow HTTP to interoperate with software that speaks different proto-cols, including SSL encrypted protocols.• Chapter9,Web Robots, wraps up our tour of HTTP architecture with web clients.• Chapter10,HTTP-NG, covers future topics for HTTP—in particular, HTTP-NG.
CHAPTER 5
Web Servers
Webservers dish out billions of web pages a day. They tell you the weather, load upyour online shopping carts, and let you find long-lost high-school buddies. Webservers are the workhorses of the World Wide Web. In this chapter, we:• Survey the many different types of software and hardware web servers.• Describe how to write a simple diagnostic web server in Perl.• Explain how web servers process HTTP transactions, step by step.
Whereithelpstomakethingsconcrete,ourexamplesusetheApachewebserverandits configuration options.
Web Servers Come in All Shapes and Sizes
Awebserver processes HTTP requests and serves responses. The term “web server”can refer either to web server software or to the particular device or computer dedi-cated to serving the web pages.
Web servers comes in all flavors, shapes, and sizes. There are trivial 10-line Perlscript web servers, 50-MB secure commerce engines, and tiny servers-on-a-card. Butwhatever the functional differences, all web servers receive HTTP requests forresources and serve content back to the clients (look back to Figure 1-5).
Web Server Implementations
Webservers implement HTTP and the related TCP connection handling. They alsomanagetheresources served by the web server and provide administrative features toconfigure, control, and enhance the web server.
The web server logic implements the HTTP protocol, manages web resources, andprovides web server administrative capabilities. The web server logic shares responsi-bilities for managing TCP connections with the operating system. The underlying109operating system manages the hardware details of the underlying computer systemand provides TCP/IP network support, filesystems to hold web resources, and pro-cess management to control current computing activities.
Web servers are available in many forms:• You can install and run general-purpose software web servers on standard com-puter systems.• If you don’t want the hassle of installing software, you can purchase a web serverappliance, in which the software comes preinstalled and preconfigured on acomputer, often in a snazzy-looking chassis.• Given the miracles of microprocessors, some companies even offer embeddedweb servers implemented in a small number of computer chips, making themperfect administration consoles for consumer devices.
Let’s look at each of those types of implementations.
General-Purpose Software Web Servers
General-purpose software web servers run on standard, network-enabled computersystems. You can choose open source software (such as Apache or W3C’s Jigsaw) orcommercial software (such as Microsoft’s and iPlanet’s web servers). Web serversoftware is available for just about every computer and operating system.
While there are tens of thousands of different kinds of web server programs (includ-ing custom-crafted, special-purpose web servers), most web server software comesfrom a small number of organizations.
In February 2002, the Netcraft survey (http://www.netcraft.com/survey/) showed threevendors dominating the public Internet web server market (see Figure 5-1):• The free Apache software powers nearly 60% of all Internet web servers.• Microsoft web server makes up another 30%.• Sun iPlanet servers comprise another 3%.
Figure 5-1. Web server market share as estimated by Netcraft’s automated survey|

Takethese numbers with a few grains of salt, however, as the Netcraft survey is com-monly believed to exaggerate the dominance of Apache software. First, the surveycounts servers independent of server popularity. Proxy server access studies fromlarge ISPs suggest that the amount of pages served from Apache servers is much lessthan 60% but still exceeds Microsoft and Sun iPlanet. Additionally, it is anecdotallybelieved that Microsoft and iPlanet servers are more popular than Apache inside cor-porate enterprises.
Web Server Appliances
Webserverappliances are prepackaged software/hardware solutions. The vendor pre-installs a software server onto a vendor-chosen computer platform and preconfig-ures the software. Some examples of web server appliances include:• Sun/Cobalt RaQ web appliances (http://www.cobalt.com)• Toshiba Magnia SG10 (http://www.toshiba.com)• IBM Whistle web server appliance (http://www.whistle.com)
Appliance solutions remove the need to install and configure software and oftengreatly simplify administration. However, the web server often is less flexible andfeature-rich, and the server hardware is not easily repurposeable or upgradable.
Embedded Web Servers
Embeddedservers are tiny web servers intended to be embedded into consumer prod-ucts (e.g., printers or home appliances). Embedded web servers allow users toadminister their consumer devices using a convenient web browser interface.
Some embedded web servers can even be implemented in less than one square inch,but they usually offer a minimal feature set. Two examples of very small embeddedweb servers are:• IPic match-head sized web server (http://www-ccs.cs.umass.edu/~shri/iPic.html)• NetMedia SitePlayer SP1 Ethernet Web Server (http://www.siteplayer.com)
A Minimal Perl Web Server
If you want to build a full-featured HTTP server, you have some work to do. Thecore of the Apache web server has over 50,000 lines of code, and optional processingmodules make that number much bigger.
All this software is needed to support HTTP/1.1 features: rich resource support, vir-tual hosting, access control, logging, configuration, monitoring, and performancefeatures. That said, you can create a minimally functional HTTP server in under 30lines of Perl. Let’s take a look.|

Example5-1 shows a tiny Perl program called type-o-serve. This program is a usefuldiagnostic tool for testing interactions with clients and proxies. Like any web server,type-o-serve waits for an HTTP connection. As soon as type-o-serve gets the requestmessage, it prints the message on the screen; then it waits for you to type (or paste)in a response message, which is sent back to the client. This way, type-o-serve pre-tends to be a web server, records the exact HTTP request messages, and allows youto send back any HTTP response message.
This simple type-o-serve utility doesn’t implement most HTTP functionality, but it isa useful tool to generate server response messages the same way you can use Telnetto generate client request messages (refer back to Example 5-1). You can downloadthe type-o-serve program from http://www.http-guide.com/tools/type-o-serve.pl.
Example5-1.type-o-serve—a minimal Perl web server used for HTTP debugging#!/usr/bin/perluse Socket;use Carp;use FileHandle;# (1) use port 8080 by default, unless overridden on command line$port = (@ARGV ? $ARGV[0] : 8080);# (2) create local TCP socket and set it to listen for connections$proto = getprotobyname('tcp');socket(S, PF_INET, SOCK_STREAM, $proto) || die;setsockopt(S, SOL_SOCKET, SO_REUSEADDR, pack("l", 1)) || die;bind(S, sockaddr_in($port, INADDR_ANY)) || die;listen(S, SOMAXCONN) || die;# (3) print a startup messageprintf("    <<<Type-O-Serve Accepting on Port %d>>>\n\n",$port);while (1){# (4) wait for a connection C$cport_caddr = accept(C, S);($cport,$caddr) = sockaddr_in($cport_caddr);
C->autoflush(1);# (5) print who the connection is from$cname = gethostbyaddr($caddr,AF_INET);printf("    <<<Request From '%s'>>>\n",$cname);# (6) read request msg until blank line, and print on screenwhile ($line = <C>){print $line;if ($line =~ /^\r/) { last; }}|

Example5-1.type-o-serve—a minimal Perl web server used for HTTP debugging (continued)# (7) prompt for response message, and input response lines,#     sending response lines to client, until solitary "."printf("    <<<Type Response Followed by '.'>>>\n");while ($line = <STDIN>){$line =~ s/\r//;$line =~ s/\n//;if ($line =~ /^\./) { last; }print C $line . "\r\n";}close(C);}
Figure 5-2shows how the administrator of Joe’s Hardware store might use type-o-serve to test HTTP communication:• First, the administrator starts the type-o-serve diagnostic server, listening on aparticular port. Because Joe’s Hardware store already has a production webserver listing on port 80, the administrator starts the type-o-serve server on port8080 (you can pick any unused port) with this command line:% type-o-serve.pl 8080• Once type-o-serve is running, you can point a browser to this web server. In
Figure 5-2, we browse to http://www.joes-hardware.com:8080/foo/bar/blah.txt.• The type-o-serve program receives the HTTP request message from the browserandprints the contents of the HTTP request message on screen. The type-o-servediagnostic tool then waits for the user to type in a simple response message, fol-lowed by a period on a blank line.• type-o-serve sends the HTTP response message back to the browser, and thebrowser displays the body of the response message.
What Real Web Servers Do
The Perl server we showed in Example 5-1 is a trivial example web server. State-of-the-art commercial web servers are much more complicated, but they do performseveral common tasks, as shown in Figure 5-3:1. Set up connection—accept a client connection, or close if the client is unwanted.2. Receive request—read an HTTP request message from the network.3. Process request—interpret the request message and take action.4. Access resource—access the resource specified in the message.5. Construct response—create the HTTP response message with the right headers.6. Send response—send the response back to the client.7. Log transaction—place notes about the completed transaction in a log file.|

HTTP request message
GET /foo/bar/blah.txt HTTP/1.1
Accept: */*
Accept-language: en-us
Accept-encoding: gzip, deflate
User-agent: Mozilla/4.0
Host: www.joes.hardware.com:8080
Connection: Keep-alive                type-o-serve dialog% ./type-o-serve.pl 8080<<<Type-O-Serve Accepting on Port 8080>>><<<Request From 'home-44-027.extranet.inktomi.com'>>>
GET /foo/bar/blah.txt HTTP/1.1
Accept: */*
Accept-language: en-us
Accept-encoding: gzip, deflate
User-agent: Mozilla/4.0
Host: www.joes-hardware.com:8080
Connection: Keep-alive<<<Type response followed by '.'>>>
HTTP/1.0 200 OK
Connection: close
HTTP response message        Content-type: text-plain
HTTP/1.0 200 OK            Hi there!
Connection: close
Content-type: text/plain
Hi there!
Figure 5-2. The type-o-serve utility lets you type in server responses to send back to clients
User space
HTTP server software process(3) Process request(5) Create response(2) Receive request                          (4) Access resource(7) Log transaction
TCP/IPnetworkstack(1) Set up connection(6) Send response   Network interface               Object storage
Client        Operating system
Figure 5-3. Steps of a basic web server request
The next seven sections highlight how web servers perform these basic tasks.|

Step 1: Accepting Client Connections
If a client already has a persistent connection open to the server, it can use that connec-tion to send its request. Otherwise, the client needs to open a new connection to theserver (refer back to Chapter 4 to review HTTP connection-management technology).
Handling New Connections
When a client requests a TCP connection to the web server, the web server estab-lishes the connection and determines which client is on the other side of the connec-tion, extracting the IP address from the TCP connection.* Once a new connection isestablished and accepted, the server adds the new connection to its list of existingweb server connections and prepares to watch for data on the connection.
The web server is free to reject and immediately close any connection. Some webservers close connections because the client IP address or hostname is unauthorizedor is a known malicious client. Other identification techniques can also be used.
Client Hostname Identiﬁcation
Most web servers can be configured to convert client IP addresses into client host-names, using “reverse DNS.” Web servers can use the client hostname for detailedaccess control and logging. Be warned that hostname lookups can take a very longtime, slowing down web transactions. Many high-capacity web servers either disablehostname resolution or enable it only for particular content.
You can enable hostname lookups in Apache with the HostnameLookups configura-tion directive. For example, the Apache configuration directives in Example 5-2turnon hostname resolution for only HTML and CGI resources.
Example5-2.Configuring Apache to look up hostnames for HTML and CGI resources
HostnameLookups off<Files ~ "\.(html|htm|cgi)$">
HostnameLookups on</Files>
Determining the Client User Through ident
Some web servers also support the IETF ident protocol. The ident protocol letsservers find out what username initiated an HTTP connection. This information is* Different operating systems have different interfaces and data structures for manipulating TCP connections.
InUnixenvironments,theTCPconnectionisrepresentedbyasocket,andtheIPaddressoftheclientcanbefound from the socket using the getpeername call.|
particularly useful for web server logging—the second field of the popular Com-*mon Log Format contains the ident username of each HTTP request.
If a client supports the ident protocol, the client listens on TCP port 113 for identrequests. Figure 5-4 shows how the ident protocol works. In Figure 5-4a, the clientopens an HTTP connection. The server then opens its own connection back to theclient’s identd server port (113), sends a simple request asking for the username cor-responding to the new connection (specified by client and server port numbers), andretrieves from the client the response containing the username.(a) Mary establishes new HTTP connection
Port 4236               HTTP connection                     Port 804236,80 (c) Server sends request(b) Server establishes ident connection
Mary                              Port 80 Web server
Port 113               ident connection4236,80: USERID: UNIX: mary(d) Client returns ident response
Figure 5-4. Using the ident protocol to determine HTTP client usernameident can work inside organizations, but it does not work well across the public Inter-net for many reasons, including:• Many client PCs don’t run the identd Identification Protocol daemon software.• Theident protocol significantly delays HTTP transactions.• Many firewalls won’t permit incoming ident traffic.• Theident protocol is insecure and easy to fabricate.• Theident protocol doesn’t support virtual IP addresses well.• There are privacy concerns about exposing client usernames.
Youcantell Apache web servers to use ident lookups with Apache’s IdentityCheck ondirective. If no ident information is available, Apache will fill ident log fields withhyphens (-). Common Log Format log files typically contain hyphens in the secondfield because no ident information is available.
Step 2: Receiving Request Messages
As the data arrives on connections, the web server reads out the data from the net-work connection and parses out the pieces of the request message (Figure 5-5).* This Common Log Format ident field is called “rfc931,” after an outdated version of the RFC defining theident protocol (the updated ident specification is documented by RFC 1413).|

Request message being read from network
GET /specials/saw-blade.gif HTTP/1.0CRLF
Accept: image/gifCRLF
Host: www.j
Internet
LF CR LF CR moc.erawdrah-seo
Client                              Server
Figure 5-5. Reading a request message from a connection
When parsing the request message, the web server:• Parses the request line looking for the request method, the specified resource*identifier (URI), and the version number, each separated by a single space, andending with a carriage-return line-feed (CRLF) sequence†• Reads the message headers, each ending in CRLF• Detects the end-of-headers blank line, ending in CRLF (if present)• Reads the request body, if any (length specified by the Content-Length header)
When parsing request messages, web servers receive input data erratically from thenetwork. The network connection can stall at any point. The web server needs toread data from the network and temporarily store the partial message data in mem-ory until it receives enough data to parse it and make sense of it.
Internal Representations of Messages
Some web servers also store the request messages in internal data structures thatmake the message easy to manipulate. For example, the data structure might con-tain pointers and lengths of each piece of the request message, and the headers mightbe stored in a fast lookup table so the specific values of particular headers can beaccessed quickly (Figure 5-6).
Connection Input/Output Processing Architectures
High-performance web servers support thousands of simultaneous connections.
These connections let the web server communicate with clients around the world,each with one or more connections open to the server. Some of these connectionsmay be sending requests rapidly to the web server, while other connections trickle* TheinitialversionofHTTP,calledHTTP/0.9,doesnotsupportversionnumbers.Somewebserverssupportmissing version numbers, interpreting the message as an HTTP/0.9 request.†Manywebserverssupport LF or CRLF as end-of-line sequences, because some clients mistakenly send LFas the end-of-line terminator.|

Request message
GET /specials/saw-blade.gif HTTP/1.0CRLF
Accept: image/gifCRLF
Host: www.joes-hardware.comCRLF
CRLF
Parse
Parsed encoding of request messagemethod:              1                         specials/saw-blade.gifversion:             1.0uri:          www.joes-hardware.comheader count: 2headers:      image/gifbody:                -                     name: Host        value:name: Accept      value:
Figure 5-6. Parsing a request message into a convenient internal representationrequests slowly or infrequently, and still others are idle, waiting quietly for somefuture activity.
Web servers constantly watch for new web requests, because requests can arrive atany time. Different web server architectures service requests in different ways, as
Figure 5-7 illustrates:
Single-threaded web servers (Figure 5-7a)
Single-threaded web servers process one request at a time until completion.
Whenthe transaction is complete, the next connection is processed. This archi-tecture is simple to implement, but during processing, all the other connectionsare ignored. This creates serious performance problems and is appropriate onlyfor low-load servers and diagnostic tools like type-o-serve.
Multiprocess and multithreaded web servers (Figure 5-7b)
Multiprocess and multithreaded web servers dedicate multiple processes or*higher-efficiency threads to process requests simultaneously. The threads/†processes may be created on demand or in advance. Some servers dedicate athread/process for every connection, but when a server processes hundreds,thousands, or even tens of thousands of simultaneous connections, the resultingnumber of processes or threads may consume too much memory or system* A process is an individual program flow of control, with its own set of variables. A thread is a faster, moreefficient version of a process. Both threads and processes let a single program do multiple things at the sametime. For simplicity of explanation, we treat processes and threads interchangeably. But, because of the per-formance differences, many high-performance servers are both multiprocess and multithreaded.†Systems where threads are created in advance are called “worker pool” systems, because a set of threadswaits in a pool for work to do.|
resources. Thus, many multithreaded web servers put a limit on the maximumnumber of threads/processes.
Multiplexed I/O servers (Figure 5-7c)
To support large numbers of connections, many web servers adopt multiplexedarchitectures. In a multiplexed architecture, all the connections are simulta-neously watched for activity. When a connection changes state (e.g., when databecomes available or an error condition occurs), a small amount of processing isperformed on the connection; when that processing is complete, the connectionis returned to the open connection list for the next change in state. Work is doneonaconnection only when there is something to be done; threads and processesare not tied up waiting on idle connections.
Multiplexed multithreaded web servers (Figure 5-7d)
Some systems combine multithreading and multiplexing to take advantage ofmultiple CPUs in the computer platform. Multiple threads (often one per physi-cal processor) each watch the open connections (or a subset of the open connec-tions) and perform a small amount of work on each connection.
Connection list
Connection
Thread/process(a) Single-threaded I/O architecture   (b) Multithreaded I/O architecture
Connectionmultiplexer(c) Multiplexed I/O architecture                               (d) Multiplexed, multithreaded I/O architecture
Figure 5-7. Web server input/output architectures|

Step 3: Processing Requests
Once the web server has received a request, it can process the request using themethod, resource, headers, and optional body.
Some methods (e.g., POST) require entity body data in the request message. Othermethods (e.g., OPTIONS) allow a request body but don’t require one. A few meth-ods (e.g., GET) forbid entity body data in request messages.
Wewon’ttalk about request processing here, because it’s the subject of most of thechapters in the rest of this book!
Step 4: Mapping and Accessing Resources
Web servers are resource servers. They deliver precreated content, such as HTMLpages or JPEG images, as well as dynamic content from resource-generating applica-tions running on the servers.
Before the web server can deliver content to the client, it needs to identify the sourceof the content, by mapping the URI from the request message to the proper contentor content generator on the web server.
Docroots
Web servers support different kinds of resource mapping, but the simplest form ofresource mapping uses the request URI to name a file in the web server’s filesystem.
Typically, a special folder in the web server filesystem is reserved for web content.
This folder is called the document root,ordocroot. The web server takes the URIfrom the request message and appends it to the document root.
In Figure 5-8, a request arrives for /specials/saw-blade.gif. The web server in thisexample has document root /usr/local/httpd/files. The web server returns the file /usr/local/httpd/files/specials/saw-blade.gif./usr/local/httpd/files
Request message         Internet
GET /specials/saw-blade.gif HTTP/1.0
Host: www.joes-hardware.comobject storage
Client                          Web server
Request URI:  /specials/saw-blade.gif                         Server resource:  /usr/local/httpd/files/specials/saw-blade.gif
Figure 5-8. Mapping request URI to local web server resource|

Toset the document root for an Apache web server, add a DocumentRoot line to thehttpd.conf configuration file:
DocumentRoot /usr/local/httpd/files
Servers are careful not to let relative URLs back up out of a docroot and expose otherparts of the filesystem. For example, most mature web servers will not permit this
URI to see files above the Joe’s Hardware document root:http://www.joes-hardware.com/../
Virtually hosted docroots
Virtually hosted web servers host multiple web sites on the same web server, givingeach site its own distinct document root on the server. A virtually hosted web serveridentifies the correct document root to use from the IP address or hostname in the
URIorthe Host header. This way, two web sites hosted on the same web server canhave completely distinct content, even if the request URIs are identical.
In Figure 5-9, the server hosts two sites: www.joes-hardware.com and www.marys-antiques.com. The server can distinguish the web sites using the HTTP Host header,or from distinct IP addresses.• When request A arrives, the server fetches the file for /docs/joe/index.html.• When request B arrives, the server fetches the file for /docs/mary/index.html.
Request message A
GET /index.html HTTP/1.0
Host: www.joes-hardware.com
Internet                               /docs/joe /docs/mary
Client                  GET /index.html HTTP/1.0 www.joes-hardware.com
Host: www.marys-antiques.com                              www.marys-antiques.com
Request message B
Figure 5-9. Different docroots for virtually hosted requests
Configuring virtually hosted docroots is simple for most web servers. For the popu-lar Apache web server, you need to configure a VirtualHost block for each virtualweb site, and include the DocumentRoot for each virtual server (Example 5-3).
Example5-3.Apache web server virtual host docroot configuration<VirtualHost www.joes-hardware.com>
ServerName www.joes-hardware.com
DocumentRoot /docs/joe|

Example5-3.Apache web server virtual host docroot configuration (continued)
TransferLog /logs/joe.access_log
ErrorLog /logs/joe.error_log</VirtualHost><VirtualHost www.marys-antiques.com>
ServerName www.marys-antiques.com
DocumentRoot /docs/mary
TransferLog /logs/mary.access_log
ErrorLog /logs/mary.error_log</VirtualHost>...
Look forward to “Virtual Hosting” in Chapter 18 for much more detail about virtualhosting.
User home directory docroots
Another common use of docroots gives people private web sites on a web server. Atypical convention maps URIs whose paths begin with a slash and tilde (/~) fol-lowed by a username to a private document root for that user. The private docroot isoften the folder called public_html inside that user’s home directory, but it can beconfigured differently (Figure 5-10).
Request message A
GET /~bob/index.html HTTP/1.0
Internet           /home/bob/public_html/home/betty/public_html
Client                            GET /~betty/index.html HTTP/1.0               www.joes-hardware.comwww.marys-antiques.com
Request message B
Figure 5-10. Different docroots for different users
Directory Listings
A web server can receive requests for directory URLs, where the path resolves to adirectory, not a file. Most web servers can be configured to take a few differentactions when a client requests a directory URL:• Return an error.• Return a special, default, “index file” instead of the directory.• Scan the directory, and return an HTML page containing the contents.
Most web servers look for a file named index.html or index.htm inside a directory torepresent that directory. If a user requests a URL for a directory and the directory|
contains a file named index.html (or index.htm), the server will return the contents ofthat file.
In the Apache web server, you can configure the set of filenames that will be inter-preted as default directory files using the DirectoryIndex configuration directive. The
DirectoryIndex directive lists all filenames that serve as directory index files, in pre-ferred order. The following configuration line causes Apache to search a directory forany of the listed files in response to a directory URL request:
DirectoryIndex index.html index.htm home.html home.htm index.cgi
If no default index file is present when a user requests a directory URI, and if direc-tory indexes are not disabled, many web servers automatically return an HTML filelisting the files in that directory, and the sizes and modification dates of each file,including URI links to each file. This file listing can be convenient, but it also allowsnosy people to find files on a web server that they might not normally find.
You can disable the automatic generation of directory index files with the Apachedirective:
Options -Indexes
Dynamic Content Resource Mapping
Webserversalso can map URIs to dynamic resources—that is, to programs that gen-erate content on demand (Figure 5-11). In fact, a whole class of web servers calledapplication servers connect web servers to sophisticated backend applications. Thewebserver needs to be able to tell when a resource is a dynamic resource, where thedynamic content generator program is located, and how to run the program. Mostweb servers provide basic mechanisms to identify and map dynamic resources.
Apache lets you map URI pathname components into executable program directo-ries. When a server receives a request for a URI with an executable path compo-nent, it attempts to execute a program in a corresponding server directory. Forexample, the following Apache configuration directive specifies that all URIs whosepaths begin with /cgi-bin/ should execute corresponding programs found in thedirectory /usr/local/etc/httpd/cgi-programs/:
ScriptAlias /cgi-bin/ /usr/local/etc/httpd/cgi-programs/
Apache also lets you mark executable files with a special file extension. This way,executable scripts can be placed in any directory. The following Apache configura-tion directive specifies that all web resources ending in .cgi should be executed:
AddHandler cgi-script .cgi
CGI is an early, simple, and popular interface for executing server-side applications.
Modern application servers have more powerful and efficient server-side dynamiccontent support, including Microsoft’s Active Server Pages and Java servlets.|

Filesystem                 Resources
Image file
Text file
Internet             Web camgateway
Client   Server
Stock tradinggateway
Real estate searchgateway11000101101
E-commercegateway
Figure 5-11. A web server can serve static resources as well as dynamic resources
Server-Side Includes (SSI)
Many web servers also provide support for server-side includes. If a resource isflagged as containing server-side includes, the server processes the resource contentsbefore sending them to the client.
The contents are scanned for certain special patterns (often contained inside special
HTMLcomments), which can be variable names or embedded scripts. The specialpatterns are replaced with the values of variables or the output of executable scripts.
This is an easy way to create dynamic content.
Access Controls
Webservers also can assign access controls to particular resources. When a requestarrives for an access-controlled resource, the web server can control access based onthe IP address of the client, or it can issue a password challenge to get access to theresource.
Refer to Chapter 12 for more information about HTTP authentication.|

Step 5: Building Responses
Once the web server has identified the resource, it performs the action described inthe request method and returns the response message. The response message con-tains a response status code, response headers, and a response body if one was gener-ated. HTTP response codes were detailed in “Status Codes” in Chapter 3.
Response Entities
If the transaction generated a response body, the content is sent back with theresponse message. If there was a body, the response message usually contains:• A Content-Type header, describing the MIME type of the response body• A Content-Length header, describing the size of the response body• The actual message body content
MIME Typing
The web server is responsible for determining the MIME type of the response body.
There are many ways to configure servers to associate MIME types with resources:mime.types
The web server can use the extension of the filename to indicate MIME type.
The web server scans a file containing MIME types for each extension to com-pute the MIME type for each resource. This extension-based type association isthe most common; it is illustrated in Figure 5-12.
HTTP request message containsthe command and the URI                                saw-blade.gif file
GET /specials/saw-blade.gif HTTP/1.0
Host: www.joes-hardware.com
Internet
Client                HTTP/1.0 200 OK                www.joes-hardware.com
Content-type: image/gif
Content-length: 8572
Server MIME type tableapplication/msword              docapplication/postscript          ai eps psapplication/powerpoint          pptaudio/mpeg                      mpga mp2image/gif                       gifimage/jpeg                      jpeg jpg jpeimage/tiff                      tiff tiftext/html                       html htmtext/plain                      txtvideo/mpeg                      mpeg mpg mpevideo/quicktime                 qt movvideo/x-msvideo                 avix-word/x-vrml                   wrl vrml
Figure 5-12. A web server uses MIME types file to set outgoing Content-Type of resources|

Magic typing
The Apache web server can scan the contents of each resource and pattern-match the content against a table of known patterns (called the magic file) todetermine the MIME type for each file. This can be slow, but it is convenient,especially if the files are named without standard extensions.
Explicit typing
Web servers can be configured to force particular files or directory contents tohave a MIME type, regardless of the file extension or contents.
Type negotiation
Some web servers can be configured to store a resource in multiple documentformats. In this case, the web server can be configured to determine the “best”format to use (and the associated MIME type) by a negotiation process with theuser. We’ll discuss this in Chapter 17.
Web servers also can be configured to associate particular files with MIME types.
Redirection
Web servers sometimes return redirection responses instead of success messages. Awebservercanredirect the browser to go elsewhere to perform the request. A redirec-tion response is indicated by a 3XX return code. The Location response header con-tains a URI for the new or preferred location of the content. Redirects are useful for:
Permanently moved resources
Aresource might have been moved to a new location, or otherwise renamed, giv-ing it a new URL. The web server can tell the client that the resource has beenrenamed, and the client can update any bookmarks, etc. before fetching theresource from its new location. The status code 301 Moved Permanently is usedfor this kind of redirect.
Temporarily moved resources
If a resource is temporarily moved or renamed, the server may want to redirectthe client to the new location. But, because the renaming is temporary, the serverwants the client to come back with the old URL in the future and not to updateany bookmarks. The status codes 303 See Other and 307 Temporary Redirectare used for this kind of redirect.
URL augmentation
Servers often use redirects to rewrite URLs, often to embed context. When therequest arrives, the server generates a new URL containing embedded state infor-*mation and redirects the user to this new URL. The client follows the redirect,reissuing the request, but now including the full, state-augmented URL. This is a* These extended, state-augmented URLs are sometimes called “fat URLs.”|
useful way of maintaining state across transactions. The status codes 303 See
Other and 307 Temporary Redirect are used for this kind of redirect.
Load balancing
If an overloaded server gets a request, the server can redirect the client to a lessheavily loaded server. The status codes 303 See Other and 307 Temporary Redi-rect are used for this kind of redirect.
Server affinity
Web servers may have local information for certain users; a server can redirectthe client to a server that contains information about the client. The status codes303 See Other and 307 Temporary Redirect are used for this kind of redirect.
Canonicalizing directory names
Whenaclient requests a URI for a directory name without a trailing slash, mostweb servers redirect the client to a URI with the slash added, so that relativelinks work correctly.
Step 6: Sending Responses
Webservers face similar issues sending data across connections as they do receiving.
The server may have many connections to many clients, some idle, some sendingdata to the server, and some carrying response data back to the clients.
The server needs to keep track of the connection state and handle persistent connec-tions with special care. For nonpersistent connections, the server is expected to closeits side of the connection when the entire message is sent.
For persistent connections, the connection may stay open, in which case the serverneeds to be extra cautious to compute the Content-Length header correctly, or theclient will have no way of knowing when a response ends (see Chapter 4).
Step 7: Logging
Finally, when a transaction is complete, the web server notes an entry into a log file,describing the transaction performed. Most web servers provide several configurableforms of logging. Refer to Chapter 21 for more details.
For More Information
For more information on Apache, Jigsaw, and ident, check out:
Apache: The Definitive Guide
Ben Laurie and Peter Laurie, O’Reilly & Associates, Inc.
Professional Apache
Peter Wainwright, Wrox Press.|
http://www.w3c.org/Jigsaw/
Jigsaw—W3C’s Server W3C Consortium Web Site.http://www.ietf.org/rfc/rfc1413.txt
RFC 1413, “Identification Protocol,” by M. St. Johns.|

CHAPTER 6
Proxies
Webproxyservers are intermediaries. Proxies sit between clients and servers and actas “middlemen,” shuffling HTTP messages back and forth between the parties.Thischapter talks all about HTTP proxy servers, the special support for proxy features,and some of the tricky behaviors you’ll see when you use proxy servers.
In this chapter, we:• Explain HTTP proxies, contrasting them to web gateways and illustrating howproxies are deployed.• Show some of the ways proxies are helpful.• Describe how proxies are deployed in real networks and how traffic is directedto proxy servers.• Show how to configure your browser to use a proxy.• Demonstrate HTTP proxy requests, how they differ from server requests, andhow proxies can subtly change the behavior of browsers.• Explain how you can record the path of your messages through chains of proxyservers, using Via headers and the TRACE method.• Describe proxy-based HTTP access control.• Explain how proxies can interoperate between clients and servers, each of whichmay support different features and versions.
Web Intermediaries
Web proxy servers are middlemen that fulfill transactions on the client’s behalf.
Without a web proxy, HTTP clients talk directly to HTTP servers. With a webproxy, the client instead talks to the proxy, which itself communicates with theserver on the client’s behalf. The client still completes the transaction, but throughthe good services of the proxy server.129
HTTP proxy servers are both web servers and web clients. Because HTTP clientssend request messages to proxies, the proxy server must properly handle the requestsand the connections and return responses, just like a web server. At the same time,the proxy itself sends requests to servers, so it must also behave like a correct HTTPclient, sending requests and receiving responses (see Figure 6-1). If you are creatingyour own HTTP proxy, you’ll need to carefully follow the rules for both HTTP cli-ents and HTTP servers.
Proxies act like SERVERS to web clients,                         Proxies act like CLIENTS to web servers,receiving request messages, and sending web request messages, andreturning response messages     receiving web response messages
Request     Request
Response                     Proxy           Response
Client                    Server
Figure 6-1. A proxy must be both a server and a client
Private and Shared Proxies
A proxy server can be dedicated to a single client or shared among many clients.
Proxies dedicated to a single client are called private proxies. Proxies shared amongnumerous clients are called public proxies.
Public proxies
Most proxies are public, shared proxies. It’s more cost effective and easier toadminister a centralized proxy. And some proxy applications, such as cachingproxyservers, become more useful as more users are funneled into the same proxyserver, because they can take advantage of common requests between users.
Private proxies
Dedicated private proxies are not as common, but they do have a place, espe-cially when run directly on the client computer. Some browser assistant prod-ucts, as well as some ISP services, run small proxies directly on the user’s PC inorder to extend browser features, improve performance, or host advertising forfree ISP services.
Proxies Versus Gateways
Strictly speaking, proxies connect two or more applications that speak the same pro-tocol, while gateways hook up two or more parties that speak different protocols. Agateway acts as a “protocol converter,” allowing a client to complete a transactionwith a server, even when the client and server speak different protocols.|

Figure 6-2 illustrates the difference between proxies and gateways:• The intermediary device in Figure 6-2a is an HTTP proxy, because the proxyspeaks HTTP to both the client and server.• The intermediary device in Figure 6-2b is an HTTP/POP gateway, because it tiesan HTTP frontend to a POP email backend. The gateway converts web transac-tions into the appropriate POP transactions, to allow the user to read emailthrough HTTP. Web-based email programs such as Yahoo! Mail and MSN Hot-mail are HTTP email gateways.(a) HTTP/HTTP proxy
HTTP                    HTTP
Web proxy
Browser       Web server(b) HTTP/POP gateway
HTTP                     POP
Browser                 Web/email              Email servergateway
Figure 6-2. Proxies speak the same protocol; gateways tie together different protocols
In practice, the difference between proxies and gateways is blurry. Because browsersand servers implement different versions of HTTP, proxies often do some amount ofprotocol conversion. And commercial proxy servers implement gateway functional-ity to support SSL security protocols, SOCKS firewalls, FTP access, and web-basedapplications. We’ll talk more about gateways in Chapter 8.
Why Use Proxies?
Proxy servers can do all kinds of nifty and useful things. They can improve security,enhance performance, and save money. And because proxy servers can see and touchall the passing HTTP traffic, proxies can monitor and modify the traffic to imple-ment many useful value-added web services. Here are examples of just a few of theways proxies can be used:
Child filter (Figure 6-3)
Elementary schools use filtering proxies to block access to adult content, whileproviding unhindered access to educational sites. As shown in Figure 6-3, the|
proxy might permit unrestricted access to educational content but forcibly deny*access to sites that are inappropriate for children.
OK
Child user                      Server
Internet
DENY
Child user                      Server
School’s filteringproxy
Figure 6-3. Proxy application example: child-safe Internet filter
Document access controller (Figure 6-4)
Proxy servers can be used to implement a uniform access-control strategy acrossa large set of web servers and web resources and to create an audit trail. This isuseful in large corporate settings or other distributed bureaucracies.
All the access controls can be configured on the centralized proxy server, with-out requiring the access controls to be updated frequently on numerous web†servers, of different makes and models, administered by different organizations.
In Figure 6-4, the centralized access-control proxy:• Permits client 1 to access news pages from server A without restriction• Gives client 2 unrestricted access to Internet content• Requires a password from client 3 before allowing access to server B
Security firewall (Figure 6-5)
Network security engineers often use proxy servers to enhance security. Proxyservers restrict which application-level protocols flow in and out of an organiza-tion, at a single secure point in the network. They also can provide hooks toscrutinize that traffic (Figure 6-5), as used by virus-eliminating web and emailproxies.* Several companies and nonprofit organizations provide filtering software and maintain “blacklists” in orderto identify and restrict access to objectionable content.†Topreventsophisticated users from willfully bypassing the control proxy, the web servers can be staticallyconfigured to accept requests only from the proxy servers.|

General     Generalnews        news
Client 1                                Accesscontrolproxy    Server A
To the Internet                     Internet
Client 2              Local areanetwork
Secret
Intended request             financialdata
Client 3                       to server Bblocked           Server B
What is the password forthe financial data?
Figure 6-4. Proxy application example: centralized document access control
Client              Server
Internet
Client                    Filtering router              Filtering router
Server
Firewall          Virusproxy
Client
Firewall                 Firewall      Server
Figure 6-5. Proxy application example: security firewall
Web cache (Figure 6-6)
Proxy caches maintain local copies of popular documents and serve them ondemand, reducing slow and costly Internet communication.
In Figure 6-6, clients 1 and 2access object A from a nearby web cache, while cli-ents 3 and 4 access the document from the origin server.|

Client 3
Client 1
Client 4
Web cachingproxy
Client 2
Originserver
Figure 6-6. Proxy application example: web cache
Surrogate (Figure 6-7)
Proxies can masquerade as web servers. These so-called surrogates or reverseproxies receive real web server requests, but, unlike web servers, they may initiatecommunication with other servers to locate the requested content on demand.
Surrogates may be used to improve the performance of slow web servers for com-moncontent.Inthisconfiguration, the surrogates often are called server accelera-tors (Figure 6-7). Surrogates also can be used in conjunction with content-routingfunctionality to create distributed networks of on-demand replicated content.
Internet
Surrogate
Client                             (also known as a reverse proxy               Serveror a server accelerator)
Figure 6-7. Proxy application example: surrogate (in a server accelerator deployment)
Content router (Figure 6-8)
Proxy servers can act as “content routers,” vectoring requests to particular webservers based on Internet traffic conditions and type of content.
Content routers also can be used to implement various service-level offerings.
For example, content routers can forward requests to nearby replica caches if the|
user or content provider has paid for higher performance (Figure 6-8), or route
HTTPrequests through filtering proxies if the user has signed up for a filteringservice. Many interesting services can be constructed using adaptive content-routing proxies.
Server A paid to have content distributedto replica caches, but server B did not.
The content router steers Luis to a replica cache for
A’s pages but to the origin server for B’s pages.
Contentrouter R1
Luis
Sharon
Content                           Server Brouter
Web caching
R2        proxy
Rob
Sharon paid for the performance, so the contentrouter sends her to the nearby cache. Rob didn’t,Server Aso the content router sends him to the origin server.
Figure 6-8. Proxy application example: content routing
Transcoder (Figure 6-9)
Proxy servers can modify the body format of content before delivering it to clients.*
This transparent translation between data representations is called transcoding.
Transcoding proxies can convert GIF images into JPEG images as they fly by, toreduce size. Images also can be shrunk and reduced in color intensity to be view-able on television sets. Likewise, text files can be compressed, and small textsummaries of web pages can be generated for Internet-enabled pagers and smartphones. It’s even possible for proxies to convert documents into foreign lan-guages on the fly!
Figure 6-9 shows a transcoding proxy that converts English text into Spanishtext and also reformats HTML pages into simpler text that can displayed on thesmall screen of a mobile phone.* Some people distinguish “transcoding” and “translation,” defining transcoding as relatively simple conver-sionsoftheencodingofthedata(e.g.,losslesscompression)andtranslationasmoresignificantreformattingorsemanticchangesofthedata.Weusethetermtranscodingtomeananyintermediary-basedmodificationof the content.|

Playeras de Verano
Obtendra muchas sonrisasy guiñios cuando use nuestrasplayeras de verano.                           Summer Beach Shirts
Blanco   You’ll get lots of smiles and
Spanish-       Negro    winks when you wear ourspeaking       Naranja amanecer                          summer beach shirts.client                  White
Summer Beach Shirts                           Black
You’ll get lots of smiles and                 Sunrise orangewinks when you wear our         Originsummer beach shirts.            server
Transcoding1) White                      proxy2) Black
Web-enabled 3) Sunrise orangemobile phone
Figure 6-9. Proxy application example: content transcoder
Anonymizer (Figure 6-10)
Anonymizer proxies provide heightened privacy and anonymity, by activelyremoving identifying characteristics from HTTP messages (e.g., client IP address,*
From header, Referer header, cookies, URI session IDs).
In Figure 6-10, the anonymizing proxy makes the following changes to the user’smessages to increase privacy:• The user’s computer and OS type is removed from the User-Agent header.• The From header is removed to protect the user’s email address.• The Referer header is removed to obscure other sites the user has visited.• The Cookie headers are removed to eliminate profiling and identity data.
GET /something/file.html HTTP/1.0
Date: Sun, 01 Oct 2000 23:25:17 GMT                  Anonymized message doesn’t contain the
User-agent: Mozilla/4.75 (Win98; U)                  common identifying information headers
From: joe@joes-hardware.com
Referer: http://www.irs.gov/tax-audits.html            GET /something/file.html HTTP/1.0
Cookie: profile="football,lite beer"                   Date: Sun, 01 Oct 2000 23:25:17 GMT
Cookie: income-bracket="30K-45K"                       User-agent: Mozilla/4.75
Anonymizing
Client        proxy            Server
Figure 6-10. Proxy application example: anonymizer* However,becauseidentifying information is removed, the quality of the user’s browsing experience may bediminished, and some web sites may not function properly.|

Where Do Proxies Go?
The previous section explained what proxies do. Now let’s talk about where proxiessit when they are deployed into a network architecture. We’ll cover:• How proxies can be deployed into networks• How proxies can chain together into hierarchies• How traffic gets directed to a proxy server in the first place
Proxy Server Deployment
You can place proxies in all kinds of places, depending on their intended uses.
Figure 6-11 sketches a few ways proxy servers can be deployed.
Egress proxy (Figure 6-11a)
You can stick proxies at the exit points of local networks to control the trafficflow between the local network and the greater Internet. You might use egressproxies in a corporation to offer firewall protection against malicious hackersoutside the enterprise or to reduce bandwidth charges and improve perfor-manceofInternet traffic. An elementary school might use a filtering egress proxyto prevent precocious students from browsing inappropriate content.
Access (ingress) proxy (Figure 6-11b)
Proxies are often placed at ISP access points, processing the aggregate requestsfrom the customers. ISPs use caching proxies to store copies of popular docu-ments, to improve the download speed for their users (especially those withhigh-speed connections) and reduce Internet bandwidth costs.
Surrogates (Figure 6-11c)
Proxies frequently are deployed as surrogates (also commonly called reverseproxies) at the edge of the network, in front of web servers, where they can fieldall of the requests directed at the web server and ask the web server for resourcesonly when necessary. Surrogates can add security features to web servers orimprove performance by placing fast web server caches in front of slower webservers. Surrogates typically assume the name and IP address of the web serverdirectly, so all requests go to the proxy instead of the server.
Network exchange proxy (Figure 6-11d)
With sufficient horsepower, proxies can be placed in the Internet peeringexchange points between networks, to alleviate congestion at Internet junctions*through caching and to monitor traffic flows.* Core proxies often are deployed where Internet bandwidth is very expensive (especially in Europe). Somecountries (such as the UK) also are evaluating controversial proxy deployments to monitor Internet trafficfor national security concerns.|
(a) Private LAN egress proxy
Client               Localnetwork Internet
Proxy
Client        Server(b) ISP access proxy
Client
Internet
Proxy
Client  Server(c) Surrogate
Client             Internet Localnetwork
Proxy
Client        Server(d) Network exchange proxy
Network 1                 Network 2
Router                   Router
Client          Proxy          Server
Figure 6-11. Proxies can be deployed many ways, depending on their intended use
Proxy Hierarchies
Proxies can be cascaded in chains called proxy hierarchies. In a proxy hierarchy, mes-sages are passed from proxy to proxy until they eventually reach the origin server(and then are passed back through the proxies to the client), as shown in Figure 6-12.
Proxy servers in a proxy hierarchy are assigned parent and child relationships. Thenext inbound proxy (closer to the server) is called the parent, and the next outboundproxy (closer to the client) is called the child. In Figure 6-12, proxy 1 is the child|

Client               Proxy 1               Proxy 2               Proxy 3            Origin server(child of proxy 2)    (child of proxy 3    (parent of proxy 2)parent of proxy 1)
Figure 6-12. Three-level proxy hierarchyproxy of proxy 2. Likewise, proxy 2 is the child proxy of proxy 3, and proxy 3 is theparent proxy of proxy 2.
Proxy hierarchy content routing
The proxy hierarchy in Figure 6-12is static—proxy 1 always forwards messages toproxy 2, and proxy 2 always forwards messages to proxy 3. However, hierarchies donot have to be static. A proxy server can forward messages to a varied and changingset of proxy servers and origin servers, based on many factors.
For example, in Figure 6-13, the access proxy routes to parent proxies or origin serv-ers in different circumstances:• If the requested object belongs to a web server that has paid for content distribu-tion, the proxy could route the request to a nearby cache server that wouldeither return the cached object or fetch it if it wasn’t available.• If the request was for a particular type of image, the access proxy might route therequest to a dedicated compression proxy that would fetch the image and thencompress it, so it would download faster across a slow modem to the client.
Dedicated cache server forspecially-subscribed objects
Caching proxy
Client                  Access proxy
Internet
CompressorproxyWeb servers aroundthe globe
Figure 6-13. Proxy hierarchies can be dynamic, changing for each request|

Here are a few other examples of dynamic parent selection:
Load balancing
Achild proxy might pick a parent proxy based on the current level of workloadon the parents, to spread the load around.
Geographic proximity routing
Achild proxy might select a parent responsible for the origin server’s geographicregion.
Protocol/type routing
A child proxy might route to different parents and origin servers based on the
URI. Certain types of URIs might cause the requests to be transported throughspecial proxy servers, for special protocol handling.
Subscription-based routing
If publishers have paid extra money for high-performance service, their URIsmight be routed to large caches or compression engines to improve performance.
Dynamic parenting routing logic is implemented differently in different products,including configuration files, scripting languages, and dynamic executable plug-ins.
How Proxies Get Trafﬁc
Because clients normally talk directly to web servers, we need to explain how HTTPtraffic finds its way to a proxy in the first place. There are four common ways tocause client traffic to get to a proxy:
Modify the client
Many web clients, including Netscape and Microsoft browsers, support bothmanual and automated proxy configuration. If a client is configured to use aproxy server, the client sends HTTP requests directly and intentionally to theproxy, instead of to the origin server (Figure 6-14a).
Modify the network
There are several techniques where the network infrastructure intercepts andsteers web traffic into a proxy, without the client’s knowledge or participation.
This interception typically relies on switching and routing devices that watch for
HTTPtraffic, intercept it, and shunt the traffic into a proxy, without the client’s*knowledge (Figure 6-14b). This is called an intercepting proxy.
Modify the DNS namespace
Surrogates, which are proxy servers placed in front of web servers, assume thenameandIPaddressofthewebserverdirectly,soallrequests go to them instead* Interceptingproxiescommonlyarecalled“transparentproxies,”becauseyouconnecttothemwithoutbeingawareoftheirpresence.Becausetheterm“transparency”alreadyisusedintheHTTPspecificationstoindi-catefunctionsthatdon’tchangesemanticbehavior,thestandardscommunitysuggestsusingtheterm“inter-ception” for traffic capture. We adopt this nomenclature here.|
of to the server (Figure 6-14c). This can be arranged by manually editing the
DNSnaming tables or by using special dynamic DNS servers that compute theappropriate proxy or server to use on-demand. In some installations, the IPaddress and name of the real server is changed and the surrogate is given theformer address and name.
Modify the web server
Somewebservers also can be configured to redirect client requests to a proxy bysending an HTTP redirection command (response code 305) back to the client.
Upon receiving the redirect, the client transacts with the proxy (Figure 6-14d).
The next section explains how to configure clients to send traffic to proxies.
Chapter 20 will explain how to configure the network, DNS, and servers to redirecttraffic to proxy servers.(a) Client configured to use proxy            (b) Network intercepts and redirects traffic to proxy
Router
Client              Server                    Client              Server
Proxy        Proxy(c) Surrogate stands in for web server        (d) Server redirects HTTP requests to proxy
Client         Proxy       Server             Client              Server(assuming theweb server’sname)
Proxy
Figure 6-14. There are many techniques to direct web requests to proxies
Client Proxy Settings
All modern web browsers let you configure the use of proxies. In fact, many brows-ers provide multiple ways of configuring proxies, including:
Manual configuration
You explicitly set a proxy to use.
Browser preconfiguration
The browser vendor or distributor manually preconfigures the proxy setting ofthe browser (or any other web client) before delivering it to customers.|

Proxy auto-configuration (PAC)
Youprovide a URI to a JavaScript proxy auto-configuration (PAC) file; the clientfetches the JavaScript file and runs it to decide if it should use a proxy and, if so,which proxy server to use.
WPAD proxy discovery
Some browsers support the Web Proxy Autodiscovery Protocol (WPAD), whichautomatically detects a “configuration server” from which the browser candownload an auto-configuration file.*
Client Proxy Conﬁguration: Manual
Manywebclients allow you to configure proxies manually. Both Netscape Navigatorand Microsoft Internet Explorer have convenient support for proxy configuration.
In Netscape Navigator 6, you specify proxies through the menu selection Edit ➝ Pref-erences ➝ Advanced ➝ Proxies and then selecting the “Manual proxy configuration”radio button.
In Microsoft Internet Explorer 5, you can manually specify proxies from the Tools ➝
Internet Options menu, by selecting a connection, pressing “Settings,” checking the“Use a proxy server” box, and clicking “Advanced.”
Other browsers have different ways of making manual configuration changes, butthe idea is the same: specifying the host and port for the proxy. Several ISPs ship cus-tomers preconfigured browsers, or customized operating systems, that redirect webtraffic to proxy servers.
Client Proxy Conﬁguration: PAC Files
Manual proxy configuration is simple but inflexible. You can specify only one proxyserver for all content, and there is no support for failover. Manual proxy configura-tion also leads to administrative problems for large organizations. With a large baseof configured browsers, it’s difficult or impossible to reconfigure every browser if youneed to make changes.
Proxy auto-configuration (PAC) files are a more dynamic solution for proxy configu-ration, because they are small JavaScript programs that compute proxy settings onthe fly. Each time a document is accessed, a JavaScript function selects the properproxy server.
To use PAC files, configure your browser with the URI of the JavaScript PAC file(configuration is similar to manual configuration, but you provide a URI in an “auto-matic configuration” box). The browser will fetch the PAC file from this URI and use* Currently supported only by Internet Explorer.|
the JavaScript logic to compute the proper proxy server for each access. PAC filestypically have a .pac suffix and the MIME type “application/x-ns-proxy-autoconfig.”
Each PAC file must define a function called FindProxyForURL(url,host) that com-putes the proper proxy server to use for accessing the URI. The return value of thefunction can be any of the values in Table 6-1.
Table 6-1. Proxy auto-configuration script return values
FindProxyForURL return value            Description
DIRECT Connections should be made directly, without any proxies.
PROXY host:port                         The specified proxy should be used.
SOCKS host:port                         The specified SOCKS server should be used.
The PAC file in Example 6-1 mandates one proxy for HTTP transactions, anotherproxy for FTP transactions, and direct connections for all other kinds of transactions.
Example6-1.Example proxy auto-configuration filefunction FindProxyForURL(url, host) {if (url.substring(0,5) == "http:") {return "PROXY http-proxy.mydomain.com:8080";} else if (url.substring(0,4) =="ftp:") {return "PROXY ftp-proxy.mydomain.com:8080";} else {return "DIRECT";}}
For more details about PAC files, refer to Chapter 20.
Client Proxy Conﬁguration: WPAD
Another mechanism for browser configuration is the Web Proxy Autodiscovery Pro-tocol (WPAD). WPAD is an algorithm that uses an escalating strategy of discoverymechanisms to find the appropriate PAC file for the browser automatically. A clientthat implements the WPAD protocol will:• Use WPAD to find the PAC URI.• Fetch the PAC file given the URI.• Execute the PAC file to determine the proxy server.• Use the proxy server for requests.
WPADuses a series of resource-discovery techniques to determine the proper PACfile. Multiple discovery techniques are used, because not all organizations can use alltechniques. WPAD attempts each technique, one by one, until it succeeds.|

The current WPAD specification defines the following techniques, in order:• Dynamic Host Discovery Protocol (DHCP)• Service Location Protocol (SLP)• DNS well-known hostnames• DNS SRV records• DNS service URIs in TXT records
For more information, consult Chapter 20.
Tricky Things About Proxy Requests
This section explains some of the tricky and much misunderstood aspects of proxyserver requests, including:• How the URIs in proxy requests differ from server requests• How intercepting and reverse proxies can obscure server host information• The rules for URI modification• How proxies impact a browser’s clever URI auto-completion or hostname-expansion features
Proxy URIs Differ from Server URIs
Webserver and web proxy messages have the same syntax, with one exception. The
URI in an HTTP request message differs when a client sends the request to a serverinstead of a proxy.
Whenaclient sends a request to a web server, the request line contains only a par-tial URI (without a scheme, host, or port), as shown in the following example:
GET /index.html HTTP/1.0
User-Agent: SuperBrowserv1.3
Whenaclient sends a request to a proxy, however, the request line contains the full
URI. For example:
GET http://www.marys-antiques.com/index.html HTTP/1.0
User-Agent: SuperBrowser v1.3
Whyhave two different request formats, one for proxies and one for servers? In theoriginal HTTP design, clients talked directly to a single server. Virtual hosting didnot exist, and no provision was made for proxies. Because a single server knows itsown hostname and port, to avoid sending redundant information, clients sent justthe partial URI, without the scheme and host (and port).
Whenproxies emerged, the partial URIs became a problem. Proxies needed to knowthe name of the destination server, so they could establish their own connections to|
the server. And proxy-based gateways needed the scheme of the URI to connect to
FTPresourcesandotherschemes.HTTP/1.0solvedtheproblembyrequiringthefull
URI for proxy requests, but it retained partial URIs for server requests (there weretoo many servers already deployed to change all of them to support full URIs).*
So we need to send partial URIs to servers, and full URIs to proxies. In the case ofexplicitly configured client proxy settings, the client knows what type of request toissue:• When the client is not set to use a proxy, it sends the partial URI (Figure 6-15a).• When the client is set to use a proxy, it sends the full URI (Figure 6-15b).(a) Server request                            GET /index.html HTTP/1.0
User-agent: SuperBrowser v1.3
Client            Origin server(b) Explicit proxy request    GET http://www.marys-antiques.com/index.html HTTP/1.0
User-agent: SuperBrowser v1.3
Client     (Proxy explicitly configured)                      Proxy server          Origin server(c) Surrogate (reverse proxy)  request        GET /index.html HTTP/1.0
User-agent: SuperBrowser v1.3(Server hostname points to the surrogate proxy)     Surrogate
Client            Origin server(d) Intercepting proxy request
GET /index.html HTTP/1.0
User-agent: SuperBrowser v1.3
Client            Origin server
Intercepting proxy
Figure 6-15. Intercepting proxies will get server requests* HTTP/1.1nowrequiresserverstohandlefullURIsforbothproxyandserverrequests,butinpractice,manydeployed servers still accept only partial URIs.|

The Same Problem with Virtual Hosting
The proxy “missing scheme/host/port” problem is the same problem faced byvirtually hosted web servers. Virtually hosted web servers share the same physi-cal web server among many web sites. When a request comes in for the partial
URI /index.html, the virtually hosted web server needs to know the hostname ofthe intended web site (see “Virtually hosted docroots” in Chapter 5 and “Virtual
Hosting” in Chapter 18 for more information).
In spite of the problems being similar, they were solved in different ways:• Explicit proxies solve the problem by requiring a full URI in the request message.• Virtually hosted web servers require a Host header to carry the host and portinformation.
Intercepting Proxies Get Partial URIs
As long as the clients properly implement HTTP, they will send full URIs in requeststo explicitly configured proxies. That solves part of the problem, but there’s a catch:a client will not always know it’s talking to a proxy, because some proxies may beinvisible to the client. Even if the client is not configured to use a proxy, the client’straffic still may go through a surrogate or intercepting proxy. In both of these cases,the client will think it’s talking to a web server and won’t send the full URI:•Asurrogate, as described earlier, is a proxy server taking the place of the originserver, usually by assuming its hostname or IP address. It receives the web serverrequest and may serve cached responses or proxy requests to the real server. Aclient cannot distinguish a surrogate from a web server, so it sends partial URIs(Figure 6-15c).•Anintercepting proxy is a proxy server in the network flow that hijacks trafficfrom the client to the server and either serves a cached response or proxies it.
Because the intercepting proxy hijacks client-to-server traffic, it will receive par-*tial URIs that are sent to web servers (Figure 6-15d).
Proxies Can Handle Both Proxy and Server Requests
Because of the different ways that traffic can be redirected into proxy servers,general-purpose proxy servers should support both full URIs and partial URIs inrequest messages. The proxy should use the full URI if it is an explicit proxy requestor use the partial URI and the virtual Host header if it is a web server request.* Intercepting proxies also might intercept client-to-proxy traffic in some circumstances, in which case theintercepting proxymightgetfullURIsandneedtohandlethem.Thisdoesn’thappenoften,becauseexplicitproxiesnormallycommunicateonaportdifferentfromthatusedbyHTTP(usually8080insteadof80),andintercepting proxies usually intercept only port 80.|

The rules for using full and partial URIs are:• If a full URI is provided, the proxy should use it.• If a partial URI is provided, and a Host header is present, the Host headershould be used to determine the origin server name and port number.• If a partial URI is provided, and there is no Host header, the origin server needsto be determined in some other way:— If the proxy is a surrogate, standing in for an origin server, the proxy can beconfigured with the real server’s address and port number.— If the traffic was intercepted, and the interceptor makes the original IPaddress and port available, the proxy can use the IP address and port num-ber from the interception technology (see Chapter 20).— If all else fails, the proxy doesn’t have enough information to determine theorigin server and must return an error message (often suggesting that theuser upgrade to a modern browser that supports Host headers).*
In-Flight URI Modiﬁcation
Proxy servers need to be very careful about changing the request URI as they for-ward messages. Slight changes in the URI, even if they seem benign, may createinteroperability problems with downstream servers.
In particular, some proxies have been known to “canonicalize” URIs into a standardform before forwarding them to the next hop. Seemingly benign transformations,such as replacing default HTTP ports with an explicit “:80”, or correcting URIs byreplacing illegal reserved characters with their properly escaped substitutions, cancause interoperation problems.
In general, proxy servers should strive to be as tolerant as possible. They should notaim to be “protocol policemen” looking to enforce strict protocol compliance,because this could involve significant disruption of previously functional services.
In particular, the HTTP specifications forbid general intercepting proxies fromrewriting the absolute path parts of URIs when forwarding them. The only excep-tion is that they can replace an empty path with “/”.
URI Client Auto-Expansion and Hostname Resolution
Browsers resolve request URIs differently, depending on whether or not a proxy ispresent. Without a proxy, the browser takes the URI you type in and tries to find acorresponding IP address. If the hostname is found, the browser tries the corre-sponding IP addresses until it gets a successful connection.* This shouldn’t be done casually. Users will receive cryptic error pages they never got before.|

But if the host isn’t found, many browsers attempt to provide some automatic“expansion” of hostnames, in case you typed in a “shorthand” abbreviation of thehost (refer back to “Expandomatic URLs” in Chapter 2):*• Manybrowsersattemptaddinga“www.”prefixanda“.com”suffix,incaseyoujust entered the middle piece of a common web site name (e.g., to let peopleenter “yahoo” instead of “www.yahoo.com”).• Some browsers even pass your unresolvable URI to a third-party site, whichattempts to correct spelling mistakes and suggest URIs you may have intended.• In addition, the DNS configuration on most systems allows you to enter just theprefix of the hostname, and the DNS automatically searches the domain. If you arein the domain “oreilly.com” and type in the hostname “host7,” the DNS automati-cally attempts to match “host7.oreilly.com”. It’s not a complete, valid hostname.
URI Resolution Without a Proxy
Figure 6-16 shows an example of browser hostname auto-expansion without aproxy. In steps 2a–3c, the browser looks up variations of the hostname until a validhostname is found.(2a) Browser looks up host “oreilly” via DNS(2b) Failed, host unknown(3b) Browser looks up host “www.oreilly.com” via DNS(3c) Success! Get IP addresses back
DNS server(1) User types “oreilly” intobrowser’s URI location window(4a) Browser tries to connect to IP addresses, one by one, until connect successful(4b) Success; connection established(5a) Browser sends HTTP request(5b) Browser gets HTTP response
Client                   www.oreilly.com(3a) The browser does auto-expansion,converting “oreilly” into “www.oreilly.com”
Figure 6-16. Browser auto-expands partial hostnames when no explicit proxy is present
Here’s what’s going on in this figure:• In Step 1, the user types “oreilly” into the browser’s URI window. The browseruses “oreilly” as the hostname and assumes a default scheme of “http://”, adefault port of “80”, and a default path of “/”.• In Step 2a, the browser looks up host “oreilly.” This fails.* Most browsers let you type in “yahoo” and auto-expand that into “www.yahoo.com.” Similarly, browserslet you omit the “http://” prefix and insert it if it’s missing.|
• In Step 3a, the browser auto-expands the hostname and asks the DNS to resolve“www.oreilly.com.” This is successful.• The browser then successfully connects to www.oreilly.com.
URI Resolution with an Explicit Proxy
Whenyouuseanexplicit proxy the browser no longer performs any of these conve-nience expansions, because the user’s URI is passed directly to the proxy.
As shown in Figure 6-17, the browser does not auto-expand the partial hostnamewhen there is an explicit proxy. As a result, when the user types “oreilly” into thebrowser’s location window, the proxy is sent “http://oreilly/” (the browser adds thedefault scheme and path but leaves the hostname as entered).
Request message, as sent in (4a)(2a) Proxy is explicitly configured,                  GET http://oreilly/ HTTP/1.0so the browser looks up the address                   Proxy-connection: Keep-Aliveof the proxy server using DNS                         User-agent: Mozilla/4.72[en] (Win98:I)
Host: oreilly(2b) Success! Get proxy server                   Accept: */*
IP addresses    Accept-encoding: gzip
Accept-language: en
Accept-charset: iso-8859-1,*,utf-8
DNS server(1) User types “oreilly” into                 (4b) Proxy gets a partial hostnamebrowser’s URI location window                 in the request, because the clientdid not auto-expand it.(3a) Browser tries to connect to proxy(3b) Success; connection established
Client     (4a) Browser sends HTTP request                         Proxy                   www.oreilly.com(3a) The browser does auto-expansion,converting “oreilly” into “www.oreilly.com”
Figure 6-17. Browser does not auto-expand partial hostnames when there is an explicit proxy
For this reason, some proxies attempt to mimic as much as possible of the browser’sconvenience services as they can, including “www...com” auto-expansion and addi-*tion of local domain suffixes.
URI Resolution with an Intercepting Proxy
Hostname resolution is a little different with an invisible intercepting proxy, becauseas far as the client is concerned, there is no proxy! The behavior proceeds much likethe server case, with the browser auto-expanding hostnames until DNS success. Buta significant difference occurs when the connection to the server is made, as
Figure 6-18 illustrates.* But, for widely shared proxies, it may be impossible to know the proper domain suffix for individual users.|
(2a)(2b)(3b)  (5b)(3c)                        Proxy
DNS server(1)(4a)(4b)(5a)
Client                      Interceptor                   www.oreilly.com(3a)
Figure 6-18. Browser doesn’t detect dead server IP addresses when using intercepting proxies
Figure 6-18 demonstrates the following transaction:• In Step 1, the user types “oreilly” into the browser’s URI location window.• In Step 2a, the browser looks up the host “oreilly” via DNS, but the DNS serverfails and responds that the host is unknown, as shown in Step 2b.• In Step 3a, the browser does auto-expansion, converting “oreilly” into “www.oreilly.com.” In Step 3b, the browser looks up the host “www.oreilly.com” via
DNS.Thistime,asshowninStep3c,theDNSserverissuccessfulandreturnsIPaddresses back to the browser.• In Step 4a, the client already has successfully resolved the hostname and has alist of IP addresses. Normally, the client tries to connect to each IP address untilit succeeds, because some of the IP addresses may be dead. But with an inter-cepting proxy, the first connection attempt is terminated by the proxy server, notthe origin server. The client believes it is successfully talking to the web server,but the web server might not even be alive.• When the proxy finally is ready to interact with the real origin server (Step 5b),the proxy may find that the IP address actually points to a down server. To pro-vide the same level of fault tolerance provided by the browser, the proxy needsto try other IP addresses, either by reresolving the hostname in the Host headeror by doing a reverse DNS lookup on the IP address. It is important that bothintercepting and explicit proxy implementations support fault tolerance on DNSresolution to dead servers, because when browsers are configured to use anexplicit proxy, they rely on the proxy for fault tolerance.
Tracing Messages
Today, it’s not uncommon for web requests to go through a chain of two or moreproxies on their way from the client to the server (Figure 6-19). For example, many|
corporations use caching proxy servers to access the Internet, for security and costsavings, and many large ISPs use proxy caches to improve performance and imple-ment features. A significant percentage of web requests today go through proxies. Atthe same time, it’s becoming increasingly popular to replicate content on banks ofsurrogate caches scattered around the globe, for performance reasons.
Surrogate cache bank
ISP proxy                 Internet
Client           Web server
Figure 6-19. Access proxies and CDN proxies create two-level proxy hierarchies
Proxies are developed by different vendors. They have different features and bugsand are administrated by various organizations.
As proxies become more prevalent, you need to be able to trace the flow of messagesacross proxies and to detect any problems, just as it is important to trace the flow of
IP packets across different switches and routers.
The Via Header
The Via header field lists information about each intermediate node (proxy or gate-way) through which a message passes. Each time a message goes through anothernode, the intermediate node must be added to the end of the Via list.
The following Via string tells us that the message traveled through two proxies. Itindicates that the first proxy implemented the HTTP/1.1 protocol and was calledproxy-62.irenes-isp.net, and that the second proxy implemented HTTP/1.0 and wascalled cache.joes-hardware.com:
Via: 1.1 proxy-62.irenes-isp.net, 1.0 cache.joes-hardware.com
The Via header field is used to track the forwarding of messages, diagnose messageloops, and identify the protocol capabilities of all senders along the request/responsechain (Figure 6-20).
Proxies also can use Via headers to detect routing loops in the network. A proxyshould insert a unique string associated with itself in the Via header before sendingout a request and should check for the presence of this string in incoming requests todetect routing loops in the network.|

Request message (as received by server)
GET /index.html HTTP/1.0
Accept: text/html
Host: www.joes-hardware.com
Via: 1.1 proxy-62.irenes-isp.net, 1.0 cache.joes-hardware.comproxy-62.irenes-isp.net     cache.joes-hardware.com
Client                (HTTP/1.1)                   (HTTP/1.0)              www.joes-hardware.com
Figure 6-20. Via header example
Via syntax
The Via header field contains a comma-separated list of waypoints. Each waypointrepresents an individual proxy server or gateway hop and contains information aboutthe protocol and address of that intermediate node. Here is an example of a Viaheader with two waypoints:
Via = 1.1 cache.joes-hardware.com, 1.1 proxy.irenes-isp.net
The formal syntax for a Via header is shown here:
Via               = "Via" ":" 1#( waypoint )waypoint          = ( received-protocol received-by [ comment ] )received-protocol = [ protocol-name "/" ] protocol-versionreceived-by       = ( host [ ":" port ] ) | pseudonym
Note that each Via waypoint contains up to four components: an optional protocolname(defaults to HTTP), a required protocol version, a required node name, and anoptional descriptive comment:
Protocol name
The protocol received by an intermediary. The protocol name is optional if theprotocol is HTTP. Otherwise, the protocol name is prepended to the version,separated by a “/”. Non-HTTP protocols can occur when gateways connect
HTTP requests for other protocols (HTTPS, FTP, etc.).
Protocol version
The version of the message received. The format of the version depends on theprotocol. For HTTP, the standard version numbers are used (“1.0”, “1.1”, etc.).
Theversion is included in the Via field, so later applications will know the proto-col capabilities of all previous intermediaries.
Node name
The host and optional port number of the intermediary (if the port isn’tincluded, you can assume the default port for the protocol). In some cases anorganization might not want to give out the real hostname, for privacy reasons,in which case it may be replaced by a pseudonym.|

Node comment
An optional comment that further describes the intermediary node. It’s com-mon to include vendor and version information here, and some proxy serversalso use the comment field to include diagnostic information about the events*that occurred on that device.
Via request and response paths
Both request and response messages pass through proxies, so both request andresponse messages have Via headers.
Because requests and responses usually travel over the same TCP connection,response messages travel backward across the same path as the requests. If a requestmessage goes through proxies A, B, and C, the corresponding response message trav-els through proxies C, B, then A. So, the Via header for responses is almost alwaysthe reverse of the Via header for responses (Figure 6-21).
Request Via headervia: 1.1 A, 1.1 B, 1.1 C
ABC
Client           Server
Reponse Via headervia: 1.1 C, 1.1 B, 1.1 A
Figure 6-21. The response Via is usually the reverse of the request Via
Via and gateways
Some proxies provide gateway functionality to servers that speak non-HTTP proto-cols. The Via header records these protocol conversions, so HTTP applications canbe aware of protocol capabilities and conversions along the proxy chain. Figure 6-22shows an HTTP client requesting an FTP URI through an HTTP/FTP gateway.
The client sends an HTTP request for ftp://http-guide.com/pub/welcome.txt to thegateway proxy.irenes-isp.net. The proxy, acting as a protocol gateway, retrieves thedesired object from the FTP server, using the FTP protocol. The proxy then sendsthe object back to the client in an HTTP response, with this Via header field:
Via: FTP/1.0 proxy.irenes-isp.net (Traffic-Server/5.0.1-17882 [cMs f ])* For example, caching proxy servers may include hit/miss information.|

HTTP request message sent to proxy
GET ftp://http-guide.com/pub/welcome.txt HTTP/1.0
FTP requestproxy.irenes-isp.net       FTP response
Client                                (HTTP/1.0)                   http-guide.com
FTP server
HTTP response message
HTTP/1.0 200 OK
Date: Sun, 11 Nov 2001 21:01:59 GMT
Via: FTP/1.0 proxy.irenes-isp.net (Traffic-Server/5.0.1-17882 [cMsf])
Last-modified: Sun, 11 Nov 2001 21:05:24 GMT
Content-type: text/plain
Hi there. This is an FTP server.
Figure 6-22. HTTP/FTP gateway generates Via headers, logging the received protocol (FTP)
Notice the received protocol is FTP. The optional comment contains the brand andversion number of the proxy server and some vendor diagnostic information. Youcan read all about gateways in Chapter 8.
The Server and Via headers
The Server response header field describes the software used by the origin server.
Here are a few examples:
Server: Apache/1.3.14 (Unix) PHP/4.0.4
Server: Netscape-Enterprise/4.1
Server: Microsoft-IIS/5.0
If a response message is being forwarded through a proxy, make sure the proxy doesnot modify the Server header. The Server header is meant for the origin server.
Instead, the proxy should add a Via entry.
Privacy and security implications of Via
There are some cases when we want don’t want exact hostnames in the Via string. Ingeneral, unless this behavior is explicitly enabled, when a proxy server is part of a net-work firewall it should not forward the names and ports of hosts behind the firewall,because knowledge of network architecture behind a firewall might be of use to amalicious party.** Maliciouspeoplecanusethenamesofcomputersandversionnumberstolearnaboutthenetworkarchitec-ture behind a security perimeter. This information might be helpful in security attacks. In addition, thenames of computers might be clues to private projects within an organization.|

If Via node-name forwarding is not enabled, proxies that are part of a security perim-eter should replace the hostname with an appropriate pseudonym for that host. Gen-erally, though, proxies should try to retain a Via waypoint entry for each proxyserver, even if the real name is obscured.
For organizations that have very strong privacy requirements for obscuring thedesign and topology of internal network architectures, a proxy may combine anordered sequence of Via waypoint entries (with identical received-protocol values)into a single, joined entry. For example:
Via: 1.0 foo, 1.1 devirus.company.com, 1.1 access-logger.company.comcould be collapsed to:
Via: 1.0 foo, 1.1 concealed-stuff
Don’t combine multiple entries unless they all are under the same organizationalcontrol and the hosts already have been replaced by pseudonyms. Also, don’t com-bine entries that have different received-protocol values.
The TRACE Method
Proxy servers can change messages as the messages are forwarded. Headers areadded, modified, and removed, and bodies can be converted to different formats. Asproxies become more sophisticated, and more vendors deploy proxy products,interoperability problems increase. To easily diagnose proxy networks, we need awaytoconveniently watch how messages change as they are forwarded, hop by hop,through the HTTP proxy network.
HTTP/1.1’s TRACE method lets you trace a request message through a chain ofproxies, observing what proxies the message passes through and how each proxy*modifies the request message. TRACE is very useful for debugging proxy flows.
When the TRACE request reaches the destination server,† the entire request mes-sage is reflected back to the sender, bundled up in the body of an HTTP response(see Figure 6-23). When the TRACE response arrives, the client can examine theexact message the server received and the list of proxies through which it passed (inthe Via header). The TRACE response has Content-Type message/http and a 200
OK status.
Max-Forwards
Normally, TRACE messages travel all the way to the destination server, regardless ofthe number of intervening proxies. You can use the Max-Forwards header to limit* Unfortunately, it isn’t widely implemented yet.†ThefinalrecipientiseithertheoriginserverorthefirstproxyorgatewaytoreceiveaMax-Forwardsvalueofzero (0) in the request.|

TRACE request
TRACE /index.html HTTP/1.1
Host: www.joes-hardware.com
Accept: text/html
Client                       Proxy 1                     Proxy 2                     Proxy 3                         Server(proxy.irenes-isp net)         (p1127.att net)       (cache.joes-hardware.com)       (www.joes-hardware.com)
HTTP/1.1 200 OK
Content-Type: message/http
Content-Length: 269
Via: 1.1 cache.joes-hardware.com, 1.1 p1127.att.net, 1.1 proxy.irenes-isp.net
TRACE /index.html HTTP/1.1  Received request
Host: www.joes-hardware.com
Accept: text/html
Via: 1.1 proxy.irenes-isp.net, 1.1 p1127.att.net, 1.1 cache.joes-hardware.com
X-Magic-CDN-Thingy: 134-AF-0003
Cookie: access-isp="Irene’s ISP, California"
Client-ip: 209.134.49.32
TRACE response
Figure 6-23. TRACE response reflects back the received request messagethe number of proxy hops for TRACE and OPTIONS requests, which is useful fortesting a chain of proxies forwarding messages in an infinite loop or for checking theeffects of particular proxy servers in the middle of a chain. Max-Forwards also limitsthe forwarding of OPTIONS messages (see “Proxy Interoperation”).
The Max-Forwards request header field contains a single integer indicating theremaining number of times this request message may be forwarded (Figure 6-24). Ifthe Max-Forwards value is zero (Max-Forwards: 0), the receiver must reflect the
TRACE message back toward the client without forwarding it further, even if thereceiver is not the origin server.
If the received Max-Forwards value is greater than zero, the forwarded message mustcontain an updated Max-Forwards field with a value decremented by one. All prox-ies and gateways should support Max-Forwards. You can use Max-Forwards to viewthe request at any hop in a proxy chain.
Proxy Authentication
Proxies can serve as access-control devices. HTTP defines a mechanism called proxyauthentication that blocks requests for content until the user provides valid access-permission credentials to the proxy:• When a request for restricted content arrives at a proxy server, the proxy servercan return a 407 Proxy Authorization Required status code demanding access|

TRACE request
TRACE /index.html HTTP/1.1
Host: www.joes-hardware.com                  Max-Forwards= 1              Max-Forwards= 0
Max-Forwards: 2
Accept: text/html
Client                       Proxy 1                      Proxy 2                    Proxy 3                          Server(proxy.irenes-isp.net)         (p1127.att.net)       (cache.joes-hardware.com)       (www.joes-hardware.com)
HTTP/1.1 200 OK
Content-Type: message/http
Content-Length: 269
Via: 1.1 p1127.att.net, 1.1 proxy.irenes-isp.net
TRACE /index.html HTTP/1.1                       Received request
Host: www.joes-hardware.com
Accept: text/html
Via: 1.1 proxy.irenes-isp.net, 1.1 p1127.att.net
X-Magic-CDN-Thingy: 134-AF-0003
Cookie: access-isp="Irene’s ISP, California"
Client-ip: 209.134.49.32
TRACE response
Figure 6-24. You can limit the forwarding hop count with the Max-Forwards header fieldcredentials, accompanied by a Proxy-Authenticate header field that describeshow to provide those credentials (Figure 6-25b).• Whentheclientreceives the 407 response, it attempts to gather the required cre-dentials, either from a local database or by prompting the user.• Once the credentials are obtained, the client resends the request, providing therequired credentials in a Proxy-Authorization header field.• If the credentials are valid, the proxy passes the original request along the chain(Figure 6-25c); otherwise, another 407 reply is sent.
Proxy authentication generally does not work well when there are multiple proxies ina chain, each participating in authentication. People have proposed enhancements to
HTTP to associate authentication credentials with particular waypoints in a proxychain, but those enhancements have not been widely implemented.
Be sure to read Chapter 12for a detailed explanation of HTTP’s authenticationmechanisms.
Proxy Interoperation
Clients, servers, and proxies are built by multiple vendors, to different versions of the
HTTP specification. They support various features and have different bugs. Proxyservers need to intermediate between client-side and server-side devices, which mayimplement different protocols and have troublesome quirks.|
(a)          GET http://server.com/secret.jpg HTTP/1.0
ClientAccess control         Serverproxy(b)          HTTP/1.o 407 Proxy Authorization Required
Proxy-Authenticate: Basic realm="Secure Stuff"
Access control
Client     proxy             Server(c)          GET http://server.com/secret.jpg HTTP/1.0
Proxy-Authorization: Basic YnJpOmZvbw==
Access control
Client     proxy             Server(d)          HTTP/1.0 200 OK
Content-type: image/jpeg...<image data included>...
Access control
Client     proxy             Server
Super secretimage
Figure 6-25. Proxies can implement authentication to control access to content
Handling Unsupported Headers and Methods
Theproxyserver may not understand all the header fields that pass through it. Someheaders may be newer than the proxy itself; others may be customized header fieldsunique to a particular application. Proxies must forward unrecognized header fieldsand must maintain the relative order of header fields with the same name.* Similarly,if a proxy is unfamiliar with a method, it should try to forward the message to thenext hop, if possible.
Proxies that cannot tunnel unsupported methods may not be viable in most net-works today, because Hotmail access through Microsoft Outlook makes extensiveuse of HTTP extension methods.* Multiple message header fields with the same field name may be present in a message, but if they are, theymustbeabletobeequivalentlycombinedintoacomma-separatedlist.Theorderinwhichheaderfieldswiththe same field name are received is therefore significant to the interpretation of the combined field value, soa proxy can’t change the relative order of these same-named field values when it forwards a message.|

OPTIONS: Discovering Optional Feature Support
The HTTP OPTIONS method lets a client (or proxy) discover the supported func-tionality (for example, supported methods) of a web server or of a particular resourceon a web server (Figure 6-26). Clients can use OPTIONS to determine a server’scapabilities before interacting with the server, making it easier to interoperate withproxies and servers of different feature levels.
OPTIONS * HTTP/1.1
Proxy
Client             Server
HTTP/1.1 200 OK
Allow: GET,PUT,POST,HEAD,TRACE,OPTIONS
Figure 6-26. Using OPTIONS to find a server’s supported methods
If the URI of the OPTIONS request is an asterisk (*), the request pertains to theentire server’s supported functionality. For example:
OPTIONS * HTTP/1.1
If the URI is a real resource, the OPTIONS request inquires about the features avail-able to that particular resource:
OPTIONS http://www.joes-hardware.com/index.html HTTP/1.1
Onsuccess, the OPTIONS method returns a 200 OK response that includes variousheader fields that describe optional features that are supported on the server or avail-able to the resource. The only header field that HTTP/1.1 specifies in the response isthe Allow header, which describes what methods are supported by the server (or*particular resource on the server). OPTIONS allows an optional response body withmore information, but this is undefined.
The Allow Header
TheAllowentity header field lists the set of methods supported by the resource iden-tified by the request URI, or the entire server if the request URI is *. For example:
Allow: GET, HEAD, PUT
The Allow header can be used as a request header to recommend the methods to besupported by the new resource. The server is not required to support these methods* Notall resources support every method. For example, a CGI script query may not support a file PUT, and astatic HTML file wouldn’t accept a POST method.|
and should include an Allow header in the matching response, listing the actual sup-ported methods.
A proxy can’t modify the Allow header field even if it does not understand all themethods specified, because the client might have other paths to talk to the originserver.
For More Information
For more information, refer to:http://www.w3.org/Protocols/rfc2616/rfc2616.txt
RFC2616,“HypertextTransferProtocol,” by R. Fielding, J. Gettys, J. Mogul, H.
Frystyk, L. Mastinter, P. Leach, and T. Berners-Lee.http://search.ietf.org/rfc/rfc3040.txt
RFC 3040, “Internet Web Replication and Caching Taxonomy.”
Web Proxy Servers
Ari Luotonen, Prentice Hall Computer Books.http://search.ietf.org/rfc/rfc3143.txt
RFC 3143, “Known HTTP Proxy/Caching Problems.”
Web Caching
Duane Wessels, O’Reilly & Associates, Inc.|

CHAPTER 7
Caching
Web caches are HTTP devices that automatically keep copies of popular docu-ments. When a web request arrives at a cache, if a local “cached” copy is available,the document is served from the local storage instead of from the origin server.
Caches have the following benefits:• Cachesreduce redundant data transfers, saving you money in network charges.• Cachesreduce network bottlenecks. Pages load faster without more bandwidth.• Cachesreduce demand on origin servers. Servers reply faster and avoid overload.• Cachesreduce distance delays, because pages load slower from farther away.
In this chapter, we explain how caches improve performance and reduce cost, howto measure their effectiveness, and where to place caches to maximize impact. Wealso explain how HTTP keeps cached copies fresh and how caches interact withother caches and servers.
Redundant Data Transfers
When multiple clients access a popular origin server page, the server transmits thesame document multiple times, once to each client. The same bytes travel across thenetwork over and over again. These redundant data transfers eat up expensive net-work bandwidth, slow down transfers, and overload web servers. With caches, thecache keeps a copy of the first server response. Subsequent requests can be fulfilledfrom the cached copy, reducing wasteful, duplicate traffic to and from origin servers.
Bandwidth Bottlenecks
Caches also can reduce network bottlenecks. Many networks provide more band-width to local network clients than to remote servers (Figure 7-1). Clients access serv-ers at the speed of the slowest network on the way. If a client gets a copy from a cacheon a fast LAN, caching can boost performance—especially for larger documents.161
San Francisco branch office
Client                   Cache
Fast connection to cache                          Slow WAN connection to server(100 Mbit/sec ethernet) (1.4 Mbit/sec T1)
Atlanta corporate headquarters
Server
Figure 7-1. Limited wide area bandwidth creates a bottleneck that caches can improve
In Figure 7-1, it might take 30 seconds for a user in the San Francisco branch of Joe’s
Hardware, Inc. to download a 5-MB inventory file from the Atlanta headquarters,across the 1.4-Mbps T1 Internet connection. If the document was cached in the San
Francisco office, a local user might be able to get the same document in less than asecond across the Ethernet connection.
Table 7-1 shows how bandwidth affects transfer time for a few different networkspeeds and a few different sizes of documents. Bandwidth causes noticeable delaysfor larger documents, and the speed difference between different network types isdramatic.* A 56-Kbps modem would take 749 seconds (over 12minutes) to transfer a5-MB file that could be transported in under a second across a fast Ethernet LAN.
Table 7-1. Bandwidth-imposed transfer time delays, idealized (time in seconds)
Large HTML (15 KB)            JPEG (40 KB)         Large JPEG (150 KB)           Large file (5 MB)
Dialup modem (56 Kbit/sec)                  2.19                          5.85                 21.94                         748.98
DSL (256 Kbit/sec)                          .48                           1.28                 4.80                          163.84
T1 (1.4 Mbit/sec)                           .09                           .23                  .85                           29.13
Slow Ethernet (10 Mbit/sec)                 .01                           .03                  .12                           4.19
DS3 (45 Mbit/sec)                           .00                           .01                  .03                           .93
Fast Ethernet (100 Mbit/sec)                .00                           .00                  .01                           .42* This table shows just the effect of network bandwidth on transfer time. It assumes 100% network efficiencyandnonetworkorapplicationprocessinglatencies.Inthisway,thedelayisalowerbound.Realdelayswillbe larger, and the delays for small objects will be dominated by non-bandwidth overheads.|

Flash Crowds
Caching is especially important to break up flash crowds. Flash crowds occur when asudden event (such as breaking news, a bulk email announcement, or a celebrityevent) causes many people to access a web document at nearly the same time(Figure 7-2). The resulting redundant traffic spike can cause a catastrophic collapseof networks and web servers.
Chicago
San                             Boston
Francisco
Los Angeles                    Flash crowd
Atlanta
Figure 7-2. Flash crowds can overload web servers
When the “Starr Report” detailing Kenneth Starr’s investigation of U.S. President
Clinton was released to the Internet on September 11, 1998, the U.S. House of Rep-resentatives web servers received over 3 million requests per hour, 50 times the aver-age server load. One news web site, CNN.com, reported an average of over 50,000requests every second to its servers.
Distance Delays
Even if bandwidth isn’t a problem, distance might be. Every network router addsdelays to Internet traffic. And even if there are not many routers between client andserver, the speed of light alone can cause a significant delay.
Thedirect distance from Boston to San Francisco is about 2,700 miles. In the very bestcase, at the speed of light (186,000 miles/sec), a signal could travel from Boston to San*
Francisco in about 15 milliseconds and complete a round trip in 30 milliseconds.* In reality, signals travel at somewhat less than the speed of light, so distance delays are even worse.|

Say a web page contains 20 small images, all located on a server in San Francisco. If aclient in Boston opens four parallel connections to the server, and keeps the connec-tions alive, the speed of light alone contributes almost 1/4 second (240 msec) to thedownload time (Figure 7-3). If the server is in Tokyo (6,700 miles from Boston), thedelay grows to 600 msec. Moderately complicated web pages can incur several sec-onds of speed-of-light delays.
Connection 1             Connection 2             Connection 3              Connection 4
Connect r30 msec    equest
Client in Boston
OK                        Server in San Francisco
GET w30 msec  eb page                   speed of light        30 msec round tripeb page
W
C                        C                         C
GET image 1              onnect r                 onnect r                  onnect r30 msec                  30 msec    equest         30 msec    equest         30 msec   equest
Speed of lighimage 1                    OK                       OK                        OK
GET image 2              GET image 3               GET image 4              GET image 530 msec                  30 msec                   30 msec                   30 msec240 msect dela    image 2                  image 3                  image 4                   image 5
GET image 6              GET image 7               GET image 8              GET image 9y    30 msec                  30 msec                   30 msec                   30 msecimage 6                  image 7                  image 8                   image 9
GET image 10             GET image 11             GET image 12              GET image 1330 msec                  30 msec                   30 msec                   30 msecimage 10                 image 11                  image 12                  image 13
GET image 14             GET image 15             GET image 16              GET image 1730 msec                  30 msec                   30 msec                   30 msecimage 14                 image 15                  image 16                  image 17
GET image 18             GET image 19             GET image 20              GET image 2130 msec                  30 msec                   30 msec                   30 msecimage 18                 image 19                  image 20                  image 21
Figure 7-3. Speed of light can cause significant delays, even with parallel, keep-alive connections
Placing caches in nearby machine rooms can shrink document travel distance fromthousands of miles to tens of yards.
Hits and Misses
So caches can help. But a cache doesn’t store a copy of every document in the*world.* FewfolkscanaffordtobuyacachebigenoughtoholdalltheWeb’sdocuments.Andevenifyoucouldaffordgigantic“whole-Webcaches,”somedocumentschangesofrequentlythattheywon’tbefreshinmanycaches.|

Some requests that arrive at a cache can be served from an available copy. This iscalled a cache hit (Figure 7-4a). Other requests arrive at a cache only to be forwardedto the origin server, because no copy is available. This is called a cache miss(Figure 7-4b).(a ) Cache hit
Cacheobject
Client                        Cache                         Server(b ) Cache miss
Server                          Serverobject                          object
Client                        Cache                         Server(c ) Cache revalidate hit
Freshness check
Cache                         “Still fresh”object
Client                        Cache                         Server
Figure 7-4. Cache hits, misses, and revalidations
Revalidations
Because the origin server content can change, caches have to check every now andthen that their copies are still up-to-date with the server. These “freshness checks”are called HTTP revalidations (Figure 7-4c). To make revalidations efficient, HTTPdefines special requests that can quickly check if content is still fresh, without fetch-ing the entire object from the server.
Acachecanrevalidate a copy any time it wants, and as often as it wants. But becausecaches often contain millions of documents, and because network bandwidth isscarce, most caches revalidate a copy only when it is requested by a client and whenthe copy is old enough to warrant a check. We’ll explain the HTTP rules for fresh-ness checking later in the chapter.
Whenacacheneedstorevalidateacachedcopy,itsendsasmallrevalidation requestto the origin server. If the content hasn’t changed, the server responds with a tiny304 Not Modified response. As soon as the cache learns the copy is still valid, itmarks the copy temporarily fresh again and serves the copy to the client(Figure 7-5a). This is called a revalidate hit or a slow hit. It’s slower than a pure cachehit, because it does need to check with the origin server, but it’s faster than a cachemiss, because no object data is retrieved from the server.|
(a) Revalidate hit (slow hit)
Freshness check
Cacheobject                              “Still fresh”
Client                              Cache                                Server
Server object same as cached copy(b) Revalidate miss
Freshness check
Server Serverobject object
Client                              Cache                                Server
Cached copy is out of date
Figure 7-5. Successful revalidations are faster than cache misses; failed revalidations are nearlyidentical to misses
HTTPgives us a few tools to revalidate cached objects, but the most popular is the
If-Modified-Since header. When added to a GET request, this header tells the serverto send the object only if it has been modified since the time the copy was cached.
Here is what happens when a GET If-Modified-Since request arrives at the server inthree circumstances—when the server content is not modified, when the server con-tent has been changed, and when the object on the server is deleted:
Revalidate hit
If the server object isn’t modified, the server sends the client a small HTTP 304
Not Modified response. This is depicted in Figure 7-6.
Revalidate request with If-Modified-Since
GET /announce.html HTTP/1.0
If-Modified-Since: Sat, 29 Jun 2002, 14:30:00 GMT
Cache                           Server(browser cache or                           HTTP/1.0 304 Not Modifiedproxy cache)                              Date: Wed, 03 Jul 2002, 19:18:23 GMT
Content-type: text/plain
Content-length: 67
Expires: Fri, 05 Jul 2002, 05:00:00 GMT“Still fresh” response
Figure 7-6. HTTP uses If-Modified-Since header for revalidation
Revalidate miss
If the server object is different from the cached copy, the server sends the client anormal HTTP 200 OK response, with the full content.|

Object deleted
If the server object has been deleted, the server sends back a 404 Not Foundresponse, and the cache deletes its copy.
Hit Rate
The fraction of requests that are served from cache is called the cache hit rate (orcache hit ratio),* or sometimes the document hit rate (or document hit ratio). The hitrate ranges from 0 to 1 but is often described as a percentage, where 0% means thatevery request was a miss (had to get the document across the network), and 100%†means every request was a hit (had a copy in the cache).
Cache administrators would like the cache hit rate to approach 100%. The actual hitrate you get depends on how big your cache is, how similar the interests of the cacheusers are, how frequently the cached data is changing or personalized, and how thecaches are configured. Hit rate is notoriously difficult to predict, but a hit rate of40% is decent for a modest web cache today. The nice thing about caches is thateven a modest-sized cache may contain enough popular documents to significantlyimprove performance and reduce traffic. Caches work hard to ensure that useful con-tent stays in the cache.
Byte Hit Rate
Document hit rate doesn’t tell the whole story, though, because documents are notall the same size. Some large objects might be accessed less often but contributemore to overall data traffic, because of their size. For this reason, some people pre-fer the byte hit rate metric (especially those folks who are billed for each byte oftraffic!).
Thebytehit rate represents the fraction of all bytes transferred that were served fromcache. This metric captures the degree of traffic savings. A byte hit rate of 100%means every byte came from the cache, and no traffic went out across the Internet.
Document hit rate and byte hit rate are both useful gauges of cache performance.
Document hit rate describes how many web transactions are kept off the outgoingnetwork. Because transactions have a fixed time component that can often be large(setting up a TCP connection to a server, for example), improving the document hitrate will optimize for overall latency (delay) reduction. Byte hit rate describes howmany bytes are kept off the Internet. Improving the byte hit rate will optimize forbandwidth savings.* The term “hit ratio” probably is better than “hit rate,” because “hit rate” mistakenly suggests a time factor.
However, “hit rate” is in common use, so we use it here.†Sometimes people include revalidate hits in the hit rate, but other times hit rate and revalidate hit rate aremeasured separately. When you are examining hit rates, be sure you know what counts as a “hit.”|

Distinguishing Hits and Misses
Unfortunately, HTTP provides no way for a client to tell if a response was a cache hitor an origin server access. In both cases, the response code will be 200 OK, indicat-ing that the response has a body. Some commercial proxy caches attach additionalinformation to Via headers to describe what happened in the cache.
One way that a client can usually detect if the response came from a cache is to usethe Date header. By comparing the value of the Date header in the response to thecurrent time, a client can often detect a cached response by its older date value.
Another way a client can detect a cached response is the Age header, which tells howold the response is (see “Age” in Appendix C).
Cache Topologies
Caches can be dedicated to a single user or shared between thousands of users. Dedi-cated caches are called private caches. Private caches are personal caches, containingpopular pages for a single user (Figure 7-7a). Shared caches are called public caches.
Public caches contain the pages popular in the user community (Figure 7-7b).(a ) Accessing private cache
Internet
Client                  Private cache                         Web server(b ) Accessing shared public cache
Client   Internet
Web server
Client                   Public cache
Figure 7-7. Public and private caches
Private Caches
Private caches don’t need much horsepower or storage space, so they can be madesmall and cheap. Web browsers have private caches built right in—most browserscache popular documents in the disk and memory of your personal computer andallow you to configure the cache size and settings. You also can peek inside thebrowser caches to see what they contain. For example, with Microsoft Internet|

Explorer, you can get the cache contents from the Tools ➝ Internet Options... dia-log box. MSIE calls the cached documents “Temporary Files” and lists them in a filedisplay, along with the associated URLs and document expiration times. You canview Netscape Navigator’s cache contents through the special URL about:cache,which gives you a “Disk Cache statistics” page showing the cache contents.
Public Proxy Caches
Public caches are special, shared proxy servers called caching proxy servers or, morecommonly, proxy caches (proxies were discussed in Chapter 6). Proxy caches servedocuments from the local cache or contact the server on the user’s behalf. Because apublic cache receives accesses from multiple users, it has more opportunity to elimi-*nate redundant traffic.
In Figure 7-8a, each client redundantly accesses a new, “hot” document (not yet inthe private cache). Each private cache fetches the same document, crossing the net-work multiple times. With a shared, public cache, as in Figure 7-8b, the cache needsto fetch the popular object only once, and it uses the shared copy to service allrequests, reducing network traffic.
Proxy caches follow the rules for proxies described in Chapter 6. You can configureyour browser to use a proxy cache by specifying a manual proxy or by configuring aproxyauto-configuration file (see “Client Proxy Configuration: Manual” in Chapter 6).
You also can force HTTP requests through caches without configuring your browserby using intercepting proxies (see Chapter 20).
Proxy Cache Hierarchies
In practice, it often makes sense to deploy hierarchies of caches, where cache misses insmaller caches are funneled to larger parent caches that service the leftover “distilled”traffic. Figure 7-9 shows a two-level cache hierarchy.† The idea is to use small, inex-pensive caches near the clients and progressively larger, more powerful caches up thehierarchy to hold documents shared by many users.‡
Hopefully, most users will get cache hits on the nearby, level-1 caches (as shown in
Figure 7-9a). If not, larger parent caches may be able to handle their requests(Figure 7-9b). For deep cache hierarchies it’s possible to go through long chains of* Becauseapubliccachecachesthediverseinterestsoftheusercommunity,itneedstobelargeenoughtoholda set of popular documents, without being swept clean by individual user interests.†If the clients are browsers with browser caches, Figure 7-9 technically shows a three-level cache hierarchy.‡Parent caches may need to be larger, to hold the documents popular across more users, and higher-performance, because they receive the aggregate traffic of many children, whose interests may be diverse.|
(a) Redundant accesses from private caches
Client               Internet
Client
Server
Client(b) Shared caches can reduce traffic
Client                             Internet
Client
Cache
Server
Client
Figure 7-8. Shared, public caches can decrease network trafficcaches, but each intervening proxy does impose some performance penalty that can*become noticeable as the proxy chain becomes long.
Cache Meshes, Content Routing, and Peering
Somenetwork architects build complex cache meshes instead of simple cache hierar-chies. Proxy caches in cache meshes talk to each other in more sophisticated ways,and make dynamic cache communication decisions, deciding which parent caches totalk to, or deciding to bypass caches entirely and direct themselves to the originserver. Such proxy caches can be described as content routers, because they makerouting decisions about how to access, manage, and deliver content.
Caches designed for content routing within cache meshes may do all of the follow-ing (among other things):• Select between a parent cache or origin server dynamically, based on the URL.• Select a particular parent cache dynamically, based on the URL.* In practice, network architects try to limit themselves to two or three proxies in a row. However, a new gen-eration of high-performance proxy servers may make proxy-chain length less of an issue.|

Origin server                          Origin server                           Origin server
Wide area                               Wide area                              Wide areanetwork                                networknetwork
X     X
Level-2 cache                          Level-2 cache                           Level-2 cache
Regional network                       Regional network                       Regional network
X      Level-1   X                      X     Level-1                                Level-1    Xcache  cache cache(a) Level-1 cache hit                  (b) Level-2 cache hit                   (c) Level-2 cache miss
Figure 7-9. Accessing documents in a two-level cache hierarchy• Search caches in the local area for a cached copy before going to a parent cache.• Allow other caches to access portions of their cached content, but do not permit
Internet transit through their cache.
These more complex relationships between caches allow different organizations topeer with each other, connecting their caches for mutual benefit. Caches that pro-vide selective peering support are called sibling caches (Figure 7-10). Because HTTPdoesn’t provide sibling cache support, people have extended HTTP with protocols,such as the Internet Cache Protocol (ICP) and the HyperText Caching Protocol(HTCP). We’ll talk about these protocols in Chapter 20.
Cache Processing Steps
Modern commercial proxy caches are quite complicated. They are built to be veryhigh-performance and to support advanced features of HTTP and other technologies.
But, despite some subtle details, the basic workings of a web cache are mostly simple.
Abasic cache-processing sequence for an HTTP GET message consists of seven steps(illustrated in Figure 7-11):1. Receiving—Cache reads the arriving request message from the network.2. Parsing—Cache parses the message, extracting the URL and headers.|

X
Y
Origin server
B’s access point                            A’s access point
Wide areanetwork
Sibling                X
Organization A                Organization B
Figure 7-10. Sibling caches3. Lookup—Cache checks if a local copy is available and, if not, fetches a copy(and stores it locally).4. Freshness check—Cache checks if cached copy is fresh enough and, if not, asksserver for any updates.5. Response creation—Cache makes a response message with the new headers andcached body.6. Sending—Cache sends the response back to the client over the network.7. Logging—Optionally, cache creates a log file entry describing the transaction.
Step 1: Receiving
In Step 1, the cache detects activity on a network connection and reads the incomingdata. High-performance caches read data simultaneously from multiple incoming con-nections and begin processing the transaction before the entire message has arrived.
Step 2: Parsing
Next, the cache parses the request message into pieces and places the header parts ineasy-to-manipulate data structures. This makes it easier for the caching software to*process the header fields and fiddle with them.* The parser also is responsible for normalizing the parts of the header so that unimportant differences, likecapitalization or alternate date formats, all are viewed equivalently. Also, because some request messagescontain a full absolute URL and other request messages contain a relative URL and Host header, the parsertypically hides these details (see “Relative URLs” in Chapter 2).|

GET /www.joes-hardware.com/index.html HTTP/1.1
User-agent: Superbrowser 2.0
Host: www.joes-hardware.com
Accept: *.*(1) Receive HTTP request message(2) Parse message                             (3) In cache?(5) Create response headers
Client         NEW                      Server         YES    Server               Serverheaders                  headers                headers
Body          YES        Body                   Body(4) Is fresh?          Cache(6) Send response
HTTP/1.1 200 OK
Content-length: 2140
Content-type: text/html
Cache-control: max-age=86400
Age: 21562
Via: ...<HEAD><TITLE>Joe’s Hardware Home Page</TITLE></HEAD><BODY><H1>Welcome to Joe’s Hardware</H1>...
Figure 7-11. Processing a fresh cache hit
Step 3: Lookup
In Step 3, the cache takes the URL and checks for a local copy. The local copymight be stored in memory, on a local disk, or even in another nearby computer.
Professional-grade caches use fast algorithms to determine whether an object isavailable in the local cache. If the document is not available locally, it can be fetchedfrom the origin server or a parent proxy, or return a failure, based on the situationand configuration.
Thecachedobject contains the server response body and the original server responseheaders, so the correct server headers can be returned during a cache hit. The cachedobject also includes some metadata, used for bookkeeping how long the object has*been sitting in the cache, how many times it was used, etc.
Step 4: Freshness Check
HTTP lets caches keep copies of server documents for a period of time. During thistime, the document is considered “fresh” and the cache can serve the document with-out contacting the server. But once the cached copy has sat around for too long, pastthe document’s freshness limit, the object is considered “stale,” and the cache needs to* Sophisticatedcachesalsokeepacopyoftheoriginalclientresponseheadersthatyieldedtheserverresponse,for use in HTTP/1.1 content negotiation (see Chapter 17).|
revalidate with the server to check for any document changes before serving it. Com-plicating things further are any request headers that a client sends to a cache, whichthemselves can force the cache to either revalidate or avoid validation altogether.
HTTPhasasetofvery complicated rules for freshness checking, made worse by thelarge number of configuration options cache products support and by the need tointeroperate with non-HTTP freshness standards. We’ll devote most of the rest ofthis chapter to explaining freshness calculations.
Step 5: Response Creation
Because we want the cached response to look like it came from the origin server, thecache uses the cached server response headers as the starting point for the responseheaders. These base headers are then modified and augmented by the cache.
The cache is responsible for adapting the headers to match the client. For example,the server may return an HTTP/1.0 response (or even an HTTP/0.9 response), whilethe client expects an HTTP/1.1 response, in which case the cache must translate theheaders accordingly. Caches also insert cache freshness information (Cache-Control,
Age, and Expires headers) and often include a Via header to note that a proxy cacheserved the request.
Note that the cache should not adjust the Date header. The Date header representsthe date of the object when it was originally generated at the origin server.
Step 6: Sending
Once the response headers are ready, the cache sends the response back to the cli-ent. Like all proxy servers, a proxy cache needs to manage the connection with theclient. High-performance caches work hard to send the data efficiently, often avoid-ing copying the document content between the local storage and the network I/Obuffers.
Step 7: Logging
Mostcaches keep log files and statistics about cache usage. After each cache transac-tion is complete, the cache updates statistics counting the number of cache hits andmisses (and other relevant metrics) and inserts an entry into a log file showing therequest type, URL, and what happened.
The most popular cache log formats are the Squid log format and the Netscapeextended common log format, but many cache products allow you to create customlog files. We discuss log file formats in detail in Chapter 21.|

Cache Processing Flowchart
Figure 7-12shows, in simplified form, how a cache processes a request to GET a*
URL.
Request arrives
Cached?         noyes
Fresh enough?      no      Revalidate with server          Revalidated?      no     Fetch from serveryes                      yes
Update freshness            Store into cacheof cached document
Serve to client
Figure 7-12. Cache GET request flowchart
Keeping Copies Fresh
Cached copies might not all be consistent with the documents on the server. Afterall, documents do change over time. Reports might change monthly. Online newspa-pers change daily. Financial data may change every few seconds. Caches would beuseless if they always served old data. Cached data needs to maintain some consis-tency with the server data.
HTTP includes simple mechanisms to keep cached data sufficiently consistent withservers, without requiring servers to remember which caches have copies of theirdocuments. HTTP calls these simple mechanisms document expiration and serverrevalidation.
Document Expiration
HTTPlets an origin server attach an “expiration date” to each document, using spe-cial HTTP Cache-Control and Expires headers (Figure 7-13). Like an expiration dateon a quart of milk, these headers dictate how long content should be viewed as fresh.* The revalidation and fetching of a resource as outlined in Figure 7-12can be done in one step with a condi-tional request (see “Revalidation with Conditional Methods”).|

HTTP/1.0 200 OK   HTTP/1.0 200 OK
Date: Sat, 29 Jun 2002, 14:30:00 GMT               Date: Sat, 29 Jun 2002, 14:30:00 GMT
Content-type: text/plain                           Content-type: text/plain
Content-length: 67Content-length: 67
Expires: Fri, 05 Jul 2002, 05:00:00 GMT            Cache-Control: max-age=484200
Independence Day sale at Joe's Hardware            Independence Day sale at Joe's Hardware
Come shop with us today!                           Come shop with us today!(a) Expires header                          (b) Cache-Control: max-age header
Figure 7-13. Expires and Cache Control headers
Until a cache document expires, the cache can serve the copy as often as it wants,without ever contacting the server—unless, of course, a client request includesheaders that prevent serving a cached or unvalidated resource. But, once the cacheddocument expires, the cache must check with the server to ask if the document haschanged and, if so, get a fresh copy (with a new expiration date).
Expiration Dates and Ages
Servers specify expiration dates using the HTTP/1.0+ Expires or the HTTP/1.1
Cache-Control: max-age response headers, which accompany a response body. The
Expires and Cache-Control: max-age headers do basically the same thing, but thenewer Cache-Control header is preferred, because it uses a relative time instead of anabsolute date. Absolute dates depend on computer clocks being set correctly.
Table 7-2 lists the expiration response headers.
Table 7-2. Expiration response headers
Header                    Description
Cache-Control: max-age    The max-age value defines the maximum age of the document—the maximum legal elapsedtime(inseconds)fromwhenadocumentisfirstgeneratedtowhenitcannolongerbeconsideredfresh enough to serve.
Cache-Control: max-age=484200
Expires                   Specifies an absolute expiration date. If the expiration date is in the past, the document is nolonger fresh.
Expires: Fri, 05 Jul 2002, 05:00:00 GMT
Let’s say today is June 29, 2002 at 9:30 am Eastern Standard Time (EST), and Joe’s
Hardware store is getting ready for a Fourth of July sale (only five days away). Joewants to put a special web page on his web server and set it to expire at midnight
EST on the night of July 5, 2002. If Joe’s server uses the older-style Expires headers,the server response message (Figure 7-13a) might include this header:*
Expires: Fri, 05 Jul 2002, 05:00:00 GMT* NotethatallHTTPdatesandtimesareexpressedinGreenwichMeanTime(GMT).GMTisthetimeattheprimemeridian(0˚longitude)thatpassesthroughGreenwich,UK.GMTisfivehoursaheadofU.S.Eastern
Standard Time, so midnight EST is 05:00 GMT.|

If Joe’s server uses the newer Cache-Control: max-age headers, the server responsemessage (Figure 7-13b) might contain this header:
Cache-Control: max-age=484200
In case that wasn’t immediately obvious, 484,200 is the number of seconds betweenthe current date, June 29, 2002 at 9:30 am EST, and the sale end date, July 5, 2002 atmidnight. There are 134.5 hours (about 5 days) until the sale ends. With 3,600 sec-onds in each hour, that leaves 484,200 seconds until the sale ends.
Server Revalidation
Just because a cached document has expired doesn’t mean it is actually differentfrom what’s living on the origin server; it just means that it’s time to check. This iscalled “server revalidation,” meaning the cache needs to ask the origin serverwhether the document has changed:• If revalidation shows the content has changed, the cache gets a new copy of thedocument, stores it in place of the old data, and sends the document to the client.• If revalidation shows the content has not changed, the cache only gets new head-ers, including a new expiration date, and updates the headers in the cache.
This is a nice system. The cache doesn’t have to verify a document’s freshness forevery request—it has to revalidate with the server only once the document hasexpired. This saves server traffic and provides better user response time, withoutserving stale content.
The HTTP protocol requires a correctly behaving cache to return one of the following:• A cached copy that is “fresh enough”• A cached copy that has been revalidated with the server to ensure it’s still fresh• An error message, if the origin server to revalidate with is down*• A cached copy, with an attached warning that it might be incorrect
Revalidation with Conditional Methods
HTTP’s conditional methods make revalidation efficient. HTTP allows a cache tosend a “conditional GET” to the origin server, asking the server to send back anobject body only if the document is different from the copy currently in the cache. Inthis manner, the freshness check and the object fetch are combined into a single con-ditional GET. Conditional GETs are initiated by adding special conditional headers to
GET request messages. The web server returns the object only if the condition is true.* If the origin server is not accessible, but the cache needs to revalidate, the cache must return an error or awarningdescribingthecommunicationfailure.Otherwise,pagesfromaremovedservermayliveinnetworkcaches for an arbitrary time into the future.|

HTTP defines five conditional request headers. The two that are most useful forcache revalidation are If-Modified-Since and If-None-Match.* All conditional head-ers begin with the prefix “If-”. Table 7-3 lists the conditional response headers usedin cache revalidation.
Table 7-3. Two conditional headers used in cache revalidation
Header                          Description
If-Modified-Since:              Performtherequestedmethodifthedocumenthasbeenmodifiedsincethespecifieddate.This<date>                          is used in conjunction with the Last-Modified server response header, to fetch content only ifthe content has been modified from the cached version.
If-None-Match:<tags>            Instead of matching on last-modified date, the server may provide special tags (see “ETag” in
AppendixC)onthedocumentthatactlikeserialnumbers.TheIf-None-Matchheaderperformsthe requested method if the cached tags differ from the tags in the server’s document.
If-Modiﬁed-Since: Date Revalidation
The most common cache revalidation header is If-Modified-Since. If-Modified-Sincerevalidation requests often are called “IMS” requests. IMS requests instruct a serverto perform the request only if the resource has changed since a certain date:• If the document was modified since the specified date, the If-Modified-Sincecondition is true, and the GET succeeds normally. The new document isreturned to the cache, along with new headers containing, among other informa-tion, a new expiration date.• If the document was not modified since the specified date, the condition is false,and a small 304 Not Modified response message is returned to the client, with-out a document body, for efficiency.† Headers are returned in the response;however, only the headers that need updating from the original need to bereturned. For example, the Content-Type header does not usually need to besent, since it usually has not changed. A new expiration date typically is sent.
The If-Modified-Since header works in conjunction with the Last-Modified serverresponse header. The origin server attaches the last modification date to served docu-ments. When a cache wants to revalidate a cached document, it includes an If-Modi-fied-Since header with the date the cached copy was last modified:
If-Modified-Since: <cached last-modified date>* Other conditional headers include If-Unmodified-Since (useful for partial document transfers, when youneedtoensurethedocumentisunchangedbeforeyoufetchanotherpieceofit),If-Range(tosupportcachingof incomplete documents), and If-Match (useful for concurrency control when dealing with web servers).†Ifanoldserverthatdoesn’trecognizetheIf-Modified-Sinceheadergetstheconditionalrequest,itinterpretsit as a normal GET. In this case, the system will still work, but it will be less efficient due to unnecessarytransmittal of unchanged document data.|

If the content has changed in the meantime, the last modification date will be differ-ent, and the origin server will send back the new document. Otherwise, the serverwill note that the cache’s last-modified date matches the server document’s currentlast-modified date, and it will return a 304 Not Modified response.
For example, as shown in Figure 7-14, if your cache revalidates Joe’s Hardware’s
Fourth of July sale announcement on July 3, you will receive back a Not Modifiedresponse (Figure 7-14a). But if your cache revalidates the document after the saleends at midnight on July 5, the cache will receive a new document, because theserver content has changed (Figure 7-14b).
Conditional request
GET /announce.html HTTP/1.0
If-Modified-Since: Sat, 29 Jun 2002, 14:30:00 GMT
Client             HTTP/1.0 304 Not Modified      Server
Date: Wed, 03 Jul 2002, 19:18:23 GMT
Expires: Fri, 05 Jul 2002, 14:30:00 GMT
Response(a) If-Modified-Since successful revalidation
Conditional request
GET /announce.html HTTP/1.0
If-Modified-Since: Sat, 29 Jun 2002, 14:30:00 GMT
Client             HTTP/1.0 200 OK                Server
Date: Fri, 05 Jul 2002, 17:54:40 GMT
Content-type: text/plain
Content-length: 124
Expires: Mon, 09 Sep 2002, 05:00:00 GMT
All exterior house paint on sale through
Labor Day. Just another reason for youto shop this summer at Joe's Hardware!
Response(b) If-Modified-Since failed revalidation
Figure 7-14. If-Modified-Since revalidations return 304 if unchanged or 200 with new body ifchanged
Note that some web servers don’t implement If-Modified-Since as a true date com-parison. Instead, they do a string match between the IMS date and the last-modifieddate. As such, the semantics behave as “if not last modified on this exact date”instead of “if modified since this date.” This alternative semantic works fine for|
cache expiration, when you are using the last-modified date as a kind of serial num-ber, but it prevents clients from using the If-Modified-Since header for true time-based purposes.
If-None-Match: Entity Tag Revalidation
There are some situations when the last-modified date revalidation isn’t adequate:• Some documents may be rewritten periodically (e.g., from a background pro-cess) but actually often contain the same data. The modification dates willchange, even though the content hasn’t.• Some documents may have changed, but only in ways that aren’t importantenough to warrant caches worldwide to reload the data (e.g., spelling or com-ment changes).• Some servers cannot accurately determine the last modification dates of theirpages.• For servers that serve documents that change in sub-second intervals (e.g. real-time monitors), the one-second granularity of modification dates might not beadequate.
To get around these problems, HTTP allows you to compare document “versionidentifiers” called entity tags (ETags). Entity tags are arbitrary labels (quoted strings)attached to the document. They might contain a serial number or version name forthe document, or a checksum or other fingerprint of the document content.
Whenthepublisher makes a document change, he can change the document’s entitytag to represent this new version. Caches can then use the If-None-Match condi-tional header to GET a new copy of the document if the entity tags have changed.
In Figure 7-15, the cache has a document with entity tag “v2.6”. It revalidates withthe origin server asking for a new object only if the tag “v2.6” no longer matches. In
Figure 7-15, the tag still matches, so a 304 Not Modified response is returned.
Conditional request
GET /announce.html HTTP/1.0
If-None-Match: "v2.6"
ETag: “v2.6”                            ETag: “v2.6”
Cache                     HTTP/1.0 304 Not Modified                     Server
Date: Wed, 03 Jul 2002, 19:18:23 GMT
ETag: "v2.6"
Expires: Fri, 05 Jul 2002, 05:00:00 GMT
Response
Figure 7-15. If-None-Match revalidates because entity tag still matches|

If the entity tag on the server had changed (perhaps to “v3.0”), the server wouldreturn the new content in a 200 OK response, along with the content and new ETag.
Several entity tags can be included in an If-None-Match header, to tell the server thatthe cache already has copies of objects with those entity tags:
If-None-Match: "v2.6"
If-None-Match: "v2.4","v2.5","v2.6"
If-None-Match: "foobar","A34FAC0095","Profiles in Courage"
Weak and Strong Validators
Caches use entity tags to determine whether the cached version is up-to-date withrespect to the server (much like they use last-modified dates). In this way, entity tagsand last-modified dates both are cache validators.
Servers may sometimes want to allow cosmetic or insignificant changes to docu-ments without invalidating all cached copies. HTTP/1.1 supports “weak validators,”which allow the server to claim “good enough” equivalence even if the contents havechanged slightly.
Strong validators change any time the content changes. Weak validators allow somecontent change but generally change when the significant meaning of the contentchanges. Some operations cannot be performed using weak validators (such as condi-tional partial-range fetches), so servers identify validators that are weak with a “W/”prefix:
ETag: W/"v2.6"
If-None-Match: W/"v2.6"
Astrong entity tag must change whenever the associated entity value changes in anyway. A weak entity tag should change whenever the associated entity changes in asemantically significant way.
Note that an origin server must avoid reusing a specific strong entity tag value for twodifferent entities, or reusing a specific weak entity tag value for two semantically differ-ent entities. Cache entries might persist for arbitrarily long periods, regardless of expi-ration times, so it might be inappropriate to expect that a cache will never againattempt to validate an entry using a validator that it obtained at some point in the past.
When to Use Entity Tags and Last-Modiﬁed Dates
HTTP/1.1clients must use an entity tag validator if a server sends back an entity tag. Ifthe server sends back only a Last-Modified value, the client can use If-Modified-Sincevalidation. If both an entity tag and a last-modified date are available, the client shoulduse both revalidation schemes, allowing both HTTP/1.0 and HTTP/1.1 caches torespond appropriately.|

HTTP/1.1origin servers should send an entity tag validator unless it is not feasible togenerate one, and it may be a weak entity tag instead of a strong entity tag, if thereare benefits to weak validators. Also, it’s preferred to also send a last-modified value.
If an HTTP/1.1 cache or server receives a request with both If-Modified-Since andentity tag conditional headers, it must not return a 304 Not Modified responseunless doing so is consistent with all of the conditional header fields in the request.
Controlling Cachability
HTTP defines several ways for a server to specify how long a document can becached before it expires. In decreasing order of priority, the server can:• Attach a Cache-Control: no-store header to the response.• Attach a Cache-Control: no-cache header to the response.• Attach a Cache-Control: must-revalidate header to the response.• Attach a Cache-Control: max-age header to the response.• Attach an Expires date header to the response.• Attach no expiration information, letting the cache determine its own heuristicexpiration date.
This section describes the cache controlling headers. The next section, “Setting Cache
Controls,” describes how to assign different cache information to different content.
No-Cache and No-Store Response Headers
HTTP/1.1offers several ways to limit the caching of objects, or the serving of cachedobjects, to maintain freshness. The no-store and no-cache headers prevent cachesfrom serving unverified cached objects:
Cache-Control: no-store
Cache-Control: no-cache
Pragma: no-cache
A response that is marked "no-store" forbids a cache from making a copy of theresponse. A cache would typically forward a no-store response to the client, andthen delete the object, as would a non-caching proxy server.
Aresponse that is marked "no-cache" can actually be stored in the local cache stor-age. It just cannot be served from the cache to the client without first revalidatingthe freshness with the origin server. A better name for this header might be "do-not-serve-from-cache-without-revalidation."
The Pragma: no-cache header is included in HTTP/1.1 for backward compatibilitywith HTTP/1.0+. HTTP 1.1 applications should use Cache-Control: no-cache, except*when dealing with HTTP 1.0 applications, which understand only Pragma: no-cache.|

Max-Age Response Headers
The Cache-Control: max-age header indicates the number of seconds since it camefrom the server for which a document can be considered fresh. There is also an s-maxage header (note the absence of a hyphen in “maxage”) that acts like max-agebut applies only to shared (public) caches:
Cache-Control: max-age=3600
Cache-Control: s-maxage=3600
Servers can request that caches either not cache a document or refresh on everyaccess by setting the maximum aging to zero:
Cache-Control: max-age=0
Cache-Control: s-maxage=0
Expires Response Headers
ThedeprecatedExpiresheaderspecifies an actual expiration date instead of a time in sec-onds. The HTTP designers later decided that, because many servers have unsynchro-nized or incorrect clocks, it would be better to represent expiration in elapsed seconds,rather than absolute time. An analogous freshness lifetime can be calculated by comput-ing the number of seconds difference between the expires value and the date value:
Expires: Fri, 05 Jul 2002, 05:00:00 GMT
Some servers also send back an Expires: 0 response header to try to make docu-ments always expire, but this syntax is illegal and can cause problems with somesoftware. You should try to support this construct as input, but shouldn’t generate it.
Must-Revalidate Response Headers
Caches may be configured to serve stale (expired) objects, in order to improve per-formance. If an origin server wishes caches to strictly adhere to expiration informa-tion, it can attach a Cache-Control:
Cache-Control: must-revalidate
The Cache-Control: must-revalidate response header tells caches they cannot serve astale copy of this object without first revalidating with the origin server. Caches arestill free to serve fresh copies.                 If the origin server is unavailable when a cacheattempts a must-revalidate freshness check, the cache must return a 504 Gateway
Timeout error.* Pragmano-cacheistechnicallyvalidonlyforHTTPrequests,yetitiswidelyusedasanextensionheaderforboth HTTP erquests and responses.|

Heuristic Expiration
If the response doesn’t contain either a Cache-Control: max-age header or an Expiresheader, the cache may compute a heuristic maximum age. Any algorithm may beused, but if the resulting maximum age is greater than 24 hours, a Heuristic Expira-tion Warning (Warning 13) header should be added to the response headers. As faras we know, few browsers make this warning information available to users.
Onepopular heuristic expiration algorithm, the LM-Factor algorithm, can be used ifthe document contains a last-modified date. The LM-Factor algorithm uses the last-modified date as an estimate of how volatile a document is. Here’s the logic:• If a cached document was last changed in the distant past, it may be a stabledocument and less likely to change suddenly, so it is safer to keep it in the cachelonger.• If the cached document was modified just recently, it probably changes fre-quently, so we should cache it only a short while before revalidating with theserver.
The actual LM-Factor algorithm computes the time between when the cache talkedto the server and when the server said the document was last modified, takes somefraction of this intervening time, and uses this fraction as the freshness duration inthe cache. Here is some Perl pseudocode for the LM-factor algorithm:$time_since_modify = max(0, $server_Date - $server_Last_Modified);$server_freshness_limit = int($time_since_modify * $lm_factor);
Figure 7-16 depicts the LM-factor freshness period graphically. The cross-hatchedline indicates the freshness period, using an LM-factor of 0.2.20% of time between fetchand last modification(LM-factor= 0.2)                         Cached copy is fresh for          New expiration timetime period
Last modified              When cache talked                Timeto server
Figure 7-16. Computing a freshness period using the LM-Factor algorithm
Typically, people place upper bounds on heuristic freshness periods so they can’tgrow excessively large. A week is typical, though more conservative sites use a day.
Finally, if you don’t have a last-modified date either, the cache doesn’t have muchinformation to go on. Caches typically assign a default freshness period (an hour or aday is typical) for documents without any freshness clues. More conservative cachessometimes choose freshness lifetimes of 0 for these heuristic documents, forcing thecache to validate that the data is still fresh before each time it is served to a client.|

One last note about heuristic freshness calculations—they are more common thanyou might think. Many origin servers still don’t generate Expires and max-age head-ers. Pick your cache’s expiration defaults carefully!
Client Freshness Constraints
Web browsers have a Refresh or Reload button to forcibly refresh content, whichmight be stale in the browser or proxy caches. The Refresh button issues a GETrequest with additional Cache-control request headers that force a revalidation orunconditional fetch from the server. The precise Refresh behavior depends on theparticular browser, document, and intervening cache configurations.
Clients use Cache-Control request headers to tighten or loosen expiration con-straints. Clients can use Cache-control headers to make the expiration more strict,for applications that need the very freshest documents (such as the manual Refreshbutton). On the other hand, clients might also want to relax the freshness require-ments as a compromise to improve performance, reliability, or expenses. Table 7-4summarizes the Cache-Control request directives.
Table 7-4. Cache-Control request directives
Directive                           Purpose
Cache-Control: max-stale            The cache is free to serve a stale document. If the <s> parameter is specified, the docu-
Cache-Control: max-stale =          ment must not be stale by more than this amount of time. This relaxes the caching rules.<s>
Cache-Control: min-fresh =          The document must still be fresh for at least <s> seconds in the future. This makes the<s>caching rules more strict.
Cache-Control: max-age =<s>         The cache cannot return a document that has been cached for longer than<s> seconds.
This directive makes the caching rules more strict, unless the max-stale directive also isset, in which case the age can exceed its expiration time.
Cache-Control: no-cache             This client won’t accept a cached resource unless it has been revalidated.
Pragma: no-cache
Cache-Control: no-store             The cache should delete every trace of the document from storage as soon as possible,because it might contain sensitive information.
Cache-Control: only-if-cached       The client wants a copy only if it is in the cache.
Cautions
Document expiration isn’t a perfect system. If a publisher accidentally assigns anexpiration date too far in the future, any document changes she needs to make won’t*necessarily show up in all caches until the document has expired. For this reason,* Documentexpirationisaformof“timetolive”techniqueusedinmanyInternetprotocols,suchasDNS.DNS,like HTTP,hastroubleifyoupublishanexpirationdatefarinthefutureandthenfindthatyouneedtomakea change. However, HTTP provides mechanisms for a client to override and force a reloading, unlike DNS.|
manypublishers don’t use distant expiration dates. Also, many publishers don’t evenuse expiration dates, making it tough for caches to know how long the documentwill be fresh.
Setting Cache Controls
Different web servers provide different mechanisms for setting HTTP cache-controland expiration headers. In this section, we’ll talk briefly about how the popular
Apache web server supports cache controls. Refer to your web server documentationfor specific details.
Controlling HTTP Headers with Apache
The Apache web server provides several mechanisms for setting HTTP cache-controlling headers. Many of these mechanisms are not enabled by default—youhave to enable them (in some cases first obtaining Apache extension modules). Hereis a brief description of some of the Apache features:mod_headers
The mod_headers module lets you set individual headers. Once this module isloaded, you can augment the Apache configuration files with directives to setindividual HTTP headers. You also can use these settings in combination with
Apache’s regular expressions and filters to associate headers with individual con-tent. Here is an example of a configuration that could mark all HTML files in adirectory as uncachable:<Files *.html>
Header set Cache-control no-cache</Files>mod_expires
The mod_expires module provides program logic to automatically generate
Expires headers with the correct expiration dates. This module allows you to setexpiration dates for some time period after a document was last accessed or afterits last-modified date. The module also lets you assign different expiration datesto different file types and use convenient verbose descriptions, like “access plus 1month,” to describe cachability. Here are a few examples:
ExpiresDefault A3600
ExpiresDefault M86400
ExpiresDefault "access plus 1 week"
ExpiresByType text/html "modification plus 2 days 6 hours 12 minutes"mod_cern_meta
Themod_cern_metamoduleallowsyoutoassociateafileofHTTPheaderswithparticular objects. When you enable this module, you create a set of “metafiles,”one for each document you want to control, and add the desired headers to eachmetafile.|

Controlling HTML Caching Through HTTP-EQUIV
HTTP server response headers are used to carry back document expiration andcache-control information. Web servers interact with configuration files to assign thecorrect cache-control headers to served documents.
To make it easier for authors to assign HTTP header information to served HTMLdocuments without interacting with web server configuration files, HTML 2.0defined the <META HTTP-EQUIV> tag. This optional tag sits at the top of an
HTMLdocumentanddefinesHTTPheadersthatshouldbeassociatedwiththedoc-ument. Here is an example of a <META HTTP-EQUIV> tag set to mark the HTMLdocument uncachable:<HTML><HEAD><TITLE>My Document</TITLE><META HTTP-EQUIV="Cache-control" CONTENT="no-cache"></HEAD>...
This HTTP-EQUIVtagwasoriginally intended to be used by web servers. Web serv-ers were supposed to parse HTML for <META HTTP-EQUIV> tags and insert theprescribed headers into the HTTP response, as documented in HTML RFC 1866:
An HTTP server may use this information to process the document. In particular, itmay include a header field in the responses to requests for this document: the headername is taken from the HTTP-EQUIV attribute value, and the header value is takenfrom the value of the CONTENT attribute.
Unfortunately, few web servers and proxies support this optional feature because ofthe extra server load, the values being static, and the fact that it supports only HTMLand not the many other file types.
However, some browsers do parse and adhere to HTTP-EQUIV tags in the HTMLcontent, treating the embedded headers like real HTTP headers (Figure 7-17). This isunfortunate, because HTML browsers that do support HTTP-EQUIV may apply dif-ferent cache-control rules than intervening proxy caches. This causes confusingcache expiration behavior.
In general, <META HTTP-EQUIV> tags are a poor way of controlling documentcachability. The only sure-fire way to communicate cache-control requests for docu-ments is through HTTP headers sent by a properly configured server.
Detailed Algorithms
The HTTP specification provides a detailed, but slightly obscure and often confus-ing, algorithm for computing document aging and cache freshness. In this section,we’ll discuss the HTTP freshness computation algorithms in detail (the “Freshenough?” diamond in Figure 7-12) and explain the motivation behind them.|

HTML file<HTML><HEAD><META HTTP-EQUIV="Cache-control"
CONTENT="max-age=3600"><META HTTP-EQUIV="Content-type"
Some HTTP servers can be configured to parse HTML files for special                CONTENT="text/html; charset=utf-8"><META HTTP-EQUIV> tags. These metadata tags (in the HTML document)               </HEAD>describe HTTP headers that the author would like to be received by the client.   <BODY>
Unfortunately, most web servers don’t process HTTP-EQUIV tags, and even          Welcome to XYZ Industries, a<B>leader</B> in mechanical drillingfewer proxies do. This causes client caches to receive cache-control commands    machines for 30 years. Our new line ofthat proxy caches do not always see.            100% automated manufacturing tools setsthe standard for CAM, at a suprisinglylow price.
HTTP request                        </BODY>
GET /xyz.html HTTP/1.0
Client                           HTTP/1.0 200 OK                           Server
Date: Fri, 07 Apr 2002, 19:21:13 GMT
Content-length: 124
Cache-control: max-age=3600
Content-type: text/html; charset=utf-8<HTML><HEAD><META HTTP-EQUIV="Cache-control"
CONTENT="max-age=3600"<META HTTP-EQUIV="Content-type"
CONTENT="text/html; charset=utf-8"</HEAD><BODY>
Welcome to XYZ Industries, a <B>leader</B>in mechanical drilling machines for...
HTTP response
Some servers will insert HTTP-EQUIV specified headers intothe response header for proxies to see. Others servers will not.
Figure 7-17. HTTP-EQUIV tags cause problems, because most software ignores them
This section will be most useful to readers working with cache internals. To helpillustrate the wording in the HTTP specification, we will make use of Perlpseudocode. If you aren’t interested in the gory details of cache expiration formulas,feel free to skip this section.
Age and Freshness Lifetime
To tell whether a cached document is fresh enough to serve, a cache needs to com-pute only two values: the cached copy’s age and the cached copy’s freshness lifetime.
If the age of a cached copy is less than the freshness lifetime, the copy is fresh enoughto serve. In Perl:$is_fresh_enough = ($age < $freshness_lifetime);|

The age of the document is the total time the document has “aged” since it was sentfrom the server (or was last revalidated by the server).* Because a cache might notknowif a document response is coming from an upstream cache or a server, it can’tassume that the document is brand new. It must determine the document’s age,either from an explicit Age header (preferred) or by processing the server-generated
Date header.
The freshness lifetime of a document tells how old a cached copy can get before it isnolongerfreshenoughtoservetoclients.Thefreshnesslifetime takes into account theexpiration date of the document and any freshness overrides the client might request.
Someclients may be willing to accept slightly stale documents (using the Cache-Con-trol: max-stale header). Other clients may not accept documents that will becomestale in the near future (using the Cache-Control: min-fresh header). The cache com-bines the server expiration information with the client freshness requirements todetermine the maximum freshness lifetime.
Age Computation
The age of the response is the total time since the response was issued from theserver (or revalidated from the server). The age includes the time the response hasfloated around in the routers and gateways of the Internet, the time stored in inter-mediate caches, and the time the response has been resident in your cache.
Example7-1 provides pseudocode for the age calculation.
Example7-1.HTTP/1.1 age-calculation algorithm calculates the overall age of a cached document$apparent_age = max(0, $time_got_response - $Date_header_value);$corrected_apparent_age = max($apparent_age, $Age_header_value);$response_delay_estimate = ($time_got_response - $time_issued_request);$age_when_document_arrived_at_our_cache =$corrected_apparent_age + $response_delay_estimate;$how_long_copy_has_been_in_our_cache = $current_time - $time_got_response;$age = $age_when_document_arrived_at_our_cache +$how_long_copy_has_been_in_our_cache;
Theparticulars of HTTP age calculation are a bit tricky, but the basic concept is sim-ple. Caches can tell how old the response was when it arrived at the cache by exam-ining the Date or Age headers. Caches also can note how long the document hasbeen sitting in the local cache. Summed together, these values are the entire age ofthe response. HTTP throws in some magic to attempt to compensate for clock skewand network delays, but the basic computation is simple enough:$age = $age_when_document_arrived_at_our_cache +$how_long_copy_has_been_in_our_cache;* Remember that the server always has the most up-to-date version of any document.|

Acache can pretty easily determine how long a cached copy has been cached locally(a matter of simple bookkeeping), but it is harder to determine the age of a responsewhen it arrives at the cache, because not all servers have synchronized clocks andbecause we don’t know where the response has been. The complete age-calculationalgorithm tries to remedy this.
Apparent age is based on the Date header
If all computers shared the same, exactly correct clock, the age of a cached documentwould simply be the “apparent age” of the document—the current time minus thetime when the server sent the document. The server send time is simply the value ofthe Date header. The simplest initial age calculation would just use the apparent age:$apparent_age = $time_got_response - $Date_header_value;$age_when_document_arrived_at_our_cache = $apparent_age;
Unfortunately, not all clocks are well synchronized. The client and server clocks may*differ by many minutes, or even by hours or days when clocks are set improperly.
Web applications, especially caching proxies, have to be prepared to interact withservers with wildly differing clock values. The problem is called clock skew—the dif-ference between two computers’ clock settings. Because of clock skew, the apparentage sometimes is inaccurate and occasionally is negative.
If the age is ever negative, we just set it to zero. We also could sanity check that theapparent age isn’t ridiculously large, but large apparent ages might actually be cor-rect. We might be talking to a parent cache that has cached the document for a longtime (the cache also stores the original Date header):$apparent_age = max(0, $time_got_response - $Date_header_value);$age_when_document_arrived_at_our_cache = $apparent_age;
Be aware that the Date header describes the original origin server date. Proxies andcaches must not change this date!
Hop-by-hop age calculations
So, we can eliminate negative ages caused by clock skew, but we can’t do muchabout overall loss of accuracy due to clock skew. HTTP/1.1 attempts to work aroundthe lack of universal synchronized clocks by asking each device to accumulate rela-tive aging into an Age header, as a document passes through proxies and caches.
This way, no cross-server, end-to-end clock comparisons are needed.
The Age header value increases as the document passes through proxies. HTTP/1.1-aware applications should augment the Age header value by the time the document* The HTTPspecification recommends that clients, servers, and proxies use a time synchronization protocolsuch as NTP to enforce a consistent time base.|
sat in each application and in network transit. Each intermediate application can eas-ily compute the document’s resident time by using its local clock.
However, any non-HTTP/1.1 device in the response chain will not recognize the Ageheader and will either proxy the header unchanged or remove it. So, until HTTP/1.1is universally adopted, the Age header will be an underestimate of the relative age.
The relative age values are used in addition to the Date-based age calculation, andthe most conservative of the two age estimates is chosen, because either the cross-server Date value or the Age-computed value may be an underestimate (the mostconservative is the oldest age). This way, HTTP tolerates errors in Age headers aswell, while erring on the side of fresher content:$apparent_age = max(0, $time_got_response - $Date_header_value);$corrected_apparent_age = max($apparent_age, $Age_header_value);$age_when_document_arrived_at_our_cache = $corrected_apparent_age;
Compensating for network delays
Transactions can be slow. This is the major motivation for caching. But for very slownetworks, or overloaded servers, the relative age calculation may significantly under-estimate the age of documents if the documents spend a long time stuck in networkor server traffic jams.*
The Date header indicates when the document left the origin server, but it doesn’tsay how long the document spent in transit on the way to the cache. If the docu-ment came through a long chain of proxies and parent caches, the network delay†might be significant.
There is no easy way to measure one-way network delay from server to cache, but itis easier to measure the round-trip delay. A cache knows when it requested the docu-mentandwhenitarrived.HTTP/1.1conservatively corrects for these network delaysby adding the entire round-trip delay. This cache-to-server-to-cache delay is an over-estimate of the server-to-cache delay, but it is conservative. If it is in error, it will onlymake the documents appear older than they really are and cause unnecessary revali-dations. Here’s how the calculation is made:$apparent_age = max(0, $time_got_response - $Date_header_value);$corrected_apparent_age = max($apparent_age, $Age_header_value);$response_delay_estimate = ($time_got_response - $time_issued_request);$age_when_document_arrived_at_our_cache =$corrected_apparent_age + $response_delay_estimate;* Note that if the document came from a parent cache and not from an origin server, the Date header willreflect the date of the origin server, not of the parent cache.†Inpractice, this shouldn’t be more than a few tens of seconds (or users will abort), but the HTTP designerswanted to try to support accurate expiration of even of short-lifetime objects.|

Complete Age-Calculation Algorithm
Thelast section showed how to compute the age of an HTTP-carried document whenit arrives at a cache. Once this response is stored in the cache, it ages further. When arequest arrives for the document in the cache, we need to know how long the docu-ment has been resident in the cache, so we can compute the current document age:$age = $age_when_document_arrived_at_our_cache +$how_long_copy_has_been_in_our_cache;
Ta-da! This gives us the complete HTTP/1.1 age-calculation algorithm we presentedin Example 7-1. This is a matter of simple bookkeeping—we know when the docu-ment arrived at the cache ($time_got_response) and we know when the currentrequest arrived (right now), so the resident time is just the difference. This is allshown graphically in Figure 7-18.
Age of cached document
Server processing Server processing        Response’stime              time              network delaydate_value
Servercurrent_timecache resident timetime_issued_request            time_got_response
Cachetime_client_issued_request
Client
Figure 7-18. The age of a cached document includes resident time in the network and cache
Freshness Lifetime Computation
Recall that we’re trying to figure out whether a cached document is fresh enough toserve to a client. To answer this question, we must determine the age of the cacheddocument and compute the freshness lifetime based on server and client constraints.
We just explained how to compute the age; now let’s move on to freshness lifetimes.
Thefreshness lifetime of a document tells how old a document is allowed to get beforeit is no longer fresh enough to serve to a particular client. The freshness lifetime|
depends on server and client constraints. The server may have information about thepublication change rate of the document. Very stable, filed reports may stay fresh foryears. Periodicals may be up-to-date only for the time remaining until the next sched-uled publication—next week, or 6:00 am tomorrow.
Clients may have certain other guidelines. They may be willing to accept slightlystale content, if it is faster, or they might need the most up-to-date content possible.
Caches serve the users. We must adhere to their requests.
Complete Server-Freshness Algorithm
Example7-2showsaPerlalgorithm to compute server freshness limits. It returns themaximum age that a document can reach and still be served by the server.
Example7-2.Server freshness constraint calculationsub server_freshness_limit{local($heuristic,$server_freshness_limit,$time_since_last_modify);$heuristic = 0;if ($Max_Age_value_set){$server_freshness_limit = $Max_Age_value;}elsif ($Expires_value_set){$server_freshness_limit = $Expires_value - $Date_value;}elsif ($Last_Modified_value_set){$time_since_last_modify = max(0, $Date_value - $Last_Modified_value);$server_freshness_limit = int($time_since_last_modify * $lm_factor);$heuristic = 1;}else{$server_freshness_limit = $default_cache_min_lifetime;$heuristic = 1;}if ($heuristic){if ($server_freshness_limit > $default_cache_max_lifetime){ $server_freshness_limit = $default_cache_max_lifetime; }if ($server_freshness_limit < $default_cache_min_lifetime){ $server_freshness_limit = $default_cache_min_lifetime; }}return($server_freshness_limit);}|

Now let’s look at how the client can override the document’s server-specified agelimit. Example 7-3 shows a Perl algorithm to take a server freshness limit and mod-ify it by the client constraints. It returns the maximum age that a document canreach and still be served by the cache without revalidation.
Example7-3.Client freshness constraint calculationsub client_modified_freshness_limit{$age_limit = server_freshness_limit();   ## From Example 7-2if ($Max_Stale_value_set){if ($Max_Stale_value == $INT_MAX){ $age_limit = $INT_MAX; }else{ $age_limit = server_freshness_limit() + $Max_Stale_value; }}if ($Min_Fresh_value_set){$age_limit = min($age_limit, server_freshness_limit() - $Min_Fresh_value_set);}if ($Max_Age_value_set){$age_limit = min($age_limit, $Max_Age_value);}}
Thewholeprocessinvolves two variables: the document’s age and its freshness limit.
The document is “fresh enough” if the age is less than the freshness limit. The algo-rithm in Example 7-3 just takes the server freshness limit and slides it around basedon additional client constraints. We hope this section made the subtle expirationalgorithms described in the HTTP specifications a bit clearer.
Caches and Advertising
If you’ve made it this far, you’ve realized that caches improve performance andreduce traffic. You know caches can help users and give them a better experience,and you know caches can help network operators reduce their traffic.
The Advertiser’s Dilemma
You might also expect content providers to like caches. After all, if caches wereeverywhere, content providers wouldn’t have to buy big multiprocessor web serversto keep up with demand—and they wouldn’t have to pay steep network servicecharges to feed the same data to their viewers over and over again. And better yet,|
caches make the flashy articles and advertisements show up even faster and lookeven better on the viewer’s screens, encouraging them to consume more content andsee more advertisements. And that’s just what content providers want! More eye-balls and more advertisements!
But that’s the rub. Many content providers are paid through advertising—in particu-lar, they get paid every time an advertisement is shown to a user (maybe just a frac-tion of a penny or two, but they add up if you show a million ads a day!). And that’sthe problem with caches—they can hide the real access counts from the originserver. If caching was perfect, an origin server might not receive any HTTP accessesat all, because they would be absorbed by Internet caches. But, if you are paid onaccess counts, you won’t be celebrating.
The Publisher’s Response
Today, advertisers use all sorts of “cache-busting” techniques to ensure that cachesdon’t steal their hit stream. They slap no-cache headers on their content. They serveadvertisements through CGI gateways. They rewrite advertisement URLs on eachaccess.
And these cache-busting techniques aren’t just for proxy caches. In fact, today theyare targeted primarily at the cache that’s enabled in every web browser. Unfortu-nately, while over-aggressively trying to maintain their hit stream, some content pro-viders are reducing the positive effects of caching to their site.
In the ideal world, content providers would let caches absorb their traffic, and thecaches would tell them how many hits they got. Today, there are a few ways cachescan do this.
One solution is to configure caches to revalidate with the origin server on everyaccess. This pushes a hit to the origin server for each access but usually does not*transfer any body data. Of course, this slows down the transaction.
Log Migration
Oneideal solution wouldn’t require sending hits through to the server. After all, thecache can keep a log of all the hits. Caches could just distribute the hit logs to serv-ers. In fact, some large cache providers have been know to manually process andhand-deliver cache logs to influential content providers to keep the content provid-ers happy.* Some caches support a variant of this revalidation, where they do a conditional GET or a HEAD request inthe background. The user does not perceive the delay, but the request triggers an offline access to the originserver.Thisisanimprovement,butitplacesmoreloadonthecachesandsignificantlyincreasestrafficacrossthe network.|

Unfortunately, hit logs are large, which makes them tough to move. And cache logsare not standardized or organized to separate logs out to individual content provid-ers. Also, there are authentication and privacy issues.
Proposals have been made for efficient (and less efficient) log-redistribution schemes.
None are far enough developed to be adopted by web software vendors. Many are*extremely complex and require joint business partnerships to succeed. Several cor-porate ventures have been launched to develop supporting infrastructure for adver-tising revenue reclamation.
Hit Metering and Usage Limiting
RFC2227,“SimpleHit-MeteringandUsage-LimitingforHTTP,”definesamuchsim-pler scheme. This protocol adds one new header to HTTP, called Meter, that periodi-cally carries hit counts for particular URLs back to the servers. This way, servers getperiodic updates from caches about the number of times cached documents were hit.
In addition, the server can control how many times documents can be served fromcache, or a wall clock timeout, before the cache must report back to the server. Thisis called usage limiting; it allows servers to control how much a cached resource canbe used before it needs to report back to the origin server.
We’ll describe RFC 2227 in detail in Chapter 21.
For More Information
For more information on caching, refer to:http://www.w3.org/Protocols/rfc2616/rfc2616.txt
RFC2616,“HypertextTransferProtocol,” by R. Fielding, J. Gettys, J. Mogul, H.
Frystyk, L. Mastinter, P. Leach, and T. Berners-Lee.
Web Caching
Duane Wessels, O’Reilly & Associates, Inc.http://search.ietf.org/rfc/rfc3040.txt
RFC 3040, “Internet Web Replication and Caching Taxonomy.”
Web Proxy Servers
Ari Luotonen, Prentice Hall Computer Books.http://search.ietf.org/rfc/rfc3143.txt
RFC 3143, “Known HTTP Proxy/Caching Problems.”http://www.squid-cache.org
Squid Web Proxy Cache.* Several businesses have launched trying to develop global solutions for integrated caching and logging.|

CHAPTER 8
Integration Points: Gateways,
Tunnels, and Relays
The Web has proven to be an incredible tool for disseminating content. Over time,people have moved from just wanting to put static documents online to wanting toshare ever more complex resources, such as database content or dynamically gener-ated HTML pages. HTTP applications, like web browsers, have provided users witha unified means of accessing content over the Internet.
HTTPalso has come to be a fundamental building block for application developers,whopiggyback other protocols on top of HTTP (for example, using HTTP to tunnelor relay other protocol traffic through corporate firewalls, by wrapping that traffic in
HTTP).HTTPisusedasaprotocolforalloftheWeb’sresources,andit’salsoapro-tocol that other applications and application protocols make use of to get their jobsdone.
This chapter takes a general look at some of the methods that developers havecome up with for using HTTP to access different resources and examines howdevelopers use HTTP as a framework for enabling other protocols and applicationcommunication.
In this chapter, we discuss:• Gateways, which interface HTTP with other protocols and applications• Application interfaces, which allow different types of web applications to com-municate with one another• Tunnels, which let you send non-HTTP traffic over HTTP connections• Relays, which are a type of simplified HTTP proxy used to forward data one hopat a time
Gateways
The history behind HTTP extensions and interfaces was driven by people’s needs.
Whenthe desire to put more complicated resources on the Web emerged, it rapidlybecame clear that no single application could handle all imaginable resources.197
To get around this problem, developers came up with the notion of a gateway thatcould serve as a sort of interpreter, abstracting a way to get at the resource. A gate-wayis the glue between resources and applications. An application can ask (through
HTTP or some other defined interface) a gateway to handle the request, and thegateway can provide a response. The gateway can speak the query language to thedatabase or generate the dynamic content, acting like a portal: a request goes in, anda response comes out.
Figure 8-1 depicts a kind of resource gateway. Here, the Joe’s Hardware server is act-ing as a gateway to database content—note that the client is simply asking for aresource through HTTP, and the Joe’s Hardware server is interfacing with a gatewayto get at the resource.
Client is requesting:http://www.joes-hardware.com/query-db.cgi?newproducts
Request message
GET /query-db.cgi?newproducts HTTP/1.1
Host: www.joes-hardware.com
Accept: *
Response message
Client          HTTP/1.0 200 OK
New product list:                 www.joes-hardware.com              Gateway                    Database...
Figure 8-1. Gateway magic
Somegateways automatically translate HTTP traffic to other protocols, so HTTP cli-ents can interface with other applications without the clients needing to know otherprotocols (Figure 8-2).
Figure 8-2 shows three examples of gateways:• In Figure 8-2a, the gateway receives HTTP requests for FTP URLs. The gatewaythen opens FTP connections and issues the appropriate commands to the FTPserver. The document is sent back through HTTP, along with the correct HTTPheaders.• In Figure 8-2b, the gateway receives an encrypted web request through SSL,decrypts the request,* and forwards a normal HTTP request to the destinationserver. These security accelerators can be placed directly in front of web servers(usually in the same premises) to provide high-performance encryption for ori-gin servers.* The gateway would need to have the proper server certificates installed.|
(a) HTTP/FTP server-side FTP gateway
HTTP                                FTP
HTTP client                       Gateway                          FTP server(b) HTTPS/HTTP client-side security gateway
SSL                               HTTP
HTTPS client                       Gateway                         Web server(c) HTTP/CGI server-side application gateway
CGI (or other API)
HTTP
App server                     Program
HTTP client                           Application server gateway
Figure 8-2. Three web gateway examples• In Figure 8-2c, the gateway connects HTTP clients to server-side applicationprograms, through an application server gateway API. When you purchase frome-commerce stores on the Web, check the weather forecast, or get stock quotes,you are visiting application server gateways.
Client-Side and Server-Side Gateways*
Web gateways speak HTTP on one side and a different protocol on the other side.
Gateways are described by their client- and server-side protocols, separated by a slash:<client-protocol>/<server-protocol>
So a gateway joining HTTP clients to NNTP news servers is an HTTP/NNTP gate-way. We use the terms “server-side gateway” and “client-side gateway” to describewhat side of the gateway the conversion is done for:• Server-side gateways speak HTTP with clients and a foreign protocol with serv-ers (HTTP/*).• Client-side gateways speak foreign protocols with clients and HTTP with servers(*/HTTP).* Web proxies that convert between different versions of HTTP are like gateways, because they performsophisticated logic to negotiate between the parties. But because they speak HTTP on both sides, they aretechnically proxies.|

Protocol Gateways
You can direct HTTP traffic to gateways the same way you direct traffic to proxies.
Most commonly, you explicitly configure browsers to use gateways, intercept traffictransparently, or configure gateways as surrogates (reverse proxies).
Figure 8-3 shows the dialog boxes used to configure a browser to use server-side FTPgateways. In the configuration shown, the browser is configured to use gw1.joes-hardware.com as an HTTP/FTP gateway for all FTP URLs. Instead of sending FTPcommands to an FTP server, the browser will send HTTP commands to the HTTP/
FTP gatewaygw1.joes-hardware.com on port 8080.(a) MSIE manual proxy settings     (b) Navigator manual proxy settings
Figure 8-3. Configuring an HTTP/FTP gateway
The result of this gateway configuration is shown in Figure 8-4. Normal HTTP traf-fic is unaffected; it continues to flow directly to origin servers. But requests for FTP
URLs are sent to the gateway gw1.joes-hardware.com within HTTP requests. Thegateway performs the FTP transactions on the client’s behalf and carries results backto the client by HTTP.
The following sections describe common kinds of gateways: server protocol con-verters, server-side security gateways, client-side security gateways, and applicationservers.
HTTP/*: Server-Side Web Gateways
Server-side web gateways convert client-side HTTP requests into a foreign protocol,as the requests travel inbound to the origin server (see Figure 8-5).
In Figure 8-5, the gateway receives an HTTP request for an FTP resource:ftp://ftp.irs.gov/pub/00-index.txt|

GET http://www.cnn.com/HTTP/1.0
Host: www.cnn.com
User-agent: SuperBrowser 4.2
HTTP
Web server(www.cnn.com)
HTTP client                        8080
HTTP       FTP
GET ftp://ftp.irs.gov/pub/00-index.txt HTTP/1.0
Host: ftp.irs.gov             HTTP/FTP gateway          FTP server
User-agent: SuperBrowser 4.2(gw1.joes-hardware.com)     (ftp.irs.gov)
Figure 8-4. Browsers can configure particular protocols to use particular gateways
USER anonymous
PASS joe
CWD /pub
TYPE A
GET ftp://ftp.irs.gov/pub/00-index.txt HTTP/1.0                            MDTM 00-index.txt
Host: ftp.irs.gov                         PASV                  Port 21
User-agent: SuperBrowser 4.2              RETR 00-index.txt
FTP control connection
HTTP
FTP data connection
HTTP client               HTTP/FTP inbound    ...data..          FTP serverconversion gateway
Inbound
Figure 8-5. The HTTP/FTP gateway translates HTTP request into FTP requests
The gateway proceeds to open an FTP connection to the FTP port on the originserver (port 21) and speak the FTP protocol to fetch the object. The gateway doesthe following:• Sends the USER and PASS commands to log in to the server• Issues the CWD command to change to the proper directory on the server• Sets the download type to ASCII• Fetches the document’s last modification time with MDTM• Tells the server to expect a passive data retrieval request using PASV• Requests the object retrieval using RETR• Opens a data connection to the FTP server on a port returned on the controlchannel; as soon as the data channel is opened, the object content flows back tothe gateway|

When the retrieval is complete, the object will be sent to the client in an HTTPresponse.
HTTP/HTTPS: Server-Side Security Gateways
Gateways can be used to provide extra privacy and security for an organization, byencrypting all inbound web requests. Clients can browse the Web using normal
HTTP, but the gateway will automatically encrypt the user’s sessions (Figure 8-6).
GET http://www.cnn.com/ HTTP/1.0                 mdsnrt734tngfd/p0f92piub5.
Host: www.cnn.com                                lod9fuo8w34b4/;p-90[g9yk,8
User-agent: Superbrowser 4.2                     U|t6y6/%$!&9890G&*&98...
HTTP  HTTP over SSL (HTTPS)ort 443
P
HTTP client                        HTTP/HTTPS inbound                              Secure websecurity gateway                                server
Figure 8-6. Inbound HTTP/HTTPS security gateway
HTTPS/HTTP: Client-Side Security Accelerator Gateways
Recently, HTTPS/HTTP gateways have become popular as security accelerators.
These HTTPS/HTTP gateways sit in front of the web server, usually as an invisibleintercepting gateway or a reverse proxy. They receive secure HTTPS traffic, decryptthe secure traffic, and make normal HTTP requests to the web server (Figure 8-7).
Protected internal LANmdsnrt734tngfd/p0f92piub5.                   GET http://www.cnn.com/ HTTP/1.0lod9fuo8w34b4/;p-90[g9yk,8                   Host: www.cnn.com
U|t6y6/%$!&9890G&*&98...                     User-agent: Superbrowser 4.2
HTTP over SSL (HTTPS)             HTTP
Browser                      HTTPS/HTTP security                               www.cnn.comaccelerator gateway
Figure 8-7. HTTPS/HTTP security accelerator gateway
These gateways often include special decryption hardware to decrypt secure trafficmuch more efficiently than the origin server, removing load from the origin server.
Because these gateways send unencrypted traffic between the gateway and originserver, you need to use caution to make sure the network between the gateway andorigin server is secure.|

Resource Gateways
So far, we’ve been talking about gateways that connect clients and servers across anetwork. However, the most common form of gateway, the application server, com-bines the destination server and gateway into a single server. Application servers areserver-side gateways that speak HTTP with the client and connect to an applicationprogram on the server side (see Figure 8-8).
Application server
HTTP
Client A      Camera device and software
Web camera API11000101101
E-commerce application
HTTP             E-commerce API
Client B
Figure 8-8. An application server connects HTTP clients to arbitrary backend applications
In Figure 8-8, two clients are connecting to an application server using HTTP. But,instead of sending back files from the server, the application server passes therequests through a gateway application programming interface (API) to applicationsrunning on the server:• Client A’s request is received and, based on the URI, is sent through an API to adigital camera application. The resulting camera image is bundled up into an
HTTP response message and sent back to the client, for display in the client’sbrowser.• Client B’s URI is for an e-commerce application. Client B’s requests are sentthrough the server gateway API to the e-commerce software, and the results aresent back to the browser. The e-commerce software interacts with the client,walking the user through a sequence of HTML pages to complete a purchase.
The first popular API for application gateways was the Common Gateway Interface(CGI). CGI is a standardized set of interfaces that web servers use to launch pro-grams in response to HTTP requests for special URLs, collect the program output,and send it back in HTTP responses. Over the past several years, commercial webservers have provided more sophisticated interfaces for connecting web servers toapplications.|

Early web servers were fairly simple creations, and the simple approach that wastaken for implementing an interface for gateways has stuck to this day.
Whenarequest comes in for a resource that needs a gateway, the server spawns thehelper application to handle the request. The helper application is passed the data itneeds. Often this is just the entire request or something like the query the user wantsto run on the database (from the query string of the URL; see Chapter 2).
It then returns a response or response data to the server, which vectors it off to theclient. The server and gateway are separate applications, so the lines of responsibil-ity are kept clear. Figure 8-9 shows the basic mechanics behind server and gatewayapplication interactions.
Server internal view
Server process
Request 1   Spawned gateway process #1
Request data
Request 2   Spawned gateway process #2
Request N   Spawned gateway process #N
Server system
Response N
Response 2
Response 1         Response data
Figure 8-9. Server gateway application mechanics
This simple protocol (request in, hand off, and respond) is the essence behind theoldest and one of the most common server extension interfaces, CGI.
Common Gateway Interface (CGI)
The Common Gateway Interface was the first and probably still is the most widelyused server extension. It is used throughout the Web for things like dynamic HTML,credit card processing, and querying databases.
Since CGI applications are separate from the server, they can be implemented inalmost any language, including Perl, Tcl, C, and various shell languages. Andbecause CGI is simple, almost all HTTP servers support it. The basic mechanics ofthe CGI model are shown in Figure 8-9.
CGIprocessing is invisible to users. From the perspective of the client, it’s just mak-ing a normal request. It is completely unaware of the hand-off procedure going onbetween the server and the CGI application. The client’s only hint that a CGI appli-cation might be involved would be the presence of the letters “cgi” and maybe “?” inthe URL.|

SoCGIiswonderful,right? Well, yes and no. It provides a simple, functional form ofglue between servers and pretty much any type of resource, handling any translationthat needs to occur. The interface also is elegant in protecting the server from buggyextensions (if the extension were glommed onto the server itself, it could cause anerror that might end up crashing the server).
However,this separation incurs a cost in performance. The overhead to spawn a newprocess for every CGI request is quite high, limiting the performance of servers thatuse CGI and taxing the server machine’s resources. To try to get around this prob-lem, a new form of CGI—aptly dubbed Fast CGI—has been developed. This inter-face mimics CGI, but it runs as a persistent daemon, eliminating the performancepenalty of setting up and tearing down a new process for each request.
Server Extension APIs
The CGI protocol provides a clean way to interface external interpreters with stock
HTTPservers,butwhatifyouwanttoalterthebehavioroftheserveritself,oryoujustwant to eke every last drop of performance you can get out of your server? For thesetwo needs, server developers have provided server extension APIs, which provide apowerful interface for web developers to interface their own modules with an HTTPserver directly. Extension APIs allow programmers to graft their own code onto theserver or completely swap out a component of the server and replace it with their own.
Mostpopular servers provide one or more extension APIs for developers. Since theseextensions often are tied to the architecture of the server itself, most of them are spe-cific to one server type. Microsoft, Netscape, Apache, and other server flavors allhave API interfaces that allow developers to alter the behavior of the server or pro-vide custom interfaces to different resources. These custom interfaces provide a pow-erful interface for developers.
Oneexampleofaserver extension is Microsoft’s FrontPage Server Extension (FPSE),which supports web publishing services for FrontPage authors. FPSE is able to inter-pret remote procedure call (RPC) commands sent by FrontPage clients. These com-mandsarepiggybackedonHTTP(specifically,overlaid on the HTTP POST method).
For details, see “FrontPage Server Extensions for Publishing Support” in Chapter 19.
Application Interfaces and Web Services
We’ve discussed resource gateways as ways for web servers to communicate withapplications. More generally, with web applications providing ever more types of ser-vices, it becomes clear that HTTP can be part of a foundation for linking togetherapplications. One of the trickier issues in wiring up applications is negotiating theprotocol interface between the two applications so that they can exchange data—often this is done on an application-by-application basis.|

To work together, applications usually need to exchange more complex informationwith one another than is expressible in HTTP headers. A couple of examples ofextending HTTP or layering protocols on top of HTTP in order to exchange custom-ized information are described in Chapter 19. “FrontPage Server Extensions for Pub-lishing Support” in Chapter 19 talks about layering RPCs over HTTP POSTmessages, and “WebDAV and Collaborative Authoring” talks about adding XML to
HTTP headers.
The Internet community has developed a set of standards and protocols that allowwebapplications to talk to each other. These standards are loosely referred to as webservices, although the term can mean standalone web applications (building blocks)themselves. The premise of web services is not new, but they are a new mechanismfor applications to share information. Web services are built on standard web tech-nologies, such as HTTP.
Webservices exchange information using XML over SOAP. The Extensible Markup
Language (XML) provides a way to create and interpret customized informationabout a data object. The Simple Object Access Protocol (SOAP) is a standard for*adding XML information to HTTP messages.
Tunnels
We’ve discussed different ways that HTTP can be used to enable access to variouskinds of resources (through gateways) and to enable application-to-application com-munication. In this section, we’ll take a look at another use of HTTP, web tunnels,which enable access to applications that speak non-HTTP protocols through HTTPapplications.
Web tunnels let you send non-HTTP traffic through HTTP connections, allowingother protocols to piggyback on top of HTTP. The most common reason to use webtunnels is to embed non-HTTP traffic inside an HTTP connection, so it can be sentthrough firewalls that allow only web traffic.
Establishing HTTP Tunnels with CONNECT
WebtunnelsareestablishedusingHTTP’sCONNECTmethod.TheCONNECTpro-†tocol is not part of the core HTTP/1.1 specification, but it is a widely implementedextension. Technical specifications can be found in Ari Luotonen’s expired Internetdraft specification, “Tunneling TCP based protocols through Web proxy servers,” orin his book Web Proxy Servers, both of which are cited at the end of this chapter.* For more information, see http://www.w3.org/TR/2001/WD-soap12-part0-20011217/. Programming Web
ServiceswithSOAP,byDougTidwell,JamesSnell,andPavelKulchenko(O’Reilly)isalsoanexcellentsourceof information on the SOAP protocol.†The HTTP/1.1 specification reserves the CONNECT method but does not describe its function.|

The CONNECT method asks a tunnel gateway to create a TCP connection to anarbitrary destination server and port and to blindly relay subsequent data betweenclient and server.
Figure 8-10 shows how the CONNECT method works to establish a tunnel to agateway:• In Figure 8-10a, the client sends a CONNECT request to the tunnel gateway.
Theclient’s CONNECTmethodasksthetunnelgatewaytoopenaTCPconnec-tion (here, to the host named orders.joes-hardware.com on port 443, the normal
SSL port).• The TCP connection is created in Figure 8-10b and Figure 8-10c.• Once the TCP connection is established, the gateway notifies the client(Figure 8-10d) by sending an HTTP 200 Connection Established response.• At this point, the tunnel is set up. Any data sent by the client over the HTTPtunnel will be relayed directly to the outgoing TCP connection, and any datasent by the server will be relayed to the client over the HTTP tunnel.
The tunnel goes between client and gateway
Normal SSL connection
Client                        Gateway          orders.joes-hardware.com(a) CONNECT request sent                              (Tunnel endpoint)
CONNECT orders.joes-hardware.com:443 HTTP/1.0
User-agent: SuperBrowser: 4.2(b) Open 
T
CP connection to port 443(d) HTTP connection ready message returnedonnection established
HTTP/1.0 200 Connection established                     (c) C(e) At this point, arbitrary, bidirectional communication of rawdata occurs, until connection closemdsnrt734tngfd/p0f92piub5.lod9fuo8w34b4/;p-90[g9yk,8
U|t6y6/%$!&9890G&*&98...mdsnrt734tngfd/p0f92piub5.lod9fuo8w34b4/;p-90[g9yk,8
U|t6y6/%$!&9890G&*&98...gal1304-*&hsgdgal1304-*&hsgd
Figure 8-10. Using CONNECT to establish an SSL tunnel|

TheexampleinFigure8-10describes an SSL tunnel, where SSL traffic is sent over an
HTTPconnection, but the CONNECT method can be used to establish a TCP con-nection to any server using any protocol.
CONNECT requests
TheCONNECTsyntaxisidenticalinformtootherHTTPmethods,withtheexcep-tion of the start line. The request URI is replaced by a hostname, followed by acolon, followed by a port number. Both the host and the port must be specified:
CONNECT home.netscape.com:443 HTTP/1.0
User-agent: Mozilla/4.0
After the start line, there are zero or more HTTP request header fields, as in other
HTTPmessages.Asusual,thelinesendinCRLFs,andthelistofheadersendswithabare CRLF.
CONNECT responses
After the request is sent, the client waits for a response from the gateway. As withnormal HTTP messages, a 200 response code indicates success. By convention, thereason phrase in the response is normally set to “Connection Established”:
HTTP/1.0 200 Connection Established
Proxy-agent: Netscape-Proxy/1.1
Unlike normal HTTP responses, the response does not need to include a Content-*
Type header. No content type is required because the connection becomes a rawbyte relay, instead of a message carrier.
Data Tunneling, Timing, and Connection Management
Because the tunneled data is opaque to the gateway, the gateway cannot make anyassumptions about the order and flow of packets. Once the tunnel is established,†data is free to flow in any direction at any time.
As a performance optimization, clients are allowed to send tunnel data after sendingthe CONNECTrequestbutbeforereceiving the response. This gets data to the serverfaster, but it means that the gateway must be able to handle data following therequest properly. In particular, the gateway cannot assume that a network I/O requestwill return only header data, and the gateway must be sure to forward any data readwith the header to the server, when the connection is ready. Clients that pipeline data* Future specifications may define a media type for tunnels (e.g., application/tunnel), for uniformity.†Thetwoendpointsofthetunnel(theclientandthegateway)mustbepreparedtoacceptpacketsfromeitherof the connections at any time and must forward that data immediately. Because the tunneled protocol mayinclude data dependencies, neither end of the tunnel can ignore input data. Lack of data consumption onone end of the tunnel may hang the producer on the other end of the tunnel, leading to deadlock.|
after the request must be prepared to resend the request data if the response comesback as an authentication challenge or other non-200, nonfatal status. *
If at any point either one of the tunnel endpoints gets disconnected, any outstandingdata that came from that endpoint will be passed to the other one, and after that alsothe other connection will be terminated by the proxy. If there is undelivered data forthe closing endpoint, that data will be discarded.
SSL Tunneling
Web tunnels were first developed to carry encrypted SSL traffic through firewalls.
Manyorganizations funnel all traffic through packet-filtering routers and proxy serv-ers to enhance security. But some protocols, such as encrypted SSL, cannot be prox-ied by traditional proxy servers, because the information is encrypted. Tunnels letthe SSL traffic be carried through the port 80 HTTP firewall by transporting itthrough an HTTP connection (Figure 8-11).(a) SSL rejected by firewall
Port 443
Filtering                   Filtering
Client                           router                      router                       Server
Firewall proxy
SSL(rejected)(b) HTTP-carried SSL accepted by firewall
SSL tunneledinside HTTP(accepted)                       Port 80
Filtering                   Filtering
Client                           router                      router                      SSL server
Firewall proxy
Figure 8-11. Tunnels let non-HTTP traffic flow through HTTP connections
Toallow SSL traffic to flow through existing proxy firewalls, a tunneling feature wasadded to HTTP, in which raw, encrypted data is placed inside HTTP messages andsent through normal HTTP channels (Figure 8-12).* Try not to pipeline more data than can fit into the remainder of the request’s TCP packet. Pipelining moredata can cause a client TCP reset if the gateway subsequently closes the connection before all pipelined TCPpacketsarereceived.ATCPresetcancausetheclienttolosethereceivedgatewayresponse,sotheclientwon’tbe able to tell whether the failure was due to a network error, access control, or authentication challenge.|
(a) Direct SSL connection
Port 443
SSL                 SSL              SSLconnection
Client   Server(b) SSL through HTTP tunnel
Client
SSL                     SSL                   SSL                   SSLconnectionort 443
P      Server
Tunnel start         Tunnel endpoint
Port 80
Tunnel carries SSL traffic, intended for port 443,
HTTP        SSL                    HTTP                 HTTP         SSL                  over a plain old HTTP connectionconnection
Figure 8-12. Direct SSL connection vs. tunnelled SSL connection
In Figure 8-12a, SSL traffic is sent directly to a secure web server (on SSL port 443).
In Figure 8-12b, SSL traffic is encapsulated into HTTP messages and sent over HTTPport 80 connections, until it is decapsulated back into normal SSL connections.
Tunnels often are used to let non-HTTP traffic pass through port-filtering firewalls.
This can be put to good use, for example, to allow secure SSL traffic to flow throughfirewalls. However, this feature can be abused, allowing malicious protocols to flowinto an organization through the HTTP tunnel.
SSL Tunneling Versus HTTP/HTTPS Gateways
The HTTPS protocol (HTTP over SSL) can alternatively be gatewayed in the samewayasotherprotocols: having the gateway (instead of the client) initiate the SSL ses-sion with the remote HTTPS server and then perform the HTTPS transaction on theclient’s part. The response will be received and decrypted by the proxy and sent tothe client over (insecure) HTTP. This is the way gateways handle FTP. However, thisapproach has several disadvantages:• The client-to-gateway connection is normal, insecure HTTP.• The client is not able to perform SSL client authentication (authentication basedon X509 certificates) to the remote server, as the proxy is the authenticated party.• The gateway needs to support a full SSL implementation.|

Note that this mechanism, if used for SSL tunneling, does not require an implemen-tation of SSL in the proxy. The SSL session is established between the client generat-ing the request and the destination (secure) web server; the proxy server in betweenmerely tunnels the encrypted data and does not take any other part in the securetransaction.
Tunnel Authentication
Other features of HTTP can be used with tunnels where appropriate. In particular,the proxy authentication support can be used with tunnels to authenticate a client’sright to use a tunnel (Figure 8-13).
The tunnel goes between client and gateway
Normal SLL connection
Client                        Gateway          orders.joes-hardware.com(a) CONNECT request sent                              (Tunnel endpoint)
CONNECT orders.joes-hardware.com:443 HTTP/1.0
User-agent: SuperBrowser 4.2(b) Authentication challange returned
HTTP/1.0 407 Proxy authentication required
Proxy-authenticate: Basic realm="wormhole"(c) CONNECT request sent, with proper authorization
CONNECT orders.joes-hardware.com:443 HTTP/1.0
User-agent: SuperBrowser 4.2
Proxy-authorization: Basic YnJpYW4tdG90dHk6T3ch(d) Open 
T
CP connection to port 443(f) HTTP connection ready message returnedonnection established
HTTP/1.0 200 Connection established                     (e) C
Figure 8-13. Gateways can proxy-authenticate a client before it’s allowed to use a tunnel
Tunnel Security Considerations
In general, the tunnel gateway cannot verify that the protocol being spoken is reallywhat it is supposed to tunnel. Thus, for example, mischievous users might use tun-nels intended for SSL to tunnel Internet gaming traffic through a corporate firewall,|
or malicious users might use tunnels to open Telnet sessions or to send email thatbypasses corporate email scanners.
To minimize abuse of tunnels, the gateway should open tunnels only for particularwell-known ports, such as 443 for HTTPS.
Relays
HTTPrelays are simple HTTP proxies that do not fully adhere to the HTTP specifi-cations. Relays process enough HTTP to establish connections, then blindly forwardbytes.
Because HTTP is complicated, it’s sometimes useful to implement bare-bones prox-ies that just blindly forward traffic, without performing all of the header and methodlogic. Because blind relays are easy to implement, they sometimes are used to providesimple filtering, diagnostics, or content transformation. But they should be deployedwith great caution, because of the serious potential for interoperability problems.
One of the more common (and infamous) problems with some implementations ofsimple blind relays relates to their potential to cause keep-alive connections to hang,because they don’t properly process the Connection header. This situation is depictedin Figure 8-14.(b) Server won’t close connection when done becauseit thinks it has been asked to speak keep-alive(a) Connection: Keep-Alive  (b) Connection: Keep-Alive
Blind relay(d) Connection: Keep-Alive  (c) Connection: Keep-Alive
Client        Server(c) Relay waits for connection to close, ignoring(e) N        uest                   any new requests on the connectionex eqt r(f) Client’s second request on the keep-aliveconnection just hangs because the relay neverprocesses it
Figure 8-14. Simple blind relays can hang if they are single-tasking and don’t support the
Connection header
Here’s what’s going on in this figure:• In Figure 8-14a, a web client sends a message to the relay, including the Connec-tion: Keep-Alive header, requesting a keep-alive connection if possible. The clientwaits for a response to learn if its request for a keep-alive channel was granted.• The relay gets the HTTP request, but it doesn’t understand the Connectionheader, so it passes the message verbatim down the chain to the server(Figure 8-14b). However, the Connection header is a hop-by-hop header; it|
applies only to a single transport link and shouldn’t be passed down the chain.
Bad things are about to start happening!• In Figure 8-14b, the relayed HTTP request arrives at the web server. When theweb server receives the proxied Connection: Keep-Alive header, it mistakenlyconcludes that the relay (which looks like any other client to the server) wants tospeak keep-alive! That’s fine with the web server—it agrees to speak keep-aliveandsendsaConnection:Keep-Alive response header back in Figure 8-14c. So, atthis point, the web server thinks it is speaking keep-alive with the relay, and itwill adhere to rules of keep-alive. But the relay doesn’t know anything aboutkeep-alive.• In Figure 8-14d, the relay forwards the web server’s response message back tothe client, passing along the Connection: Keep-Alive header from the web server.
The client sees this header and assumes the relay has agreed to speak keep-alive.
At this point, both the client and server believe they are speaking keep-alive, butthe relay to which they are talking doesn’t know the first thing about keep-alive.• Because the relay doesn’t know anything about keepalive, it forwards all the datait receives back to the client, waiting for the origin server to close the connec-tion. But the origin server will not close the connection, because it believes therelay asked the server to keep the connection open! So, the relay will hang wait-ing for the connection to close.• When the client gets the response message back in Figure 8-14d, it moves rightalong to the next request, sending another request to the relay on the keep-aliveconnection (Figure 8-14e). Simple relays usually never expect another request onthe same connection. The browser just spins, making no progress.
There are ways to make relays slightly smarter, to remove these risks, but any simpli-fication of proxies runs the risk of interoperation problems. If you are building sim-ple HTTP relays for a particular purpose, be cautious how you use them. For anywide-scale deployment, you should strongly consider using a real, HTTP-compliantproxy server instead.
For more information about relays and connection management, see “Keep-Aliveand Dumb Proxies” in Chapter 4.
For More Information
For more information, refer to:http://www.w3.org/Protocols/rfc2616/rfc2616.txt
RFC2616,“HypertextTransferProtocol,” by R. Fielding, J. Gettys, J. Mogul, H.
Frystyk, L. Mastinter, P. Leach, and T. Berners-Lee.
Web Proxy Servers
Ari Luotonen, Prentice Hall Computer Books.|
http://www.alternic.org/drafts/drafts-l-m/draft-luotonen-web-proxy-tunneling-01.txt“Tunneling TCP based protocols through Web proxy servers,” by Ari Luotonen.http://cgi-spec.golux.com
The Common Gateway Interface—RFC Project Page.http://www.w3.org/TR/2001/WD-soap12-part0-20011217/
W3C—SOAP Version 1.2 Working Draft.
Programming Web Services with SOAP
James Snell, Doug Tidwell, and Pavel Kulchenko, O’Reilly & Associates, Inc.http://www.w3.org/TR/2002/WD-wsa-reqs-20020429
W3C—Web Services Architecture Requirements.
Web Services Essentials
Ethan Cermai, O’Reilly & Associates, Inc.|

CHAPTER 9
Web Robots
Wecontinue our tour of HTTP architecture with a close look at the self-animatinguser agents called web robots.
Webrobots are software programs that automate a series of web transactions with-out human interaction. Many robots wander from web site to web site, fetching con-tent, following hyperlinks, and processing the data they find. These kinds of robotsare given colorful names such as “crawlers,” “spiders,” “worms,” and “bots” becauseof the way they automatically explore web sites, seemingly with minds of their own.
Here are a few examples of web robots:• Stock-graphing robots issue HTTP GETs to stock market servers every few min-utes and use the data to build stock price trend graphs.• Web-censusrobots gather “census” information about the scale and evolution ofthe World Wide Web. They wander the Web counting the number of pages andrecording the size, language, and media type of each page.*• Search-engine robots collect all the documents they find to create searchdatabases.• Comparison-shopping robots gather web pages from online store catalogs tobuild databases of products and their prices.
Crawlers and Crawling
Webcrawlersarerobotsthat recursively traverse information webs, fetching first onewebpage,thenallthewebpagestowhichthatpagepoints,thenallthewebpagestowhich those pages point, and so on. When a robot recursively follows web links, it iscalled a crawler or a spider because it “crawls” along the web created by HTMLhyperlinks.* http://www.netcraft.com collects great census metrics on what flavors of servers are being used by sitesaround the Web.215
Internet search engines use crawlers to wander about the Web and pull back all thedocuments they encounter. These documents are then processed to create a search-able database, allowing users to find documents that contain particular words. Withbillions of web pages out there to find and bring back, these search-engine spidersnecessarily are some of the most sophisticated robots. Let’s look in more detail athow crawlers work.
Where to Start: The “Root Set”
Before you can unleash your hungry crawler, you need to give it a starting point. Theinitial set of URLs that a crawler starts visiting is referred to as the root set. Whenpicking a root set, you should choose URLs from enough different places that crawl-ing all the links will eventually get you to most of the web pages that interest you.
What’s a good root set to use for crawling the web in Figure 9-1? As in the real Web,there is no single document that eventually links to every document. If you start withdocumentAinFigure9-1,youcangettoB,C,andD,thentoEandF,thentoJ,andthen to K. But there’s no chain of links from A to G or from A to N.
A                   G               L               S
B     C      D         H     I        M      N        T      U
E      F            J              O
K       P      Q       R
Figure 9-1. A root set is needed to reach all pages
Some web pages in this web, such as S, T, and U, are nearly stranded—isolated,without any links pointing at them. Perhaps these lonely pages are new, and no onehas found them yet. Or perhaps they are really old or obscure.
In general, you don’t need too many pages in the root set to cover a large portion ofthe web. In Figure 9-1, you need only A, G, and S in the root set to reach all pages.
Typically, a good root set consists of the big, popular web sites (for example, http://www.yahoo.com), a list of newly created pages, and a list of obscure pages that aren’toften linked to. Many large-scale production crawlers, such as those used by Internetsearch engines, have a way for users to submit new or obscure pages into the root set.
This root set grows over time and is the seed list for any fresh crawls.|

Extracting Links and Normalizing Relative Links
Asacrawler moves through the Web, it is constantly retrieving HTML pages. It needsto parse out the URL links in each page it retrieves and add them to the list of pagesthat need to be crawled. While a crawl is progressing, this list often expands rapidly,*as the crawler discovers new links that need to be explored. Crawlers need to do somesimple HTML parsing to extract these links and to convert relative URLs into theirabsolute form. “Relative URLs” in Chapter 2 discusses how to do this conversion.
Cycle Avoidance
When a robot crawls a web, it must be very careful not to get stuck in a loop, orcycle. Look at the crawler in Figure 9-2:• In Figure 9-2a, the robot fetches page A, sees that A links to B, and fetches page B.• In Figure 9-2b, the robot fetches page B, sees that B links to C, and fetches page C.• In Figure 9-2c, the robot fetches page C and sees that C links to A. If the robotfetches page A again, it will end up in a cycle, fetching A, B, C, A, B, C, A...
BE B E        B                      E
A                       A                  B   A
C                       C     C                C
D                      D                       D(a) Robot fetches page A, follows link,            (b) Robot follows link and fetches page C                (c) Robot follows link and is back to Afetches B
Figure 9-2. Crawling over a web of hyperlinks
Robots must know where they’ve been to avoid cycles. Cycles can lead to robot trapsthat can either halt or slow down a robot’s progress.
Loops and Dups
Cycles are bad for crawlers for at least three reasons:• They get the crawler into a loop where it can get stuck. A loop can cause apoorly designed crawler to spin round and round, spending all its time fetching* In “Cycle Avoidance,” we begin to discuss the need for crawlers to remember where they have been. Duringacrawl,thislistofdiscoveredURLsgrowsuntilthewebspacehasbeenexploredthoroughlyandthecrawlerreaches a point at which it is no longer discovering new links.|
the same pages over and over again. The crawler can burn up lots of networkbandwidth and may be completely unable to fetch any other pages.• While the crawler is fetching the same pages repeatedly, the web server on theother side is getting pounded. If the crawler is well connected, it can overwhelmthe web site and prevent any real users from accessing the site. Such denial ofservice can be grounds for legal claims.• Even if the looping isn’t a problem itself, the crawler is fetching a large numberof duplicate pages (often called “dups,” which rhymes with “loops”). Thecrawler’s application will be flooded with duplicate content, which may makethe application useless. An example of this is an Internet search engine thatreturns hundreds of matches of the exact same page.
Trails of Breadcrumbs
Unfortunately, keeping track of where you’ve been isn’t always so easy. At the timeof this writing, there are billions of distinct web pages on the Internet, not countingcontent generated from dynamic gateways.
If you are going to crawl a big chunk of the world’s web content, you need to be pre-pared to visit billions of URLs. Keeping track of which URLs have been visited canbe quite challenging. Because of the huge number of URLs, you need to use sophisti-cated data structures to quickly determine which URLs you’ve visited. The datastructures need to be efficient in speed and memory use.
Speed is important because hundreds of millions of URLs require fast search struc-tures. Exhaustive searching of URL lists is out of the question. At the very least, arobot will need to use a search tree or hash table to be able to quickly determinewhether a URL has been visited.
Hundreds of millions of URLs take up a lot of space, too. If the average URL is 40characters long, and a web robot crawls 500 million URLs (just a small portion of the
Web), a search data structure could require 20 GB or more of memory just to holdthe URLs (40 bytes per URL × 500 million URLs = 20 GB)!
Here are some useful techniques that large-scale web crawlers use to manage wherethey visit:
Trees and hash tables
Sophisticated robots might use a search tree or a hash table to keep track of vis-ited URLs. These are software data structures that make URL lookup much faster.
Lossy presence bit maps
To minimize space, some large-scale crawlers use lossy data structures such aspresence bit arrays. Each URL is converted into a fixed size number by a hashfunction, and this number has an associated “presence bit” in an array. When a|

URL is crawled, the corresponding presence bit is set. If the presence bit isalready set, the crawler assumes the URL has already been crawled.*
Checkpoints
Be sure to save the list of visited URLs to disk, in case the robot program crashes.
Partitioning
As the Web grows, it may become impractical to complete a crawl with a singlerobot on a single computer. That computer may not have enough memory, diskspace, computing power, or network bandwidth to complete a crawl.
Some large-scale web robots use “farms” of robots, each a separate computer,working in tandem. Each robot is assigned a particular “slice” of URLs, forwhich it is responsible. Together, the robots work to crawl the Web. The indi-vidual robots may need to communicate to pass URLs back and forth, to coverfor malfunctioning peers, or to otherwise coordinate their efforts.
AgoodreferencebookforimplementinghugedatastructuresisManagingGigabytes:
Compressing and Indexing Documents and Images, by Witten, et. al (Morgan Kauf-mann). This book is full of tricks and techniques for managing large amounts ofdata.
Aliases and Robot Cycles
Even with the right data structures, it is sometimes difficult to tell if you have visiteda page before, because of URL “aliasing.” Two URLs are aliases if the URLs look dif-ferent but really refer to the same resource.
Table 9-1 illustrates a few simple ways that different URLs can point to the sameresource.
Table 9-1. Different URLs that alias to the same documents
First URL                            Second URL                              When aliaseda     http://www.foo.com/bar.html          http://www.foo.com:80/bar html          Port is 80 by defaultb     http://www.foo.com/~fred             http://www.foo.com/%7Ffred              %7F is same as ~c     http://www.foo.com/x html#early      http://www.foo.com/x html#middle        Tags don’t change the paged     http://www.foo.com/readme.htm        http://www.foo.com/README.HTM           Case-insensitive servere     http://www.foo.com/                  http://www.foo.com/index.html           Default page is index.htmlf     http://www.foo.com/index.html        http://209.231.87.45/index.html         www.foo.com has this IP address* Because there are a potentially infinite number of URLs and only a finite number of bits in the presence bitarray, there is potential for collision—two URLs can map to the same presence bit. When this happens, thecrawler mistakenly concludes that a page has been crawled when it hasn’t. In practice, this situation can bemadeveryunlikely by using a large number of presence bits. The penalty for collision is that a page will beomitted from a crawl.|

Canonicalizing URLs
Most web robots try to eliminate the obvious aliases up front by “canonicalizing”
URLs into a standard form. A robot might first convert every URL into a canonicalform, by:1. Adding “:80” to the hostname, if the port isn’t specified2. Converting all %xx escaped characters into their character equivalents3. Removing# tags
These steps can eliminate the aliasing problems shown in Table 9-1a–c. But, with-out knowing information about the particular web server, the robot doesn’t have anygood way of avoiding the duplicates from Table 9-1d–f:• The robot would need to know whether the web server was case-insensitive toavoid the alias in Table 9-1d.• The robot would need to know the web server’s index-page configuration forthis directory to know whether the URLs in Table 9-1e were aliases.• Therobotwouldneedtoknowifthewebserverwasconfiguredtodovirtualhost-ing (covered in Chapter 5) to know if the URLs in Table 9-1f were aliases, even ifit knew the hostname and IP address referred to the same physical computer.
URL canonicalization can eliminate the basic syntactic aliases, but robots willencounter other URL aliases that can’t be eliminated through converting URLs tostandard forms.
Filesystem Link Cycles
Symbolic links on a filesystem can cause a particularly insidious kind of cycle,because they can create an illusion of an infinitely deep directory hierarchy wherenone exists. Symbolic link cycles usually are the result of an unintentional error bythe server administrator, but they also can be created by “evil webmasters” as a mali-cious trap for robots.
Figure 9-3 shows two filesystems. In Figure 9-3a, subdir is a normal directory. In
Figure 9-3b, subdir is a symbolic link pointing back to /. In both figures, assume thefile /index.html contains a hyperlink to the file subdir/index.html.
Using Figure 9-3a’s filesystem, a web crawler may take the following actions:1. GET http://www.foo.com/index.html
Get /index.html, find link to subdir/index.html.2. GET http://www.foo.com/subdir/index.html
Getsubdir/index.html, find link to subdir/logo.gif.3. GET http://www.foo.com/subdir/logo.gif
Getsubdir/logo.gif, no more links, all done.|
/           /index.html       subdir                      index.html      subdirindex.html logo.gif(a) subdir is a directory            (b) subdir is an upward symbolic link
Figure 9-3. Symbolic link cycles
But in Figure 9-3b’s filesystem, the following might happen:1. GET http://www.foo.com/index.html
Get/index.html, find link to subdir/index.html.2. GET http://www.foo.com/subdir/index.html
Getsubdir/index.html, but get back same index.html.3. GET http://www.foo.com/subdir/subdir/index.html
Get subdir/subdir/index.html.4. GET http://www.foo.com/subdir/subdir/subdir/index.html
Getsubdir/subdir/subdir/index.html.
The problem with Figure 9-3b is that subdir/ is a cycle back to /, but because the
URLs look different, the robot doesn’t know from the URL alone that the docu-ments are identical. The unsuspecting robot runs the risk of getting into a loop.
Without some kind of loop detection, this cycle will continue, often until the lengthof the URL exceeds the robot’s or the server’s limits.
Dynamic Virtual Web Spaces
It’s possible for malicious webmasters to intentionally create sophisticated crawlerloops to trap innocent, unsuspecting robots. In particular, it’s easy to publish a URLthat looks like a normal file but really is a gateway application. This application canwhip up HTMLontheflythat contains links to imaginary URLs on the same server.
Whenthese imaginary URLs are requested, the nasty server fabricates a new HTMLpage with new imaginary URLs.
The malicious web server can take the poor robot on an Alice-in-Wonderland jour-ney through an infinite virtual web space, even if the web server doesn’t really con-tain any files. Even worse, it can make it very difficult for the robot to detect thecycle, because the URLs and HTML can look very different each time. Figure 9-4shows an example of a malicious web server generating bogus content.|

Request message
GET /index-fall.html HTTP/1.1
Host: www.evil-joes-hardware.com
Accept: *
User-agent: ShopBot
Response message                    www.evil-joes-hardware.com
HTTP/1.1 200 OK
Content-type: text/html
Content-length: 617<HTML><BODY><A HREF=/index-fall2.html>trick</A>[...]
Web robot client
Request message
GET /index-fall2.html HTTP/1.1
Host: www.evil-joes-hardware.com
Accept: *
User-agent: ShopBot
Response message                    www.evil-joes-hardware.com
HTTP/1.1 200 OK
Content-type: text/html
Content-length: 617<HTML><BODY><A HREF=/index-fall3.html>trick</A>[...]
Web robot client
A few sites exist that are just malicious gateway applications, whose sole purpose is to trapunsuspecting robots with bogus content . In this example,  the gateway dynamicallygenerates an infinite number of fake web pages, each pointing to the next.
Figure 9-4. Malicious dynamic web space example
Morecommonly,well-intentioned webmasters may unwittingly create a crawler trapthrough symbolic links or dynamic content. For example, consider a CGI-based cal-endaring program that generates a monthly calendar and a link to the next month. Areal user would not keep requesting the next-month link forever, but a robot that isunaware of the dynamic nature of the content might keep requesting these resources*indefinitely.
Avoiding Loops and Dups
There is no foolproof way to avoid all cycles. In practice, well-designed robots needto include a set of heuristics to try to avoid cycles.
Generally, the more autonomous a crawler is (less human oversight), the more likelyit is to get into trouble. There is a bit of a trade-off that robot implementors need tomake—these heuristics can help avoid problems, but they also are somewhat“lossy,” because you can end up skipping valid content that looks suspect.* Thisisarealexamplementionedonhttp://www.searchtools.com/robots/robot-checklist.htmlforthecalendar-ing site at http://cgi.umbc.edu/cgi-bin/WebEvent/webevent.cgi. As a result of dynamic content like this, manyrobots refuse to crawl pages that have the substring “cgi” anywhere in the URL.|

Some techniques that robots use to behave better in a web full of robot dangers are:
Canonicalizing URLs
Avoid syntactic aliases by converting URLs into standard form.
Breadth-first crawling
Crawlers have a large set of potential URLs to crawl at any one time. By schedul-ing the URLs to visit in a breadth-first manner, across web sites, you can mini-mize the impact of cycles. Even if you hit a robot trap, you still can fetchhundreds of thousands of pages from other web sites before returning to fetch apage from the cycle. If you operate depth-first, diving head-first into a single site,*you may hit a cycle and never escape to other sites.
Throttling†
Limit the number of pages the robot can fetch from a web site in a period oftime. If the robot hits a cycle and continually tries to access aliases from a site,you can cap the total number of duplicates generated and the total number ofaccesses to the server by throttling.
Limit URL size
The robot may refuse to crawl URLs beyond a certain length (1KB is common).
If a cycle causes the URL to grow in size, a length limit will eventually stop thecycle. Some web servers fail when given long URLs, and robots caught in a URL-increasing cycle can cause some web servers to crash. This may make webmas-ters misinterpret the robot as a denial-of-service attacker.
As a caution, this technique can certainly lead to missed content. Many sitestoday use URLs to help manage user state (for example, storing user IDs in the
URLs referenced in a page). URL size can be a tricky way to limit a crawl; how-ever, it can provide a great flag for a user to inspect what is happening on a par-ticular site, by logging an error whenever requested URLs reach a certain size.
URL/site blacklist
Maintain a list of known sites and URLs that correspond to robot cycles andtraps, and avoid them like the plague. As new problems are found, add them tothe blacklist.
This requires human action. However, most large-scale crawlers in productiontoday have some form of a blacklist, used to avoid certain sites because of inher-ent problems or something malicious in the sites. The blacklist also can be used‡to avoid certain sites that have made a fuss about being crawled.* Breadth-first crawling is a good idea in general, so as to more evenly disperse requests and not overwhelmany one server. This can help keep the resources that a robot uses on a server to a minimum.†Throttling of request rate is also discussed in “Robot Etiquette.”‡“Excluding Robots” discusses how sites can avoid being crawled, but some users refuse to use this simplecontrol mechanism and become quite irate when their sites are crawled.|

Pattern detection
Cycles caused by filesystem symlinks and similar misconfigurations tend to fol-low patterns; for example, the URL may grow with components duplicated.
Some robots view URLs with repeating components as potential cycles andrefuse to crawl URLs with more than two or three repeated components.
Not all repetition is immediate (e.g., “/subdir/subdir/subdir...”). It’s possible tohave cycles of period 2or other intervals, such as “/subdir/images/subdir/images/subdir/images/...”. Some robots look for repeating patterns of a few dif-ferent periods.
Content fingerprinting
Fingerprinting is a more direct way of detecting duplicates that is used by someof the more sophisticated web crawlers. Robots using content fingerprinting takethe bytes in the content of the page and compute a checksum. This checksum is acompact representation of the content of the page. If a robot ever fetches a pagewhose checksum it has seen before, the page’s links are not crawled—if therobot has seen the page’s content before, it has already initiated the crawling ofthe page’s links.
The checksum function must be chosen so that the odds of two different pageshaving the same checksum are small. Message digest functions such as MD5 arepopular for fingerprinting.
Because some web servers dynamically modify pages on the fly, robots some-times omit certain parts of the web page content, such as embedded links, fromthe checksum calculation. Still, dynamic server-side includes that customizearbitrary page content (adding dates, access counters, etc.) may prevent dupli-cate detection.
Human monitoring
The Web is a wild place. Your brave robot eventually will stumble into a prob-lem that none of your techniques will catch. All production-quality robots mustbe designed with diagnostics and logging, so human beings can easily monitorthe robot’s progress and be warned quickly if something unusual is happening.
In some cases, angry net citizens will highlight the problem for you by sendingyou nasty email.
Good spider heuristics for crawling datasets as vast as the Web are always works inprogress. Rules are built over time and adapted as new types of resources are addedto the Web. Good rules are always evolving.
Manysmaller, more customized crawlers skirt some of these issues, as the resources(servers, network bandwidth, etc.) that are impacted by an errant crawler are man-ageable, or possibly even are under the control of the person performing the crawl(such as on an intranet site). These crawlers rely on more human monitoring to pre-vent problems.|

Robotic HTTP
Robots are no different from any other HTTP client program. They too need to abideby the rules of the HTTP specification. A robot that is making HTTP requests andadvertising itself as an HTTP/1.1 client needs to use the appropriate HTTP requestheaders.
Manyrobots try to implement the minimum amount of HTTP needed to request thecontent they seek. This can lead to problems; however, it’s unlikely that this behav-ior will change anytime soon. As a result, many robots make HTTP/1.0 requests,because that protocol has few requirements.
Identifying Request Headers
Despite the minimum amount of HTTP that robots tend to support, most do imple-ment and send some identification headers—most notably, the User-Agent HTTPheader. It’s recommended that robot implementors send some basic header informa-tion to notify the site of the capabilities of the robot, the robot’s identity, and whereit originated.
This is useful information both for tracking down the owner of an errant crawler andfor giving the server some information about what types of content the robot canhandle. Some of the basic identifying headers that robot implementors are encour-aged to implement are:
User-Agent
Tells the server the name of the robot making the request.
From*
Provides the email address of the robot’s user/administrator.
Accept†
Tells the server what media types are okay to send. This can help ensure thatthe robot receives only content in which it’s interested (text, images, etc.).
Referer
Provides the URL of the document that contains the current request-URL.‡
Virtual Hosting
Robot implementors need to support the Host header. Given the prevalence of virtualhosting (Chapter 5 discusses virtually hosted servers in more detail), not including the* An RFC 822 email address format.†“Acceptheaders”inChapter3listsalloftheacceptheaders;robots mayfindit useful to send headers suchas Accept-Charset if they are interested in particular versions.‡Thiscanbeveryusefultositeadministrators that are trying to track down how a robot found links to theirsites’ content.|

HostHTTPheaderinrequestscanleadtorobotsidentifyingthewrongcontentwithaparticular URL. HTTP/1.1 requires the use of the Host header for this reason.
Most servers are configured to serve a particular site by default. Thus, a crawler notincluding the Host header can make a request to a server serving two sites, like thosein Figure 9-5 (www.joes-hardware.com and www.foo.com) and, if the server is config-ured to serve www.joes-hardware.com by default (and does not require the Hostheader), a request for a page on www.foo.com can result in the crawler getting con-tent from the Joe’s Hardware site. Worse yet, the crawler will actually think the con-tent from Joe’s Hardware was from www.foo.com. I am sure you can think of somemoreunfortunate situations if documents from two sites with polar political or otherviews were served from the same server.
Robot tries to request /index.htmlfrom www.foo.com, but does notinclude a Host header.
Web robot client                              Server is configured to serve both sites,but serves Joe’s Hardware by default.
Request message
GET /index.html HTTP/1.0
User-agent: ShopBot 1.0www.joes-hardware.com
Response message                     www.foo.com
HTTP/1.0 200 OK[...]<HTML><TITLE>Welcome to Joe's Hardware!</TITLE>[...]
Figure 9-5. Example of virtual docroots causing trouble if no Host header is sent with the request
Conditional Requests
Given the enormity of some robotic endeavors, it often makes sense to minimize theamount of content a robot retrieves. As in the case of Internet search-engine robots,with potentially billions of web pages to download, it makes sense to re-retrieve con-tent only if it has changed.
Someofthese robots implement conditional HTTP requests,* comparing timestampsor entity tags to see if the last version that they retrieved has been updated. This isvery similar to the way that an HTTP cache checks the validity of the local copy of apreviously fetched resource. See Chapter 7 for more on how caches validate localcopies of resources.* “Conditional request headers” in Chapter 3 gives a complete listing of the conditional headers that a robotcan implement.|

Response Handling
Because many robots are interested primarily in getting the content requestedthrough simple GET methods, often they don’t do much in the way of response han-dling. However, robots that use some features of HTTP (such as conditionalrequests), as well as those that want to better explore and interoperate with servers,need to be able to handle different types of HTTP responses.
Status codes
In general, robots should be able to handle at least the common or expected statuscodes. All robots should understand HTTP status codes such as 200 OK and 404
NotFound.Theyalsoshouldbeabletodealwithstatuscodesthattheydon’texplic-itly understand based on the general category of response. Table 3-2in Chapter 3gives a breakdown of the different status-code categories and their meanings.
It is important to note that some servers don’t always return the appropriate errorcodes. Some servers even return 200 OK HTTP status codes with the text body of themessage describing an error! It’s hard to do much about this—it’s just something forimplementors to be aware of.
Entities
Along with information embedded in the HTTP headers, robots can look for infor-*mation in the entity itself. Meta HTML tags, such as the meta http-equiv tag, are ameans for content authors to embed additional information about resources. Thehttp-equiv tag itself is a way for content authors to override certain headers that theserver handling their content may serve:<meta http-equiv="Refresh" content="1;URL=index.html">
This tag instructs the receiver to treat the document as if its HTTP response headercontained a Refresh HTTP header with the value “1, URL=index.html”.†
Some servers actually parse the contents of HTML pages prior to sending them andinclude http-equiv directives as headers; however, some do not. Robot implemen-tors may want to scan the HEAD elements of HTML documents to look for http-equiv information. ‡* “Robot META directives” lists additional meta directives that site administrators and content authors canuse to control the behavior of robots and what they do with documents that have been retrieved.†TheRefreshHTTPheadersometimesisusedasameanstoredirectusers(orinthiscase,arobot)fromonepage to another.‡Meta tags must occur in the HEAD section of HTML documents, according to the HTML specification.
However,theysometimesoccurinotherHTMLdocumentsections,asnotallHTMLdocumentsadheretothe specification.|

User-Agent Targeting
Webadministrators should keep in mind that many robots will visit their sites andtherefore should expect requests from them. Many sites optimize content for varioususer agents, attempting to detect browser types to ensure that various site featuresare supported. By doing this, the sites serve error pages instead of content to robots.
Performing a text search for the phrase “your browser does not support frames” onsome search engines will yield a list of results for error pages that contain thatphrase, when in fact the HTTP client was not a browser at all, but a robot.
Site administrators should plan a strategy for handling robot requests. For example,instead of limiting their content development to specific browser support, they candevelop catch-all pages for non–feature rich browsers and robots. At a minimum,they should expect robots to visit their sites and not be caught off guard when they*do.
Misbehaving Robots
There are many ways that wayward robots can cause mayhem. Here are a few mis-takes robots can make, and the impact of their misdeeds:
Runaway robots
Robots issue HTTP requests much faster than human web surfers, and theycommonly run on fast computers with fast network links. If a robot contains aprogramming logic error, or gets caught in a cycle, it can throw intense loadagainst a web server—quite possibly enough to overload the server and deny ser-vice to anyone else. All robot authors must take extreme care to design in safe-guards to protect against runaway robots.
Stale URLs
Some robots visit lists of URLs. These lists can be old. If a web site makes a bigchange in its content, robots may request large numbers of nonexistent URLs.
This annoys some web site administrators, who don’t like their error logs fillingwith access requests for nonexistent documents and don’t like having their webserver capacity reduced by the overhead of serving error pages.
Long, wrong URLs
As a result of cycles and programming errors, robots may request large, non-sense URLs from web sites. If the URL is long enough, it may reduce the perfor-mance of the web server, clutter the web server access logs, and even causefragile web servers to crash.* “Excluding Robots” provides information for how site administrators can control the behavior of robots ontheir sites if there is content that should not be accessed by robots.|
*
Nosy robots
Some robots may get URLs that point to private data and make that data easilyaccessible through Internet search engines and other applications. If the ownerof the data didn’t actively advertise the web pages, she may view the roboticpublishing as a nuisance at best and an invasion of privacy at worst.
Usually this happens because a hyperlink to the “private” content that the robotfollowed already exists (i.e., the content isn’t as secret as the owner thought itwas, or the owner forgot to remove a preexisting hyperlink). Occasionally it hap-pens when a robot is very zealous in trying to scavenge the documents on a site,perhaps by fetching the contents of a directory, even if no explicit hyperlink exists.
Robot implementors retrieving large amounts of data from the Web should beaware that their robots are likely to retrieve sensitive data at some point—datathat the site implementor never intended to be accessible over the Internet. Thissensitive data can include password files or even credit card information.
Clearly, a mechanism to disregard content once this is pointed out (and removeit from any search index or archive) is important. Malicious search engine andarchive users have been known to exploit the abilities of large-scale web crawl-†ers to find content—some search engines, such as Google, actually archive rep-resentations of the pages they have crawled, so even if content is removed, it canstill be found and accessed for some time.
Dynamic gateway access
Robots don’t always know what they are accessing. A robot may fetch a URLwhose content comes from a gateway application. In this case, the data obtainedmaybespecial-purpose and may be expensive to compute. Many web site admin-istrators don’t like naïve robots requesting documents that come from gateways.
Excluding Robots
The robot community understood the problems that robotic web site access couldcause. In 1994, a simple, voluntary technique was proposed to keep robots out ofwhere they don’t belong and provide webmasters with a mechanism to better controltheir behavior. The standard was named the “Robots Exclusion Standard” but is oftenjust called robots.txt, after the file where the access-control information is stored.
The idea of robots.txt is simple. Any web server can provide an optional file namedrobots.txt in the document root of the server. This file contains information aboutwhat robots can access what parts of the server. If a robot follows this voluntary* Generally, if a resource is available over the public Internet, it is likely referenced somewhere. Few resourcesare truly private, with the web of links that exists on the Internet.†See search results at http://www.google.com. A cached link, which is a copy of the page that the Googlecrawler retrieved and indexed, is available on most results.|
standard, it will request the robots.txt file from the web site before accessing anyother resource from that site. For example, the robot in Figure 9-6 wants to down-load http://www.joes-hardware.com/specials/acetylene-torches.html from Joe’s Hard-ware. Before the robot can request the page, however, it needs to check the robots.txtfile to see if it has permission to fetch this page. In this example, the robots.txt filedoes not block the robot, so the robot fetches the page.
Web robot client                www.joes-hardware.com
GET /robots.txt
Robot parses the robots.txt file anddetermines if it is allowed to accessthe acetylene-torches.html file.
It is, so it proceeds with the request.       GET /specials/acetylene-torches.html
Figure 9-6. Fetching robots.txt and verifying accessibility before crawling the target file
The Robots Exclusion Standard
TheRobotsExclusion Standard is an ad hoc standard. At the time of this writing, noofficial standards body owns this standard, and vendors implement different subsetsof the standard. Still, some ability to manage robots’ access to web sites, even ifimperfect, is better than none at all, and most major vendors and search-enginecrawlers implement support for the exclusion standard.
There are three revisions of the Robots Exclusion Standard, though the naming of theversions is not well defined. We adopt the version numbering shown in Table 9-2.
Table 9-2. Robots Exclusion Standard versions
Version         Title and description      Date0.0             A Standard for Robot Exclusion—Martijn Koster’s originalrobots.txt mechanism with Disallow   June 1994directive1.0             A Method for Web Robots Control—Martijn Koster’s IETF draft with additional support for AllowNov. 19962.0             An Extended Standard for Robot Exclusion—Sean Conner’s extension including regex and timing  Nov. 1996information; not widely supported|

Mostrobots today adopt the v0.0 or v1.0 standards. The v2.0 standard is much morecomplicated and hasn’t been widely adopted. It may never be. We’ll focus on the v1.0standard here, because it is in wide use and is fully compatible with v0.0.
Web Sites and robots.txt Files
Before visiting any URLs on a web site, a robot must retrieve and process the robots.txtfile on the web site, if it is present.* There is a single robots.txt resource for the entirewebsite defined by the hostname and port number. If the site is virtually hosted, therecan be a different robots.txt file for each virtual docroot, as with any other file.
Currently, there is no way to install “local” robots.txt files in individual subdirecto-ries of a web site. The webmaster is responsible for creating an aggregate robots.txtfile that describes the exclusion rules for all content on the web site.
Fetching robots.txt
Robots fetch the robots.txt resource using the HTTP GET method, like any other fileon the web server. The server returns the robots.txt file, if present, in a text/plainbody. If the server responds with a 404 Not Found HTTP status code, the robot canassume that there are no robotic access restrictions and that it can request any file.
Robots should pass along identifying information in the From and User-Agent head-ers to help site administrators track robotic accesses and to provide contact informa-tion in the event that the site administrator needs to inquire or complain about therobot. Here’s an example HTTP crawler request from a commercial web robot:
GET /robots.txt HTTP/1.0
Host: www.joes-hardware.com
User-Agent: Slurp/2.0
Date: Wed Oct 3 20:22:48 EST 2001
Response codes
Manywebsitesdonothavearobots.txtresource, but the robot doesn’t know that. Itmust attempt to get the robots.txt resource from every site. The robot takes differentactions depending on the result of the robots.txt retrieval:• If the server responds with a success status (HTTP status code 2XX), the robotmust parse the content and apply the exclusion rules to fetches from that site.• If the server response indicates the resource does not exist (HTTP status code404), the robot can assume that no exclusion rules are active and that access tothe site is not restricted by robots.txt.* Even though we say “robots.txt file,” there is no reason that the robots.txt resource must strictly reside in afilesystem. For example, the robots.txt resource could be dynamically generated by a gateway application.|
• If the server response indicates access restrictions (HTTP status code 401 or 403)the robot should regard access to the site as completely restricted.• If the request attempt results in temporary failure (HTTP status code 503), therobot should defer visits to the site until the resource can be retrieved.• If the server response indicates redirection (HTTP status code 3XX), the robotshould follow the redirects until the resource is found.robots.txt File Format
The robots.txt file has a very simple, line-oriented syntax. There are three types oflines in a robots.txt file: blank lines, comment lines, and rule lines. Rule lines look like
HTTP headers (<Field>: <value>) and are used for pattern matching. For example:# this robots.txt file allows Slurp & Webcrawler to crawl# the public parts of our site, but no other robots...
User-Agent: slurp
User-Agent: webcrawler
Disallow: /private
User-Agent: *
Disallow:
The lines in a robots.txt file are logically separated into “records.” Each recorddescribes a set of exclusion rules for a particular set of robots. This way, differentexclusion rules can be applied to different robots.
Each record consists of a set of rule lines, terminated by a blank line or end-of-filecharacter. A record starts with one or more User-Agent lines, specifying which robotsare affected by this record, followed by Disallow and Allow lines that say what URLsthese robots can access.*
The previous example shows a robots.txt file that allows the Slurp and Webcrawlerrobots to access any file except those files in the private subdirectory. The same filealso prevents any other robots from accessing anything on the site.
Let’s look at the User-Agent, Disallow, and Allow lines.
The User-Agent line
Each robot’s record starts with one or more User-Agent lines, of the form:
User-Agent: <robot-name>or:
User-Agent: ** For practical reasons, robot software should be robust and flexible with the end-of-line character. CR, LF,and CRLF should all be supported.|

The robot name (chosen by the robot implementor) is sent in the User-Agent headerof the robot’s HTTP GET request.
When a robot processes a robots.txt file, it must obey the record with either:• The first robot name that is a case-insensitive substring of the robot’s name• The first robot name that is “*”
If the robot can’t find a User-Agent line that matches its name, and can’t find a wild-carded “User-Agent: *” line, no record matches, and access is unlimited.
Because the robot name matches case-insensitive substrings, be careful about falsematches. For example, “User-Agent: bot” matches all the robots named Bot, Robot,
Bottom-Feeder, Spambot, and Dont-Bother-Me.
The Disallow and Allow lines
The Disallow and Allow lines immediately follow the User-Agent lines of a robotexclusion record. They describe which URL paths are explicitly forbidden or explic-itly allowed for the specified robots.
The robot must match the desired URL against all of the Disallow and Allow rulesfor the exclusion record, in order. The first match found is used. If no match is*found, the URL is allowed.
For an Allow/Disallow line to match a URL, the rule path must be a case-sensitiveprefix of the URL path. For example, “Disallow: /tmp” matches all of these URLs:http://www.joes-hardware.com/tmphttp://www.joes-hardware.com/tmp/http://www.joes-hardware.com/tmp/pliers.htmlhttp://www.joes-hardware.com/tmpspc/stuff.txt
Disallow/Allow preﬁx matching
Here are a few more details about Disallow/Allow prefix matching:• Disallow and Allow rules require case-sensitive prefix matches. The asterisk hasno special meaning (unlike in User-Agent lines), but the universal wildcardingeffect can be obtained from the empty string.• Any “escaped” characters (%XX) in the rule path or the URL path are unes-caped back into bytes before comparison (with the exception of %2F, the for-ward slash, which must match exactly).• If the rule path is the empty string, it matches everything.
Table 9-3 lists several examples of matching between rule paths and URL paths.* The robots.txt URL always is allowed and must not appear in the Allow/Disallow rules.|

Table 9-3. Robots.txt path matching examples
Rule path           URL path             Match?     Comments/tmp                /tmp                 ✓          Rule path == URL path/tmp                /tmpfile.html        ✓          Rule path is a prefix of URL path/tmp                /tmp/a html          ✓          Rule path is a prefix of URL path/tmp/               /tmp                 ✗          /tmp/ is not a prefix of /tmp
README.TXT           ✓          Empty rule path matches everything/~fred/hi.html      %7Efred/hi.html      ✓          %7E is treated the same as ~/%7Efred/hi.html    /~fred/hi.html       ✓          %7E is treated the same as ~/%7efred/hi.html    /%7Efred/hi.html     ✓          Case isn’t significant in escapes/~fred/hi.html      ~fred%2Fhi html      ✗          %2F is slash, but slash is a special case that must match exactly
Prefix matching usually works pretty well, but there are a few places where it is notexpressive enough. If there are particular subdirectories for which you also want todisallow crawling, regardless of what the prefix of the path is, robots.txt provides nomeans for this. For example, you might want to avoid crawling of RCS version con-trol subdirectories. Version 1.0 of the robots.txt scheme provides no way to supportthis, other than separately enumerating every path to every RCS subdirectory.
Other robots.txt Wisdom
Here are some other rules with respect to parsing the robots.txt file:• The robots.txt file may contain fields other than User-Agent, Disallow, and
Allow, as the specification evolves. A robot should ignore any field it doesn’tunderstand.• For backward compatibility, breaking of lines is not allowed.• Commentsareallowedanywhereinthefile; they consist of optional whitespace,followed by a comment character (#) followed by the comment, until the end-of-line character.• Version 0.0 of the Robots Exclusion Standard didn’t support the Allow line.
Some robots implement only the Version 0.0 specification and ignore Allowlines. In this situation, a robot will behave conservatively, not retrieving URLsthat are permitted.
Caching and Expiration of robots.txt
If a robot had to refetch a robots.txt file before every file access, it would double theload on web servers, as well as making the robot less efficient. Instead, robots areexpected to fetch the robots.txt file periodically and cache the results. The cached copyof robots.txt should be used by the robot until the robots.txt file expires. Standard
HTTP cache-control mechanisms are used by both the origin server and robots to|
control the caching of the robots.txt file. Robots should take note of Cache-Control*and Expires headers in the HTTP response.
Many production crawlers today are not HTTP/1.1 clients; webmasters should notethat those crawlers will not necessarily understand the caching directives providedfor the robots.txt resource.
If no Cache-Control directives are present, the draft specification allows caching forseven days. But, in practice, this often is too long. Web server administrators whodid not know about robots.txt often create one in response to a robotic visit, but ifthe lack of a robots.txt file is cached for a week, the newly created robots.txt file willappear to have no effect, and the site administrator will accuse the robot administra-†tor of not adhering to the Robots Exclusion Standard.
Robot Exclusion Perl Code
Afewpubliclyavailable Perl libraries exist to interact with robots.txt files. One exam-ple is the WWW::RobotsRules module available for the CPAN public Perl archive.
The parsed robots.txt file is kept in the WWW::RobotRules object, which providesmethods to check if access to a given URL is prohibited. The same WWW::
RobotRules object can parse multiple robots.txt files.
Here are the primary methods in the WWW::RobotRules API:
Create RobotRules object$rules = WWW::RobotRules->new($robot_name);
Load the robots.txt file$rules->parse($url, $content, $fresh_until);
Check if a site URL is fetchable$can_fetch = $rules->allowed($url);
Here’s a short Perl program that demonstrates the use of WWW::RobotRules:require WWW::RobotRules;# Create the RobotRules object, naming the robot "SuperRobot"my $robotsrules = new WWW::RobotRules 'SuperRobot/1.0';use LWP::Simple qw(get);# Get and parse the robots.txt file for Joe's Hardware, accumulating the rules$url = "http://www.joes-hardware.com/robots.txt";my $robots_txt = get $url;$robotsrules->parse($url, $robots_txt);* See “Keeping Copies Fresh” in Chapter 7 for more on handling caching directives.†Several large-scale web crawlers use the rule of refetching robots.txt daily when actively crawling the Web.|
# Get and parse the robots.txt file for Mary's Antiques, accumulating the rules$url = "http://www.marys-antiques.com/robots.txt";my $robots_txt = get $url;$robotsrules->parse($url, $robots_txt);# Now RobotRules contains the set of robot exclusion rules for several# different sites. It keeps them all separate. Now we can use RobotRules# to test if a robot is allowed to access various URLs.if ($robotsrules->allowed($some_target_url)){$c = get $url;...}
The following is a hypothetical robots.txt file for www.marys-antiques.com:###################################################################### This is the robots.txt file for Mary's Antiques web site###################################################################### Keep Suzy's robot out of all the dynamic URLs because it doesn't# understand them, and out of all the private data, except for the# small section Mary has reserved on the site for Suzy.
User-Agent: Suzy-Spider
Disallow: /dynamic
Allow: /private/suzy-stuff
Disallow: /private# The Furniture-Finder robot was specially designed to understand# Mary's antique store's furniture inventory program, so let it# crawl that resource, but keep it out of all the other dynamic# resources and out of all the private data.
User-Agent: Furniture-Finder
Allow: /dynamic/check-inventory
Disallow: /dynamic
Disallow: /private# Keep everyone else out of the dynamic gateways and private data.
User-Agent: *
Disallow: /dynamic
Disallow: /private
This robots.txt file contains a record for the robot called SuzySpider, a record for therobot called FurnitureFinder, and a default record for all other robots. Each recordapplies a different set of access policies to the different robots:• The exclusion record for SuzySpider keeps the robot from crawling the storeinventory gateway URLs that start with /dynamic and out of the private userdata, except for the section reserved for Suzy.|
• The record for the FurnitureFinder robot permits the robot to crawl the furni-ture inventory gateway URL. Perhaps this robot understands the format andrules of Mary’s gateway.• All other robots are kept out of all the dynamic and private web pages, thoughthey can crawl the remainder of the URLs.
Table 9-4 lists some examples for different robot accessibility to the Mary’s Antiquesweb site.
Table 9-4. Robot accessibility to the Mary’s Antiques web site
URL                               SuzySpider       FurnitureFinder       NosyBothttp://www.marys-antiques.com/   ✓✓✓http://www.marys-antiques.com/index.html                          ✓✓✓http://www.marys-antiques.com/private/payroll.xls                 ✗✗✗http://www.marys-antiques.com/private/suzy-stuff/taxes.txt        ✓✗✗http://www.marys-antiques.com/dynamic/buy-stuff?id=3546           ✗✗✗http://www.marys-antiques.com/dynamic/check-inventory?kitchen     ✗✓✗
HTML Robot-Control META Tags
The robots.txt file allows a site administrator to exclude robots from some or all of awebsite. One of the disadvantages of the robots.txt file is that it is owned by the website administrator, not the author of the individual content.
HTML page authors have a more direct way of restricting robots from individualpages. They can add robot-control tags to the HTML documents directly. Robotsthat adhere to the robot-control HTML tags will still be able to fetch the documents,but if a robot exclusion tag is present, they will disregard the documents. For exam-ple, an Internet search-engine robot would not include the document in its searchindex. As with the robots.txt standard, participation is encouraged but not enforced.
Robot exclusion tags are implemented using HTML META tags, using the form:<META NAME="ROBOTS" CONTENT=directive-list>
Robot META directives
There are several types of robot META directives, and new directives are likely tobe added over time and as search engines and their robots expand their activitiesand feature sets. The two most-often-used robot META directives are:
NOINDEX
Tells a robot not to process the page’s content and to disregard the document(i.e., not include the content in any index or database).<META NAME="ROBOTS" CONTENT="NOINDEX">|

NOFOLLOW
Tells a robot not to crawl any outgoing links from the page.<META NAME="ROBOTS" CONTENT="NOFOLLOW">
In addition to NOINDEX and NOFOLLOW, there are the opposite INDEX and
FOLLOW directives, the NOARCHIVE directive, and the ALL and NONE direc-tives. These robot META tag directives are summarized as follows:
INDEX
Tells a robot that it may index the contents of the page.
FOLLOW
Tells a robot that it may crawl any outgoing links in the page.
NOARCHIVE*
Tells a robot that it should not cache a local copy of the page.
ALL
Equivalent to INDEX, FOLLOW.
NONE
Equivalent to NOINDEX, NOFOLLOW.
Therobot METAtags, like all HTML META tags, must appear in the HEAD sectionof an HTML page:<html><head><meta name="robots" content="noindex,nofollow"><title>...</title></head><body>...</body></html>
Note that the “robots” name of the tag and the content are case-insensitive.
You obviously should not specify conflicting or repeating directives, such as:<meta name="robots" content="INDEX,NOINDEX,NOFOLLOW,FOLLOW,FOLLOW">the behavior of which likely is undefined and certainly will vary from robot imple-mentation to robot implementation.
Search engine META tags
We just discussed robots META tags, used to control the crawling and indexingactivity of web robots. All robots META tags contain the name="robots" attribute.* This META tag was introduced by the folks who run the Google search engine as a way for webmasters toopt out of allowing Google to serve cached pages of their content. It also can be used with META
NAME="googlebot".|

Many other types of META tags are available, including those shown in Table 9-5.
The DESCRIPTION and KEYWORDS META tags are useful for content-indexingsearch-engine robots.
Table 9-5. Additional META tag directivesname=            content=        Description
DESCRIPTION      <text>          Allowsanauthortodefineashorttextsummaryofthewebpage.Manysearchengineslook at META DESCRIPTION tags, allowing page authors to specify appropriate shortabstracts to describe their web pages.<meta name="description"content="Welcome to Mary's Antiques web site">
KEYWORDS         <comma list>    Associates a comma-separated list of words that describe the web page, to assist inkeyword searches.<meta name="keywords"content="antiques,mary,furniture,restoration">
REVISIT-AFTERa   <no. days>      Instructs the robot or search engine that the page should be revisited, presumablybecause it is subject to change, after the specified number of days.<meta name="revisit-after" content="10 days">a This directive is not likely to have wide support.
Robot Etiquette
In 1993, Martijn Koster, a pioneer in the web robot community, wrote up a list ofguidelines for authors of web robots. While some of the advice is dated, much of itstill is quite useful. Martijn’s original treatise, “Guidelines for Robot Writers,” can befound at http://www.robotstxt.org/wc/guidelines.html.
Table 9-6 provides a modern update for robot designers and operators, basedheavily on the spirit and content of the original list. Most of these guidelines are tar-geted at World Wide Web robots; however, they are applicable to smaller-scalecrawlers too.
Table 9-6. Guidelines for web robot operators
Guideline                 Description(1) Identiﬁcation
Identify Your Robot       UsetheHTTPUser-Agentfieldtotellwebserversthenameofyourrobot.Thiswillhelpadminis-trators understandwhatyourrobotisdoing.SomerobotsalsoincludeaURLdescribingthepur-pose and policies of the robot in the User-Agent header.
Identify Your Machine     Make sure your robot runs from a machine with a DNS entry, so web sites can reverse-DNS therobot IP address into a hostname. This will help the administrator identify the organizationresponsible for the robot.
Identify a Contact        Use the HTTP From field to provide a contact email address.|

Table 9-6. Guidelines for web robot operators (continued)
Guideline                  Description(2) Operations
Be Alert                   Your robot will generate questions and complaints. Some of this is caused by robots that runastray. You must be cautious and watchful that your robot is behaving correctly. If your robotruns around the clock, you need to be extra careful. You may need to have operations peoplemonitoring the robot 24 × 7 until your robot is well seasoned.
Be Prepared                When you begin a major robotic journey, be sure to notify people at your organization. Yourorganizationwillwanttowatchfornetworkbandwidthconsumptionandbereadyforanypub-lic inquiries.
Monitor and Log            Your robot should be richly equipped with diagnostics and logging, so you can track progress,identify any robot traps, and sanity check that everything is working right. We cannot stressenoughtheimportanceofmonitoringandloggingarobot’sbehavior.Problemsandcomplaintswillarise,andhavingdetailedlogsofacrawler’sbehaviorcanhelparobotoperatorbacktracktowhat has happened. This is important not only for debugging your errant web crawler but alsofor defending its behavior against unjustified complaints.
Learn and Adapt            Eachcrawl,youwilllearnnewthings.Adaptyourrobotsoitimproveseachtimeandavoidsthecommon pitfalls.(3) Limit Yourself
Filter on URL              If a URL looks like it refers to data that you don’t understand or are not interested in, you mightwant to skip it. For example, URLs ending in “.Z”, “.gz”, “.tar”, or “.zip” are likely to be com-pressed files or archives. URLs ending in “.exe” are likely to be programs. URLs ending in “.gif”,“.tif”, “.jpg” are likely to be images. Make sure you get what you are after.
Filter Dynamic URLs        Usually,robotsdon’twanttocrawlcontentfromdynamicgateways.Therobotwon’tknowhowto properly format and post queries to gateways, and the results are likely to be erratic or tran-sient. If a URL contains “cgi” or has a “?”, the robot may want to avoid crawling the URL.
Filter with Accept Headers Your robot should use HTTP Accept headers to tell servers what kind of content it understands.
Adhere torobots.txt        Your robot should adhere to the robots.txt controls on the site.
Throttle Yourself          Your robot should count the number of accesses to each site and when they occurred, and usethis information to ensure that it doesn’t visit any site too frequently. When a robot accesses asite more frequently than every few minutes, administrators get suspicious. When a robotaccessesasiteeveryfewseconds,someadministratorsgetangry.Whenarobothammersasiteas fast as it can, shutting out all other traffic, administrators will be furious.
In general, you should limit your robot to a few requests per minute maximum, and ensure afew seconds between each request. You also should limit the total number of accesses to a site,to prevent loops.(4) Tolerate Loops and Dups and Other Problems
Handle All Return Codes    YoumustbepreparedtohandleallHTTPstatuscodes,includingredirectsanderrors.Youshouldalso log and monitor these codes. A large number of non-success results on a site should causeinvestigation. It may be that many URLs are stale, or the server refuses to serve documents torobots.
Canonicalize URLs          Try to remove common aliases by normalizing all URLs into a standard form.
Aggressively Avoid Cycles  Work very hard to detect and avoid cycles. Treat the process of operating a crawl as a feedbackloop. The results of problems and their resolutions should be fed back into the next crawl, mak-ing your crawler better with each iteration.|

Table 9-6. Guidelines for web robot operators (continued)
Guideline                     Description
Monitor for Traps             Some types of cycles are intentional and malicious. These may be intentionally hard to detect.
Monitor for large numbers of accesses to a site with strange URLs. These may be traps.
Maintain a Blacklist          Whenyoufindtraps,cycles,brokensites,andsitesthatwantyourrobottostayaway,addthemto a blacklist, and don’t visit them again.(5) Scalability
Understand Space              Work out the math in advance for how large a problem you are solving. You may be surprisedhowmuchmemoryyourapplicationwillrequiretocompletearobotictask,becauseofthehugescale of the Web.
Understand Bandwidth          Understand how much network bandwidth you have available and how much you will need tocomplete your robotic task in the required time. Monitor the actual usage of network band-width. You probably will find that the outgoing bandwidth (requests) is much smaller than theincomingbandwidth(responses).Bymonitoringnetworkusage,youalsomayfindthepotentialtobetteroptimizeyourrobot,allowingittotakebetteradvantageofthenetworkbandwidthbyabetter usage of its TCP connections.
Understand Time               Understandhowlongitshouldtakeforyourrobottocompleteitstask,andsanitycheckthattheprogress matches your estimate. If your robot is way off your estimate, there probably is a prob-lem worth investigating.
Divide and Conquer            For large-scale crawls, you will likely need to apply more hardware to get the job done, eitherusingbigmultiprocessorserverswithmultiplenetworkcards,orusingmultiplesmallercomput-ers working in unison.(6) Reliability
Test Thoroughly               Test your robot thoroughly internally before unleashing it on the world. When you are ready totest off-site, run a few, small, maiden voyages first. Collect lots of results and analyze your per-formance and memory use, estimating how they will scale up to the larger problem.
Checkpoint                    Any serious robot will need to save a snapshot of its progress, from which it can restart on fail-ure.Therewillbefailures:youwillfindsoftwarebugs,andhardwarewillfail.Large-scalerobotscan’t start from scratch each time this happens. Design in a checkpoint/restart feature from thebeginning.
Fault Resiliency              Anticipate failures, and design your robot to be able to keep making progress when they occur.(7) Public Relations
Be Prepared                   Your robot probably will upset a number of people. Be prepared to respond quickly to theirenquiries. Make a web page policy statement describing your robot, and include detailedinstructions on how to create a robots.txt file.
Be Understanding              Some of the people who contact you about your robot will be well informed and supportive;others will be naïve. A few will be unusually angry. Some may well seem insane. It’s generallyunproductive to argue the importance of your robotic endeavor. Explain the Robots Exclusion
Standard, and if they are still unhappy, remove the complainant URLs immediately from yourcrawl and add them to the blacklist.
Be Responsive                 Most unhappy webmasters are just unclear about robots. If you respond immediately and pro-fessionally, 90% of the complaints will disappear quickly. On the other hand, if you wait severaldays before responding, while your robot continues to visit a site, expect to find a very vocal,angry opponent.a See Chapter4 for more on optimizing TCP performance.|

Search Engines
ThemostwidespreadwebrobotsareusedbyInternetsearchengines.Internet searchengines allow users to find documents about any subject all around the world.
ManyofthemostpopularsitesontheWebtodayaresearchengines.Theyserveasastarting point for many web users and provide the invaluable service of helping usersfind the information in which they are interested.
Webcrawlers feed Internet search engines, by retrieving the documents that exist onthe Web and allowing the search engines to create indexes of what words appear inwhat documents, much like the index at the back of this book. Search engines arethe leading source of web robots—let’s take a quick look at how they work.
Think Big
When the Web was in its infancy, search engines were relatively simple databasesthat helped users locate documents on the Web. Today, with the billions of pagesaccessible on the Web, search engines have become essential in helping Internetusers find information. They also have become quite complex, as they have had toevolve to handle the sheer scale of the Web.
With billions of web pages and many millions of users looking for information,search engines have to deploy sophisticated crawlers to retrieve these billions of webpages, as well as sophisticated query engines to handle the query load that millionsof users generate.
Think about the task of a production web crawler, having to issue billions of HTTPqueries in order to retrieve the pages needed by the search index. If each request tookhalf a second to complete (which is probably slow for some servers and fast for oth-ers*), that still takes (for 1 billion documents):0.5 seconds × (1,000,000,000) / ((60 sec/day) × (60 min/hour) × (24 hour/day))whichworksouttoroughly5,700daysiftherequestsaremadesequentially! Clearly,large-scale crawlers need to be more clever, parallelizing requests and using banks ofmachines to complete the task. However, because of its scale, trying to crawl theentire Web still is a daunting challenge.
Modern Search Engine Architecture
Today’s search engines build complicated local databases, called “full-text indexes,”about the web pages around the world and what they contain. These indexes act as asort of card catalog for all the documents on the Web.* This depends on the resources of the server, the client robot, and the network between the two.|

Search-engine crawlers gather up web pages and bring them home, adding them tothe full-text index. At the same time, search-engine users issue queries against thefull-text index through web search gateways such as HotBot (http://www.hotbot.com)or Google (http://www.google.com). Because the web pages are changing all the time,and because of the amount of time it can take to crawl a large chunk of the Web, thefull-text index is at best a snapshot of the Web.
The high-level architecture of a modern search engine is shown in Figure 9-7.
User
Web server
User
Web search           Full-text index        Search engine              Web servergateway                database           crawler/indexer
User
User                      Web server
Web search users                   Query engine                              Crawling and indexing
Figure 9-7. A production search engine contains cooperating crawlers and query gateways
Full-Text Index
A full-text index is a database that takes a word and immediately tells you all thedocuments that contain that word. The documents themselves do not need to bescanned after the index is created.
Figure 9-8 shows three documents and the corresponding full-text index. The full-text index lists the documents containing each word.
For example:• The word “a” is in documents A and B.• The word “best” is in documents A and C.• The word “drill” is in documents A and B.• The word “routine” is in documents B and C.• The word “the” is in all three documents, A, B, and C.|

Word             Documentsa                     ABbest                  AC
A               buy                   Adrill                 AB
We have the best tools,                         electric              Alike the WorkMaster 5000                        fat                           Celectric drill. Buy a drill                     fire                      Bfrom us today! from
A
B               have                  Ainto                      B
The routine fire drill                          know                          Cturned into tragedy today                       lose                          C. . .          routine                   BCthe                   ABC
C               to                            Ctoday                 AB
We know the best                                tools                 Aroutine to lose fat.                            tragedy                   Bturned                    Bus                    Awe                    ACworkmaster            A
Figure 9-8. Three documents and a full-text index
Posting the Query
Whenauser issues a query to a web search-engine gateway, she fills out an HTMLform and her browser sends the form to the gateway, using an HTTP GET or POSTrequest. The gateway program extracts the search query and converts the web UI*query into the expression used to search the full-text index.
Figure 9-9 shows a simple user query to the www.joes-hardware.com site. The usertypes “drills” into the search box form, and the browser translates this into a GETrequest with the query parameter as part of the URL.† The Joe’s Hardware webserver receives the query and hands it off to its search gateway application, whichreturns the resulting list of documents to the web server, which in turn formats thoseresults into an HTML page for the user.
Sorting and Presenting the Results
Onceasearch engine has used its index to determine the results of a query, the gate-way application takes the results and cooks up a results page for the end user.* The method for passing this query is dependent on the search solution being used.†“Query Strings” in Chapter 2 discusses the common use of the query parameter in URLs.|

Welcome to Joe’s Hardware
Search for:  drills
Submit
User fills out HTML search form(with a GET action HTTP method)on site in browser and hits Submit
Client
Request message
GET /search.html?query=drills HTTP/1.1                           Query: “drills”
Host: www.joes-hardware.com
Accept: *     Results: File “BD.html”
User-agent: ShopBotwww.joes-hardware.com        Search gateway
Response message
HTTP/1.1 200 OK
Content-type: text/html
Content-length: 1037<HTML><HEAD><TITLE>Search Results</TITLE><A HREF=/BD.html>Black and Decker Drills</A>[...]
Figure 9-9. Example search query request
Since many web pages can contain any given word, search engines deploy cleveralgorithms to try to rank the results. For example, in Figure 9-8, the word “best”appears in multiple documents; search engines need to know the order in which theyshould present the list of result documents in order to present users with the mostrelevant results. This is called relevancy ranking—the process of scoring and order-ing a list of search results.
Tobetter aid this process, many of the larger search engines actually use census datacollected during the crawl of the Web. For example, counting how many links pointto a given page can help determine its popularity, and this information can be usedto weight the order in which results are presented. The algorithms, tips from crawl-ing, and other tricks used by search engines are some of their most guarded secrets.
Spooﬁng
Since users often get frustrated when they do not see what they are looking for in thefirst few results of a search query, the order of search results can be important infinding a site. There is a lot of incentive for webmasters to attempt to get their siteslisted near the top of the results sections for the words that they think best describe|
their sites, particularly if the sites are commercial and are relying on users to findthem and use their services.
This desire for better listing has led to a lot of gaming of the search system and hascreated a constant tug-of-war between search-engine implementors and those seek-ing to get their sites listed prominently. Many webmasters list tons of keywords(some irrelevant) and deploy fake pages, or spoofs—even gateway applications thatgenerate fake pages that may better trick the search engines’ relevancy algorithms forparticular words.
As a result of all this, search engine and robot implementors constantly have totweak their relevancy algorithms to better catch these spoofs.
For More Information
For more information on web clients, refer to:http://www.robotstxt.org/wc/robots.html
The Web Robots Pages—resources for robot developers, including the registryof Internet Robots.http://www.searchengineworld.com
Search Engine World—resources for search engines and robots.http://www.searchtools.com
Search Tools for Web Sites and Intranets—resources for search tools and robots.http://search.cpan.org/doc/ILYAZ/perl_ste/WWW/RobotRules.pm
RobotRules Perl source.http://www.conman.org/people/spc/robots2.html
An Extended Standard for Robot Exclusion.
Managing Gigabytes: Compressing and Indexing Documents and Images
Witten, I., Moffat, A., and Bell, T., Morgan Kaufmann.|

CHAPTER 10
HTTP-NG
As this book nears completion, HTTP is celebrating its tenth birthday. And it hasbeen quite an accomplished decade for this Internet protocol. Today, HTTP movesthe absolute majority of digital traffic around the world.
But as HTTP grows into its teenage years it faces a few challenges. In some ways, thepace of HTTP adoption has gotten ahead of its design. Today, people are using
HTTP as a foundation for many diverse applications, over many different network-ing technologies.
This chapter outlines some of the trends and challenges for the future of HTTP, anda proposal for a next-generation architecture called HTTP-NG. While the workinggroup for HTTP-NG has disbanded and its rapid adoption now appears unlikely, itnonetheless outlines some potential future directions of HTTP.
HTTP’s Growing Pains
HTTPoriginally was conceived as a simple technique for accessing linked multime-dia content from distributed information servers. But, over the past decade, HTTPand its derivatives have taken on a much broader role.
HTTP/1.1 now provides tagging and fingerprinting to track document versions,methods to support document uploading and interactions with programmatic gate-ways, support for multilingual content, security and authentication, caching toreduce traffic, pipelining to reduce latency, persistent connections to reduce startuptime and improve bandwidth, and range accesses to implement partial updates.
Extensions and derivatives of HTTP have gone even further, supporting documentpublishing, application serving, arbitrary messaging, video streaming, and founda-tions for wireless multimedia access. HTTP is becoming a kind of “operating sys-tem” for distributed media applications.247
Thedesign of HTTP/1.1, while well considered, is beginning to show some strains as
HTTPis used more and more as a unified substrate for complex remote operations.
There are at least four areas where HTTP shows some growing pains:
Complexity
HTTPisquite complex, and its features are interdependent. It is decidedly pain-ful and error-prone to correctly implement HTTP software, because of the com-plex, interwoven requirements and the intermixing of connection management,message handling, and functional logic.
Extensibility
HTTPisdifficult to extend incrementally. There are many legacy HTTP applica-tions that create incompatibilities for protocol extensions, because they containno technology for autonomous functionality extensions.
Performance
HTTP has performance inefficiencies. Many of these inefficiencies will becomemore serious with widespread adoption of high-latency, low-throughput wire-less access technologies.
Transport dependence
HTTP is designed around a TCP/IP network stack. While there are no restric-tions against alternative substacks, there has been little work in this area. HTTPneeds to provide better support for alternative substacks for it to be useful as abroader messaging platform in embedded and wireless applications.
HTTP-NG Activity
In the summer of 1997, the World Wide Web Consortium launched a special projectto investigate and propose a major new version of HTTP that would fix the prob-lems related to complexity, extensibility, performance, and transport dependence.
This new HTTP was called HTTP: The Next Generation (HTTP-NG).
Aset of HTTP-NG proposals was presented at an IETF meeting in December 1998.
These proposals outlined one possible major evolution of HTTP. This technologyhas not been widely implemented (and may never be), but HTTP-NG does representthe most serious effort toward extending the lineage of HTTP. Let’s look at HTTP-
NG in more detail.
Modularize and Enhance
ThethemeofHTTP-NGcanbecapturedinthreewords:“modularizeandenhance.”
Instead of having connection management, message handling, server processinglogic, and protocol methods all intermixed, the HTTP-NG working group proposedmodularizing the protocol into three layers, illustrated in Figure 10-1:|
• Layer 1, the message transport layer, focuses on delivering opaque messagesbetween endpoints, independent of the function of the messages. The messagetransport layer supports various substacks (for example, stacks for wireless envi-ronments) and focuses on the problems of efficient message delivery and han-dling. The HTTP-NG project team proposed a protocol called WebMUX for thislayer.• Layer 2, the remote invocation layer, defines request/response functionalitywhere clients can invoke operations on server resources. This layer is indepen-dent of message transport and of the precise semantics of the operations. It justprovides a standard way of invoking any server operation. This layer attempts toprovide an extensible, object-oriented framework more like CORBA, DCOM,and Java RMI than like the static, server-defined methods of HTTP/1.1. The
HTTP-NG project team proposed the Binary Wire Protocol for this layer.• Layer 3, the web application layer, provides most of the content-managementlogic. All of the HTTP/1.1 methods (GET, POST, PUT, etc.), as well as the
HTTP/1.1 header parameters, are defined here. This layer also supports otherservices built on top of remote invocation, such as WebDAV.
Layer 3        Web application functions
HTTP-NG     Layer 2      Remote operation invocation             Binary Wire Protocol
Layer 1            Message transport                 WebMUX
Underlying network transport            TCP/IP
Figure 10-1. HTTP-NG separates functions into layers
Once the HTTP components are modularized, they can be enhanced to provide bet-ter performance and richer functionality.
Distributed Objects
Much of the philosophy and functionality goals of HTTP-NG borrow heavily fromstructured, object-oriented, distributed-objects systems such as CORBA and DCOM.
Distributed-objects systems can help with extensibility and feature functionality.
Acommunity of researchers has been arguing for a convergence between HTTP andmore sophisticated distributed-objects systems since 1996. For more informationabout the merits of a distributed-objects paradigm for the Web, check out the earlypaper from Xerox PARC entitled “Migrating the Web Toward Distributed Objects”(ftp://ftp.parc.xerox.com/pub/ilu/misc/webilu.html).|

The ambitious philosophy of unifying the Web and distributed objects createdresistance to HTTP-NG’s adoption in some communities. Some past distributed-objects systems suffered from heavyweight implementation and formal complexity.
The HTTP-NG project team attempted to address some of these concerns in therequirements.
Layer 1: Messaging
Let’s take a closer look at the three layers of HTTP-NG, starting with the lowest layer.
Themessagetransport layer is concerned with the efficient delivery of messages, inde-pendent of the meaning and purpose of the messages. The message transport layerprovides an API for messaging, regardless of the actual underlying network stack.
This layer focuses on improving the performance of messaging, including:• Pipelining and batching messages to reduce round-trip latency• Reusing connections to reduce latency and improve delivered bandwidth• Multiplexing multiple message streams in parallel, over the same connection, tooptimize shared connections while preventing starvation of message streams• Efficient message segmentation to make it easier to determine message boundaries
The HTTP-NG team invested much of its energy into the development of the Web-
MUXprotocol for layer 1 message transport. WebMUX is a high-performance mes-sage protocol that fragments and interleaves messages across a multiplexed TCPconnection. We discuss WebMUX in a bit more detail later in this chapter.
Layer 2: Remote Invocation
The middle layer of the HTTP-NG architecture supports remote method invocation.
This layer provides a generic request/response framework where clients invoke opera-tions on server resources. This layer does not concern itself with the implementationand semantics of the particular operations (caching, security, method logic, etc.); it isconcerned only with the interface to allow clients to remotely invoke server operations.
Many remote method invocation standards already are available (CORBA, DCOM,and Java RMI, to name a few), and this layer is not intended to support every niftyfeature of these systems. However, there is an explicit goal to extend the richness of
HTTPRMIsupportfromthatprovided by HTTP/1.1. In particular, there is a goal toprovide more general remote procedure call support, in an extensible, object-orientedmanner.
The HTTP-NGteamproposedtheBinary Wire Protocol for this layer. This protocolsupports a high-performance, extensible technology for invoking well-describedoperations on a server and carrying back the results. We discuss the Binary Wire Pro-tocol in a bit more detail later in this chapter.|

Layer 3: Web Application
The web application layer is where the semantics and application-specific logic areperformed. The HTTP-NGworkinggroupshiedawayfromthetemptationtoextendthe HTTP application features, focusing instead on formal infrastructure.
The web application layer describes a system for providing application-specific ser-vices. These services are not monolithic; different APIs may be available for differentapplications. For example, the web application for HTTP/1.1 would constitute a dif-ferent application from WebDAV, though they may share some common parts. The
HTTP-NG architecture allows multiple applications to coexist at this level, sharingunderlying facilities, and provides a mechanism for adding new applications.
The philosophy of the web application layer is to provide equivalent functionality for
HTTP/1.1 and extension interfaces, while recasting them into a framework of extensi-ble distributed objects. You can read more about the web application layer interfacesat http://www.w3.org/Protocols/HTTP-NG/1998/08/draft-larner-nginterfaces-00.txt.
WebMUX
TheHTTP-NGworkinggrouphasinvestedmuchofitsenergyinthedevelopmentofthe WebMUX standard for message transport. WebMUX is a sophisticated, high-performance message system, where messages can be transported in parallel across amultiplexed TCP connection. Individual message streams, produced and consumedat different rates, can efficiently be packetized and multiplexed over a single or smallnumber of TCP connections (see Figure 10-2).
Message A                Message A
Message B                Message B
Message C                Message C
Message D                Message D
Figure 10-2. WebMUX can multiplex multiple messages over a single connection
Here are some of the significant goals of the WebMUX protocol:• Simple design.• High performance.• Multiplexing—Multiple data streams (of arbitrary higher-level protocols) can beinterleaved dynamically and efficiently over a single connection, without stallingdata waiting for slow producers.|
• Credit-based flow control—Data is produced and consumed at different rates,and senders and receivers have different amounts of memory and CPU resourcesavailable. WebMUX uses a “credit-based” flow-control scheme, where receiverspreannounce interest in receiving data to prevent resource-scarcity deadlocks.• Alignment preserving—Data alignment is preserved in the multiplexed stream sothat binary data can be sent and processed efficiently.• Rich functionality—The interface is rich enough to support a sockets API.
You can read more about the WebMUX Protocol at http://www.w3.org/Protocols/
MUX/WD-mux-980722.html.
Binary Wire Protocol
The HTTP-NG team proposed the Binary Wire Protocol to enhance how the next-generation HTTP protocol supports remote operations.
HTTP-NG defines “object types” and assigns each object type a list of methods.
Each object type is assigned a URI, so its description and methods can be advertised.
In this way, HTTP-NG is proposing a more extensible and object-oriented executionmodel than that provided with HTTP/1.1, where all methods were statically definedin the servers.
TheBinaryWireProtocolcarries operation-invocation requests from the client to theserver and operation-result replies from the server to the client across a stateful con-nection. The stateful connection provides extra efficiency.
Request messages contain the operation, the target object, and optional data values.
Reply messages carry back the termination status of the operation, the serial numberof the matching request (allowing arbitrary ordering of parallel requests andresponses), and optional return values. In addition to request and reply messages,this protocol defines several internal control messages used to improve the efficiencyand robustness of the connection.
You can read more about the Binary Wire Protocol at http://www.w3.org/Protocols/
HTTP-NG/1998/08/draft-janssen-httpng-wire-00.txt.
Current Status
At the end of 1998, the HTTP-NG team concluded that it was too early to bring the
HTTP-NG proposals to the IETF for standardization. There was concern that theindustry and community had not yet fully adjusted to HTTP/1.1 and that the signifi-cant HTTP-NG rearchitecture to a distributed-objects paradigm would have beenextremely disruptive without a clear transition plan.|

Two proposals were made:• Instead of attempting to promote the entire HTTP-NG rearchitecture in onestep, it was proposed to focus on the WebMUX transport technology. But at thetime of this writing, there hasn’t been sufficient interest to establish a WebMUXworking group.• An effort was launched to investigate whether formal protocol types can bemadeflexible enough for use on the Web, perhaps using XML. This is especiallyimportant for a distributed-objects system that is extensible. This work is still inprogress.
At the time of this writing, no major driving HTTP-NG effort is underway. But, withthe ever-increasing use of HTTP, its growing use as a platform for diverse applica-tions, and the growing adoption of wireless and consumer Internet technology, someof the techniques proposed in the HTTP-NG effort may prove significant in HTTP’steenage years.
For More Information
For more information about HTTP-NG, please refer to the following detailed specifi-cations and activity reports:http://www.w3.org/Protocols/HTTP-NG/
HTTP-NG Working Group (Proposed), W3C Consortium Web Site.http://www.w3.org/Protocols/MUX/WD-mux-980722.html“The WebMUX Protocol,” by J. Gettys and H. Nielsen.http://www.w3.org/Protocols/HTTP-NG/1998/08/draft-janssen-httpng-wire-00.txt“Binary Wire Protocol for HTTP-NG,” by B. Janssen.http://www.w3.org/Protocols/HTTP-NG/1998/08/draft-larner-nginterfaces-00.txt“HTTP-NG Web Interfaces,” by D. Larner.ftp://ftp.parc.xerox.com/pub/ilu/misc/webilu.html“Migrating the Web Toward Distributed Objects,” by D. Larner.|

PART III
Identiﬁcation, Authorization,and Security
The four chapters in Part III present a suite of techniques and technologies to trackidentity, enforce security, and control access to content:• Chapter11, Client Identification and Cookies, talks about techniques to identifyusers, so content can be personalized to the user audience.• Chapter12, Basic Authentication, highlights the basic mechanisms to verify useridentity. This chapter also examines how HTTP authentication interfaces withdatabases.• Chapter13, Digest Authentication, explains digest authentication, a complexproposed enhancement to HTTP that provides significantly enhanced security.• Chapter14, Secure HTTP, is a detailed overview of Internet cryptography, digi-tal certificates, and the Secure Sockets Layer (SSL).
CHAPTER 11
Client Identiﬁcation and Cookies
Webservers may talk to thousands of different clients simultaneously. These serversoften need to keep track of who they are talking to, rather than treating all requestsas coming from anonymous clients. This chapter discusses some of the technologiesthat servers can use to identify who they are talking to.
The Personal Touch
HTTPbeganitslifeasananonymous,stateless, request/response protocol. A requestcamefromaclient, was processed by the server, and a response was sent back to theclient. Little information was available to the web server to determine what user sentthe request or to keep track of a sequence of requests from the visiting user.
Modernwebsites want to provide a personal touch. They want to know more aboutusers on the other ends of the connections and be able to keep track of those users asthey browse. Popular online shopping sites like Amazon.com personalize their sitesfor you in several ways:
Personal greetings
Welcome messages and page contents are generated specially for the user, tomake the shopping experience feel more personal.
Targeted recommendations
By learning about the interests of the customer, stores can suggest products thatthey believe the customer will appreciate. Stores can also run birthday specialsnear customers’ birthdays and other significant days.
Administrative information on file
Online shoppers hate having to fill in cumbersome address and credit card formsover and over again. Some sites store these administrative details in a database.
Oncetheyidentify you, they can use the administrative information on file, mak-ing the shopping experience much more convenient.257
Session tracking
HTTP transactions are stateless. Each request/response happens in isolation.
Many web sites want to build up incremental state as you interact with the site(for example, filling an online shopping cart). To do this, web sites need a way todistinguish HTTP transactions from different users.
This chapter summarizes a few of the techniques used to identify users in HTTP.
HTTPitself was not born with a rich set of identification features. The early web-sitedesigners (practical folks that they were) built their own technologies to identifyusers. Each technique has its strengths and weaknesses. In this chapter, we’ll discussthe following mechanisms to identify users:• HTTP headers that carry information about user identity• Client IP address tracking, to identify users by their IP addresses• User login, using authentication to identify users• Fat URLs, a technique for embedding identity in URLs• Cookies, a powerful but efficient technique for maintaining persistent identity
HTTP Headers
Table 11-1 shows the seven HTTP request headers that most commonly carry infor-mation about the user. We’ll discuss the first three now; the last four headers areused for more advanced identification techniques that we’ll discuss later.
Table 11-1. HTTP headers carry clues about users
Header name                      Header type                        Description
From                             Request                            User’s email address
User-Agent                       Request                            User’s browser software
Referer                          Request                            Page user came from by following link
Authorization                    Request                            Username and password (discussed later)
Client-ip                        Extension (Request)                Client’s IP address (discussed later)
X-Forwarded-For                  Extension (Request)                Client’s IP address (discussed later)
Cookie                           Extension (Request)                Server-generated ID label (discussed later)
The From header contains the user’s email address. Ideally, this would be a viablesource of user identification, because each user would have a different email address.
However, few browsers send From headers, due to worries of unscrupulous serverscollecting email addresses and using them for junk mail distribution. In practice,
From headers are sent by automated robots or spiders so that if something goesastray, a webmaster has someplace to send angry email complaints.|

The User-Agent header tells the server information about the browser the user isusing, including the name and version of the program, and often information aboutthe operating system. This sometimes is useful for customizing content to interoper-ate well with particular browsers and their attributes, but that doesn’t do much tohelp identify the particular user in any meaningful way. Here are two User-Agentheaders, one sent by Netscape Navigator and the other by Microsoft Internet Explorer:
Navigator 6.2
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:0.9.4) Gecko/20011128
Netscape6/6.2.1
Internet Explorer 6.01
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)
The Referer header provides the URL of the page the user is coming from. The Ref-erer header alone does not directly identify the user, but it does tell what page theuser previously visited. You can use this to better understand user browsing behav-ior and user interests. For example, if you arrive at a web server coming from a base-ball site, the server may infer you are a baseball fan.
The From, User-Agent, and Referer headers are insufficient for dependable identifi-cation purposes. The remaining sections discuss more precise schemes to identifyparticular users.
Client IP Address
Early web pioneers tried using the IP address of the client as a form of identification.
This scheme works if each user has a distinct IP address, if the IP address seldom (ifever) changes, and if the web server can determine the client IP address for eachrequest. While the client IP address typically is not present in the HTTP headers,*web servers can find the IP address of the other side of the TCP connection carryingthe HTTP request. For example, on Unix systems, the getpeername function callreturns the client IP address of the sending machine:status = getpeername(tcp_connection_socket,...);
Unfortunately, using the client IP address to identify the user has numerous weak-nesses that limit its effectiveness as a user-identification technology:• Client IP addresses describe only the computer being used, not the user. If multi-ple users share the same computer, they will be indistinguishable.• Many Internet service providers dynamically assign IP addresses to users whenthey log in. Each time they log in, they get a different address, so web serverscan’t assume that IP addresses will identify a user across login sessions.* As we’ll see later, some proxies do add a Client-ip header, but this is not part of the HTTP standard.|
• To enhance security and manage scarce addresses, many users browse the Inter-net through Network Address Translation (NAT) firewalls. These NAT devicesobscure the IP addresses of the real clients behind the firewall, converting theactual client IP address into a single, shared firewall IP address (and differentport numbers).• HTTP proxies and gateways typically open new TCP connections to the originserver. The web server will see the IP address of the proxy server instead of thatof the client. Some proxies attempt to work around this problem by adding spe-cial Client-ip or X-Forwarded-For HTTP extension headers to preserve the origi-nal IP address (Figure 11-1). But not all proxies support this behavior.
Proxy server
Client                   56.41.11.4                   Server209.172.34.56     Client-ip: 209.172.34.56
X-Forwarded-For: 209.172.34.56
Figure 11-1. Proxies can add extension headers to pass along the original client IP address
Some web sites still use client IP addresses to keep track of the users between ses-sions, but not many. There are too many places where IP address targeting doesn’twork well.
Afewsites even use client IP addresses as a security feature, serving documents onlyto users from a particular IP address. While this may be adequate within the con-fines of an intranet, it breaks down in the Internet, primarily because of the ease withwhich IP addresses are spoofed (forged). The presence of intercepting proxies in thepath also breaks this scheme. Chapter 14 discusses much stronger schemes for con-trolling access to privileged documents.
User Login
Rather than passively trying to guess the identity of a user from his IP address, a webserver can explicitly ask the user who he is by requiring him to authenticate (log in)with a username and password.
To help make web site logins easier, HTTP includes a built-in mechanism to passusername information to web sites, using the WWW-Authenticate and Authoriza-tion headers. Once logged in, the browsers continually send this login informationwith each request to the site, so the information is always available. We’ll discussthis HTTP authentication in much more detail in Chapter 12, but let’s take a quicklook at it now.|

If a server wants a user to register before providing access to the site, it can send backan HTTP 401 Login Required response code to the browser. The browser will thendisplay a login dialog box and supply the information in the next request to the*browser, using the Authorization header.  This is depicted in Figure 11-2.(a)                              GET /index.html HTTP/1.0
Host: www.joes-hardware.com
Internet
Client Server(b)                                HTTP/1.0 401 Login Required
WWW-authenticate: Basic realm="Plumbing and Fixtures"
Internet
Client Server(c)                             GET /index.html HTTP/1.0
Host: www.joes-hardware.com
Authorization: Basic am910jRmdW4=
Internet
Client Server(d)                                HTTP/1.0 200 OK
Content-length: 4342
Content-type: text/html...
Internet
Client Server
Figure 11-2. Registering username using HTTP authentication headers
Here’s what’s happening in this figure:• In Figure 11-2a, a browser makes a request from the www.joes-hardware.com site.• The site doesn’t know the identity of the user, so in Figure 11-2b, the serverrequests a login by returning the 401 Login Required HTTP response code and* To save users from having to log in for each request, most browsers will remember login information for asite and pass in the login information for each request to the site.|
adds the WWW-Authenticate header. This causes the browser to pop up a logindialog box.• Once the user enters a username and a password (to sanity check his identity),the browser repeats the original request. This time it adds an Authorizationheader, specifying the username and password. The username and password are*scrambled, to hide them from casual or accidental network observers.• Now, the server is aware of the user’s identity.• For future requests, the browser will automatically issue the stored usernameandpasswordwhenaskedandwilloftenevensendittothesitewhennotasked.
This makes it possible to log in once to a site and have your identity maintainedthrough the session, by having the browser send the Authorization header as atoken of your identity on each request to the server.
However, logging in to web sites is tedious. As Fred browses from site to site, he’llneed to log in for each site. To make matters worse, it is likely that poor Fred willneed to remember different usernames and passwords for different sites. His favoriteusername, “fred,” will already have been chosen by someone else by the time he vis-its many sites, and some sites will have different rules about the length and composi-tion of usernames and passwords. Pretty soon, Fred will give up on the Internet andgo back to watching Oprah. The next section discusses a solution to this problem.
Fat URLs
Somewebsiteskeeptrackofuseridentitybygenerating special versions of each URLfor each user. Typically, a real URL is extended by adding some state information tothe start or end of the URL path. As the user browses the site, the web server dynam-ically generates hyperlinks that continue to maintain the state information in the
URLs.
URLs modified to include user state information are called fat URLs. The followingare some example fat URLs used in the Amazon.com e-commerce web site. Each
URL is suffixed by a user-unique identification number (002-1145265-8016838, inthis case) that helps track a user as she browses the store....<a href="/exec/obidos/tg/browse/-/229220/ref=gr_gifts/002-1145265-8016838">All
Gifts</a><br><a href="/exec/obidos/wishlist/ref=gr_pl1_/002-1145265-8016838">Wish List</a><br>...<a href="http://s1.amazon.com/exec/varzea/tg/armed-forces/-//ref=gr_af_/002-1145265-8016838">Salute Our Troops</a><br><a href="/exec/obidos/tg/browse/-/749188/ref=gr_p4_/002-1145265-8016838">Free
Shipping</a><br>* AswewillseeinChapter14,theHTTPbasicauthenticationusernameandpasswordcaneasilybeunscram-bled by anyone who wants to go through a minimal effort. More secure techniques will be discussed later.|
<a href="/exec/obidos/tg/browse/-/468532/ref=gr_returns/002-1145265-8016838">Easy
Returns</a>...
You can use fat URLs to tie the independent HTTP transactions with a web serverinto a single “session” or “visit.” The first time a user visits the web site, a unique ID isgenerated, it is added to the URL in a server-recognizable way, and the server redi-rects the client to this fat URL. Whenever the server gets a request for a fat URL, it canlook up any incremental state associated with that user ID (shopping carts, profiles,etc.), and it rewrites all outgoing hyperlinks to make them fat, to maintain the user ID.
Fat URLscanbeusedtoidentifyusersastheybrowseasite.Butthistechnologydoeshave several serious problems. Some of these problems include:
Ugly URLs
The fat URLs displayed in the browser are confusing for new users.
Can’t share URLs
The fat URLs contain state information about a particular user and session. Ifyoumailthat URLtosomeoneelse,youmayinadvertentlybesharingyouraccu-mulated personal information.
Breaks caching
Generating user-specific versions of each URL means that there are no longercommonly accessed URLs to cache.
Extra server load
The server needs to rewrite HTML pages to fatten the URLs.
Escape hatches
It is too easy for a user to accidentally “escape” from the fat URL session byjumpingtoanothersite or by requesting a particular URL. Fat URLs work only ifthe user strictly follows the premodified links. If the user escapes, he may losehis progress (perhaps a filled shopping cart) and will have to start again.
Not persistent across sessions
All information is lost when the user logs out, unless he bookmarks the particu-lar fat URL.
Cookies
Cookies are the best current way to identify users and allow persistent sessions. Theydon’t suffer many of the problems of the previous techniques, but they often are usedin conjunction with those techniques for extra value. Cookies were first developed by
Netscape but now are supported by all major browsers.
Because cookies are important, and they define new HTTP headers, we’re going toexplore them in more detail than we did the previous techniques. The presence ofcookies also impacts caching, and most caches and browsers disallow caching of anycookied content. The following sections present more details.|

Types of Cookies
Youcanclassify cookies broadly into two types: session cookies and persistent cook-ies. A session cookie is a temporary cookie that keeps track of settings and prefer-ences as a user navigates a site. A session cookie is deleted when the user exits thebrowser. Persistent cookies can live longer; they are stored on disk and survivebrowser exits and computer restarts. Persistent cookies often are used to retain aconfiguration profile or login name for a site that a user visits periodically.
The only difference between session cookies and persistent cookies is when theyexpire. As we will see later, a cookie is a session cookie if its Discard parameter is set,or if there is no Expires or Max-Age parameter indicating an extended expiration time.
How Cookies Work
Cookies are like “Hello, My Name Is” stickers stuck onto users by servers. When auser visits a web site, the web site can read all the stickers attached to the user bythat server.
The first time the user visits a web site, the web server doesn’t know anything aboutthe user (Figure 11-3a). The web server expects that this same user will return again,so it wants to “slap” a unique cookie onto the user so it can identify this user in thefuture. The cookie contains an arbitrary list of name=value information, and it isattached to the user using the Set-Cookie or Set-Cookie2HTTP response (exten-sion) headers.
Cookies can contain any information, but they often contain just a unique identifica-tion number, generated by the server for tracking purposes. For example, in
Figure 11-3b, the server slaps onto the user a cookie that says id=“34294”. Theserver can use this number to look up database information that the server accumu-lates for its visitors (purchase history, address information, etc.).
However, cookies are not restricted to just ID numbers. Many web servers choose tokeep information directly in the cookies. For example:
Cookie: name="Brian Totty"; phone="555-1212"
The browser remembers the cookie contents sent back from the server in Set-Cookieor Set-Cookie2headers, storing the set of cookies in a browser cookie database (thinkof it like a suitcase with stickers from various countries on it). When the user returnsto the same site in the future (Figure 11-3c), the browser will select those cookiesslapped onto the user by that server and pass them back in a Cookie request header.
Cookie Jar: Client-Side State
The basic idea of cookies is to let the browser accumulate a set of server-specificinformation, and provide this information back to the server each time you visit.|
(a)         GET /index.html HTTP/1.0
Host: www.joes-hardware.com
Internet
ClientServer
HTTP/1.0 200 OK(b)                         Set-cookie: id="34294"; domain="joes-hardware.com"
Content-type: text/html
Content-length: 1903
Set-Cookie    ...id=34294
Internet
ClientServer(c)         GET /index.html HTTP/1.0
Host: www.joes-hardware.com                Cookie
Cookie: id="34294"id=34294
Internet
ClientServer
Figure 11-3. Slapping a cookie onto a user
Because the browser is responsible for storing the cookie information, this system iscalled client-side state. The official name for the cookie specification is the HTTP
State Management Mechanism.
Netscape Navigator cookies
Different browsers store cookies in different ways. Netscape Navigator stores cook-ies in a single text file called cookies.txt. For example:# Netscape HTTP Cookie File# http://www.netscape.com/newsref/std/cookie_spec.html# This is a generated file!  Do not edit.## domain                  allh   path     secure expires     name       valuewww.fedex.com             FALSE  /        FALSE  1136109676  cc         /us/.bankofamericaonline.com  TRUE   /        FALSE  1009789256  state      CA.cnn.com                  TRUE   /        FALSE  1035069235  SelEdition wwwsecure.eepulse.net        FALSE  /eePulse FALSE  1007162968  cid        %FE%FF%002www.reformamt.org         TRUE   /forum   FALSE  1033761379  LastVisit  1003520952www.reformamt.org         TRUE   /forum   FALSE  1033761379  UserName   Guest...|

Each line of the text file represents a cookie. There are seven tab-separated fields:domain
The domain of the cookieallh
Whether all hosts in a domain get the cookie, or only the specific host namedpath
The path prefix in the domain associated with the cookiesecure
Whether we should send this cookie only if we have an SSL connectionexpiration
The cookie expiration date in seconds since Jan 1, 1970 00:00:00 GMTname
The name of the cookie variablevalue
The value of the cookie variable
Microsoft Internet Explorer cookies
Microsoft Internet Explorer stores cookies in individual text files in the cache direc-tory. You can browse this directory to view the cookies, as shown in Figure 11-4.
Theformat of the Internet Explorer cookie files is proprietary, but many of the fieldsare easily understood. Each cookie is stored one after the other in the file, and eachcookie consists of multiple lines.
The first line of each cookie in the file contains the cookie variable name. The nextline is the variable value. The third line contains the domain and path. The remain-ing lines are proprietary data, presumably including dates and other flags.
Different Cookies for Different Sites
Abrowser can have hundreds or thousands of cookies in its internal cookie jar, butbrowsers don’t send every cookie to every site. In fact, they typically send only twoor three cookies to each site. Here’s why:• Moving all those cookie bytes would dramatically slow performance. Browserswould actually be moving more cookie bytes than real content bytes!• Most of these cookies would just be unrecognizable gibberish for most sites,because they contain server-specific name/value pairs.• Sending all cookies to all sites would create a potential privacy concern, withsites you don’t trust getting information you intended only for another site.|

Name = “session-id”
Can open MSIE cookies in                             Value = “002-9351993-5692007”a text viewer programDomain/path = “amazon.com”
Proprietary format forother attributes
Cookie
Each cookie file  has
Cookie       cookies for a particular
MSIE stores cookies in the same location as other cached objects                      site; the cookies are storedin text lines, one after theother
Figure 11-4. Internet Explorer cookies are stored in individual text files in the cache directory
In general, a browser sends to a server only those cookies that the server generated.
Cookies generated by joes-hardware.com are sent to joes-hardware.com and not tobobs-books.com or marys-movies.com.
Many web sites contract with third-party vendors to manage advertisements. Theseadvertisements are made to look like they are integral parts of the web site and dopush persistent cookies. When the user goes to a different web site serviced by thesame advertisement company, the persistent cookie set earlier is sent back again bythe browser (because the domains match). A marketing company could use this tech-nique, combined with the Referer header, to potentially build an exhaustive data setof user profiles and browsing habits. Modern browsers allow you to configure pri-vacy settings to restrict third-party cookies.
Cookie Domain attribute
Aserver generating a cookie can control which sites get to see that cookie by addinga Domain attribute to the Set-Cookie response header. For example, the following
HTTP response header tells the browser to send the cookie user=“mary17” to anysite in the domain .airtravelbargains.com:
Set-cookie: user="mary17"; domain="airtravelbargains.com"|

If the user visits www.airtravelbargains.com, specials.airtravelbargains.com, or anysite ending in .airtravelbargains.com, the following Cookie header will be issued:
Cookie: user="mary17"
Cookie Path attribute
The cookie specification even lets you associate cookies with portions of web sites.
This is done using the Path attribute, which indicates the URL path prefix whereeach cookie is valid.
For example, one web server might be shared between two organizations, each hav-ing separate cookies. The site www.airtravelbargains.com might devote part of itsweb site to auto rentals—say, http://www.airtravelbargains.com/autos/—using a sep-arate cookie to keep track of a user’s preferred car size. A special auto-rental cookiemight be generated like this:
Set-cookie: pref=compact; domain="airtravelbargains.com"; path=/autos/
If the user goes to http://www.airtravelbargains.com/specials.html, she will get onlythis cookie:
Cookie: user="mary17"
But if she goes to http://www.airtravelbargains.com/autos/cheapo/index.html, she willget both of these cookies:
Cookie: user="mary17"
Cookie: pref=compact
So, cookies are pieces of state, slapped onto the client by the servers, maintained bythe clients, and sent back to only those sites that are appropriate. Let’s look in moredetail at the cookie technology and standards.
Cookie Ingredients
There are two different versions of cookie specifications in use: Version 0 cookies(sometimes called “Netscape cookies”), and Version 1 (“RFC 2965”) cookies. Ver-sion 1 cookies are a less widely used extension of Version 0 cookies.
Neither the Version 0 or Version 1 cookie specification is documented as part of the
HTTP/1.1specification. There are two primary adjunct documents that best describethe use of cookies, summarized in Table 11-2.
Table 11-2. Cookie specifications
Title       DescriptionLocation
Persistent Client State: HTTP Cookies        Original Netscape cookie standard           http://home.netscape.com/newsref/std/cookie_spec html
RFC 2965: HTTP State Management              October 2000 cookie standard,               http://www.ietf.org/rfc/rfc2965.txt
Mechanism   obsoletes RFC 2109|

Version 0 (Netscape) Cookies
The initial cookie specification was defined by Netscape. These “Version 0” cookiesdefined the Set-Cookie response header, the Cookie request header, and the fieldsavailable for controlling cookies. Version 0 cookies look like this:
Set-Cookie: name=value [; expires=date] [; path=path] [; domain=domain] [; secure]
Cookie: name1=value1 [; name2=value2] ...
Version 0 Set-Cookie header
TheSet-Cookie header has a mandatory cookie name and cookie value. It can be fol-lowed by optional cookie attributes, separated by semicolons. The Set-Cookie fieldsare described in Table 11-3.
Table 11-3. Version 0 (Netscape) Set-Cookie attributes
Set-Cookie attribute    Description and examples
NAME=VALUE              Mandatory. Both NAME and VALUE are sequences of characters, excluding the semicolon, comma,equals sign, and whitespace, unless quoted in double quotes. The web server can create any
NAME=VALUEassociation,whichwillbesentbacktothewebserveronsubsequentvisitstothesite.
Set-Cookie: customer=Mary
Expires                 Optional. This attribute specifies a date string that defines the valid lifetime of that cookie. Once theexpiration date has been reached, the cookie will no longer be stored or given out. The date is for-matted as:
Weekday, DD-Mon-YY HH:MM:SS GMT
The only legal time zone is GMT, and the separators between the elements of the date must bedashes. If Expires is not specified, the cookie will expire when the user’s session ends.
Set-Cookie: foo=bar; expires=Wednesday, 09-Nov-99 23:12:40 GMT
Domain                  Optional.Abrowsersendsthecookieonlytoserverhostnamesinthespecifieddomain.Thisletsserv-ersrestrict cookiestoonlycertaindomains.Adomainof“acme.com”wouldmatchhostnames“anvil.acme.com” and “shipping.crate.acme.com”, but not “www.cnn.com”.
Onlyhostswithinthespecifieddomaincansetacookieforadomain,anddomainsmusthaveatleasttwo or three periods in them to prevent domains of the form “.com”, “.edu”, and “va.us”. Anydomain that falls within the fixed set of special top-level domains listed here requires only two peri-ods. Any other domain requires at least three. The special top-level domains are: .com, .edu, .net,.org, .gov, .mil, .int, .biz, .info, .name, .museum, .coop, .aero, and .pro.
If the domainisnotspecified,itdefaultstothehostnameoftheserverthatgeneratedtheSet-Cookieresponse.
Set-Cookie: SHIPPING=FEDEX; domain="joes-hardware.com"
Path                    Optional. This attribute lets you assign cookies to particular documents on a server. If the Pathattribute is a prefix of a URL path, a cookie can be attached. The path “/foo” matches “/foobar” and“/foo/bar.html”. The path “/” matches everything in the domain.
If the path is not specified, it is set to the path of the URL that generated the Set-Cookie response.
Set-Cookie: lastorder=00183; path=/orders
Secure                  Optional.Ifthisattributeisincluded,acookiewillbesentonlyifHTTPisusinganSSLsecureconnection.
Set-Cookie: private_id=519; secure|

Version 0 Cookie header
When a client sends requests, it includes all the unexpired cookies that match thedomain, path, and secure filters to the site. All the cookies are combined into a
Cookie header:
Cookie: session-id=002-1145265-8016838; session-id-time=1007884800
Version 1 (RFC 2965) Cookies
Anextended version of cookies is defined in RFC 2965 (previously RFC 2109). This
Version 1 standard introduces the Set-Cookie2and Cookie2headers, but it alsointeroperates with the Version 0 system.
The RFC 2965 cookie standard is a bit more complicated than the original Netscapestandard and is not yet completely supported. The major changes of RFC 2965 cook-ies are:• Associate descriptive text with each cookie to explain its purpose• Support forced destruction of cookies on browser exit, regardless of expiration• Max-Age aging of cookies in relative seconds, instead of absolute dates• Ability to control cookies by the URL port number, not just domain and path• The Cookie header carries back the domain, port, and path filters (if any)• Version number for interoperability• $ prefix in Cookie header to distinguish additional keywords from usernames
The Version 1 cookie syntax is as follows:set-cookie      =       "Set-Cookie2:" cookiescookies         =       1#cookiecookie          =       NAME "=" VALUE *(";" set-cookie-av)
NAME            =       attr
VALUE           =       valueset-cookie-av   =       "Comment" "=" value|       "CommentURL" "=" <"> http_URL <">|       "Discard"|       "Domain" "=" value|       "Max-Age" "=" value|       "Path" "=" value|       "Port" [ "=" <"> portlist <"> ]|       "Secure"|       "Version" "=" 1*DIGITportlist        =       1#portnumportnum         =       1*DIGITcookie          =  "Cookie:" cookie-version 1*((";" | ",") cookie-value)cookie-value    =  NAME "=" VALUE [";" path] [";" domain] [";" port]cookie-version  =  "$Version" "=" value
NAME            =  attr
VALUE           =  value|
path            =  "$Path" "=" valuedomain          =  "$Domain" "=" valueport            =  "$Port" [ "=" <"> value <"> ]cookie2 =       "Cookie2:" cookie-version
Version 1 Set-Cookie2 header
More attributes are available in the Version 1 cookie standard than in the Netscapestandard. Table 11-4 provides a quick summary of the attributes. Refer to RFC 2965for more detailed explanation.
Table 11-4. Version 1 (RFC 2965) Set-Cookie2 attributes
Set-Cookie2 attribute      Description and examples
NAME=VALUE                 Mandatory. The web server can create any NAME=VALUE association, which will be sent back tothe web server on subsequent visits to the site. The name must not begin with “$”, because thatcharacter is reserved.
Version                    Mandatory. The value of this attribute is an integer, corresponding to the version of the cookiespecification. RFC 2965 is Version 1.
Set-Cookie2: Part="Rocket_Launcher_0001"; Version="1"
Comment                    Optional.Thisattributedocumentshowaserverintendstousethecookie.Theusercaninspectthispolicytodecidewhethertopermitasessionwiththiscookie.ThevaluemustbeinUTF-8encoding.
CommentURL                 Optional.ThisattributeprovidesaURLpointertodetaileddocumentationaboutthepurposeandpolicyforacookie.Theusercaninspectthispolicytodecidewhethertopermitasessionwiththiscookie.
Discard                    Optional. If this attribute is present, it instructs the client to discard the cookie when the clientprogram terminates.
Domain                     Optional. A browser sends the cookie only to server hostnames in the specified domain. This letsservers restrict cookies to only certain domains. A domain of “acme.com” would match host-names “anvil.acme.com” and “shipping.crate.acme.com”, but not “www.cnn.com”. The rules fordomain matching are basically the same as in Netscape cookies, but there are a few additionalrules. Refer to RFC 2965 for details.
Max-Age                    Optional. The value of this attribute is an integer that sets the lifetime of the cookie in seconds.
Clients should calculate the age of the cookie according to the HTTP/1.1 age-calculation rules.
When a cookie’s age becomes greater than the Max-Age, the client should discard the cookie. Avalue of zero means the cookie with that name should be discarded immediately.
Path                       Optional. This attribute lets you assign cookies to particular documents on a server. If the Pathattribute is a prefix of a URL path, a cookie can be attached. The path “/foo” would match“/foobar” and “/foo/bar.html”. The path “/” matches everything in the domain. If the path is notspecified, it is set to the path of the URL that generated the Set-Cookie response.
Port                       Optional. This attribute can stand alone as a keyword, or it can include a comma-separated list ofportstowhichacookiemaybeapplied.Ifthereisaportlist,thecookiecanbeservedonlytoserv-erswhoseportsmatchaportinthelist.IfthePortkeywordisprovidedinisolation,thecookiecanbe served only to the port number of the current responding server.
Set-Cookie2: foo="bar"; Version="1"; Port="80,81,8080"
Set-Cookie2: foo="bar"; Version="1"; Port
Secure                     Optional. If this attribute is included, a cookie will be sent only if HTTP is using an SSL secureconnection.|

Version 1 Cookie header
Version 1 cookies carry back additional information about each delivered cookie,describing the filters each cookie passed. Each matching cookie must include any
Domain, Port, or Path attributes from the corresponding Set-Cookie2 headers.
For example, assume the client has received these five Set-Cookie2responses in thepast from the www.joes-hardware.com web site:
Set-Cookie2: ID="29046"; Domain=".joes-hardware.com"
Set-Cookie2: color=blue
Set-Cookie2: support-pref="L2"; Domain="customer-care.joes-hardware.com"
Set-Cookie2: Coupon="hammer027"; Version="1"; Path="/tools"
Set-Cookie2: Coupon="handvac103"; Version="1"; Path="/tools/cordless"
If the client makes another request for path /tools/cordless/specials.html, it will passalong a long Cookie2 header like this:
Cookie: $Version="1";
ID="29046"; $Domain=".joes-hardware.com";color="blue";
Coupon="hammer027"; $Path="/tools";
Coupon="handvac103"; $Path="/tools/cordless"
Notice that all the matching cookies are delivered with their Set-Cookie2filters, andthe reserved keywords begin with a dollar sign ($).
Version 1 Cookie2 header and version negotiation
TheCookie2request header is used to negotiate interoperability between clients andservers that understand different versions of the cookie specification. The Cookie2header advises the server that the user agent understands new-style cookies and pro-vides the version of the cookie standard supported (it would have made more senseto call it Cookie-Version):
Cookie2: $Version="1"
If the server understands new-style cookies, it recognizes the Cookie2header andshould send Set-Cookie2(rather than Set-Cookie) response headers. If a client getsboth a Set-Cookie and a Set-Cookie2header for the same cookie, it ignores the old
Set-Cookie header.
If a client supports both Version 0 and Version 1 cookies but gets a Version 0 Set-
Cookie header from the server, it should send cookies with the Version 0 Cookieheader. However, the client also should send Cookie2: $Version=“1” to give theserver indication that it can upgrade.
Cookies and Session Tracking
Cookies can be used to track users as they make multiple transactions to a web site.
E-commerce web sites use session cookies to keep track of users’ shopping carts asthey browse. Let’s take the example of the popular shopping site Amazon.com.|

When you type http://www.amazon.com into your browser, you start a chain oftransactions where the web server attaches identification information through aseries of redirects, URL rewrites, and cookie setting.
Figure 11-5 shows a transaction sequence captured from an Amazon.com visit:• Figure 11-5a—Browser requests Amazon.com root page for the first time.• Figure 11-5b—Server redirects the client to a URL for the e-commerce software.• Figure 11-5c—Client makes a request to the redirected URL.• Figure 11-5d—Server slaps two session cookies on the response and redirects theuser to another URL, so the client will request again with these cookies attached.
This new URL is a fat URL, meaning that some state is embedded into the URL.
If the client has cookies disabled, some basic identification can still be done aslong as the user follows the Amazon.com-generated fat URL links and doesn’tleave the site.• Figure 11-5e—Client requests the new URL, but now passes the two attachedcookies.• Figure 11-5f—Server redirects to the home.html page and attaches two morecookies.• Figure 11-5g—Client fetches the home.html page and passes all four cookies.• Figure 11-5h—Server serves back the content.
Cookies and Caching
Youhavetobecareful when caching documents that are involved with cookie trans-actions. You don’t want to assign one user some past user’s cookie or, worse, showone user the contents of someone else’s personalized document.
The rules for cookies and caching are not well established. Here are some guidingprinciples for dealing with caches:
Mark documents uncacheable if they are
The document owner knows best if a document is uncacheable. Explicitly markdocuments uncacheable if they are—specifically, use Cache-Control: no-cache=“Set-Cookie” if the document is cacheable except for the Set-Cookieheader. The other, more general practice of using Cache-Control: public for doc-uments that are cacheable promotes bandwidth savings in the Web.
Be cautious about caching Set-Cookie headers
If a response has a Set-Cookie header, you can cache the body (unless told other-wise), but you should be extra cautious about caching the Set-Cookie header. Ifyou send the same Set-Cookie header to multiple users, you may be defeatinguser targeting.
Somecachesdelete the Set-Cookie header before storing a response in the cache,but that also can cause problems, because clients served from the cache will no|

Client     www.amazon.com
GET / HTTP/1.0               (a)
Host: www.amazon.com(b) HTTP/1.1 302 Found
Location: http://www.amazon.com:80/exec/obidos/subst/home/redirect.html
GET /exec/obidos/subst/home/redirect.html HTTP/1.0 (c)
Host: www.amazon.com
HTTP/1.1 302 Found
Date: Sun, 02 Dec 2001 03:20:47 GMT(d)  Set-cookie: session-id=002-1145265-8016838; path=/; domain=.amazon.com;expires=Sunday, 09-Dec-2001 08:00:00 GMT
Set-cookie: session-id-time=1007884800; path=/; domain=.amazon.com;expires=Sunday, 09-Dec-2001 08:00:00 GMT
GET /exec/obidos/subst/home/redirect.html/002-1145265-8016838 HTTP/1.0 (e)
Host: www.amazon.com
Cookie: session-id=002-1145265-8016838; session-id-time=1007884800
HTTP/1.1 302 Found
Date: Sun, 02 Dec 2001 03:45:40 GMT(f)  Set-cookie: ubid-main=430-8248051-6231206; path=/; domain.amazon.com;expires=Tuesday, 01-Jan-2036 08:00:01 GMT
Location: http://www.amazon.com/exec/obidos/subst/home/home.html/002-1145265-8016838
Set-cookie: x-main="hQ...Bf; path=/; domain=.amazon.com;expires=Tuesday, 01-Jan-2036 08:00:01 GMT
GET /exec/obidos/subst/home/home.html/002-1145265-8016838 HTTP/1.0
Host: www.amazon.com      (g)
Cookie: session-id=002-1145265-8016838; session-id-time=1007884800;ubid-main=430-8248051-6231206; x-main=hQ...Bf(h)
Figure 11-5. The Amazon.com web site uses session cookies to track userslonger get cookies slapped on them that they normally would without the cache.
This situation can be improved by forcing the cache to revalidate every requestwith the origin server and merging any returned Set-Cookie headers with the cli-ent response. The origin server can dictate such revalidations by adding thisheader to the cached copy:
Cache-Control: must-revalidate, max-age=0|

More conservative caches may refuse to cache any response that has a Set-
Cookie header, even though the content may actually be cacheable. Some cachesallow modes when Set-Cookied images are cached, but not text.
Be cautious about requests with Cookie headers
Whenarequest arrives with a Cookie header, it provides a hint that the result-ing content might be personalized. Personalized content must be flaggeduncacheable, but some servers may erroneously not mark this content asuncacheable.
Conservative caches may choose not to cache any document that comes inresponse to a request with a Cookie header. And again, some caches allowmodes when Cookied images are cached, but not text. The more accepted pol-icy is to cache images with Cookie headers, with the expiration time set to zero,thus forcing a revalidate every time.
Cookies, Security, and Privacy
Cookies themselves are not believed to be a tremendous security risk, because theycan be disabled and because much of the tracking can be done through log analysisor other means. In fact, by providing a standardized, scrutinized method for retain-ing personal information in remote databases and using anonymous cookies as keys,the frequency of communication of sensitive data from client to server can bereduced.
Still, it is good to be cautious when dealing with privacy and user tracking, becausethere is always potential for abuse. The biggest misuse comes from third-party websites using persistent cookies to track users. This practice, combined with IPaddresses and information from the Referer header, has enabled these marketingcompanies to build fairly accurate user profiles and browsing patterns.
In spite of all the negative publicity, the conventional wisdom is that the session han-dling and transactional convenience of cookies outweighs most risks, if you use cau-tion about who you provide personal information to and review sites’ privacypolicies.
TheComputerIncident Advisory Capability (part of the U.S. Department of Energy)wrote an assessment of the overrepresented dangers of cookies in 1998. Here’s anexcerpt from that report:
CIAC I-034: Internet Cookies(http://www.ciac.org/ciac/bulletins/i-034.shtml)
PROBLEM:
Cookies are short pieces of data used by web servers to help identify web users. Thepopular concepts and rumors about what a cookie can do has reached almost mysticalproportions, frightening users and worrying their managers.|

VULNERABILITY ASSESSMENT:
The vulnerability of systems to damage or snooping by using web browser cookies isessentially nonexistent. Cookies can only tell a web server if you have been therebefore and can pass short bits of information (such as a user number) from the webserver back to itself the next time you visit. Most cookies last only until you quityour browser and then are destroyed.  A second type of cookie known as a persistentcookie has an expiration date and is stored on your disk until that date.  Apersistent cookie can be used to track a user's browsing habits by identifying himwhenever he returns to a site.  Information about where you come from and what webpages you visit already exists in a web server's log files and could also be used totrack users browsing habits, cookies just make it easier.
For More Information
Here are a few more useful sources for additional information about cookies:
Cookies
Simon St.Laurent, McGraw-Hill.http://www.ietf.org/rfc/rfc2965.txt
RFC 2965, “HTTP State Management Mechanism” (obsoletes RFC 2109).http://www.ietf.org/rfc/rfc2964.txt
RFC 2964, “Use of HTTP State Management.”http://home.netscape.com/newsref/std/cookie_spec.html
This classic Netscape document, “Persistent Client State: HTTP Cookies,”describes the original form of HTTP cookies that are still in common use today.|

CHAPTER 12
Basic Authentication
Millions of people use the Web to perform private transactions and access privatedata. The Web makes it very easy to access this information, but easy isn’t goodenough. We need assurances about who can look at our sensitive data and who canperform our privileged transactions. Not all information is intended for the generalpublic.
We need to feel comfortable that unauthorized users can’t view our online travelprofiles or publish documents onto our web sites without our consent. We need tomake sure our most sensitive corporate-planning documents aren’t available tounauthorized and potentially unscrupulous members of our organization. And weneed to feel at ease that our personal web communications with our children, ourspouses, and our secret loves all occur with a modicum of privacy.
Servers need a way to know who a user is. Once a server knows who the user is, itcan decide which transactions and resources the user can access. Authenticationmeans proving who you are; usually, you authenticate by providing a username anda secret password. HTTP provides a native facility for HTTP authentication. Whileit’s certainly possible to “roll your own” authentication facility on top of HTTPforms and cookies, for many situations, HTTP’s native authentication fits the billnicely.
This chapter explains HTTP authentication and delves into the most common formof HTTP authentication, basic authentication. The next chapter explains a morepowerful technique called digest authentication.
Authentication
Authentication means showing some proof of your identity. When you show a photo
ID, like a passport or a driver’s license, you are showing some proof that you are whoyou claim to be. When you type a PIN number into an automatic teller machine, ortype a secret password into a computer’s dialog box, you also are proving that youare who you claim to be.277
Now, none of these schemes are foolproof. Passwords can be guessed or overheard,and ID cards can be stolen or forged. But each piece of supporting evidence helps tobuild a reasonable trust that you are who you say you are.
HTTP’s Challenge/Response Authentication Framework
HTTP provides a native challenge/response framework to make it easy to authenti-cate users. HTTP’s authentication model is sketched in Figure 12-1.
Request                            Internet                      Please give me the internal sales forecast.
Client        Server
Challenge                          Internet                      You requested a secret financial document.
Please tell me your username and password.
Client        Server(Ask user for password)
Authorization                      Internet                      Please give me the internal sales forecast.
Here is my username and password: “•••••”.
Client        Server
Success                            Internet                      OK. You have access rights.
Here is the document.
Client        Server
Figure 12-1. Simplified challenge/response authentication
Wheneverawebapplication receives an HTTP request message, instead of acting onthe request, the server can respond with an “authentication challenge,” challengingthe user to demonstrate who she is by providing some secret information.
The user needs to attach the secret credentials (username and password) when sherepeats the request. If the credentials don’t match, the server can challenge the clientagain or generate an error. If the credentials do match, the request completes normally.
Authentication Protocols and Headers
HTTP provides an extensible framework for different authentication protocols,through a set of customizable control headers. The format and content of the headerslisted in Table 12-1 vary depending on the authentication protocol. The authentica-tion protocol also is specified in the HTTP authentication headers.|

HTTP defines two official authentication protocols: basic authentication and digestauthentication. In the future, people are free to devise new protocols that use
HTTP’s challenge/response framework. The rest of this chapter explains basicauthentication. See Chapter 13 for details on digest authentication.
Table 12-1. Four phases of authentication
Phase              Headers                   Description                      Method/Status
Request     The first request has no authentication.                          GET
Challenge          WWW-Authenticate          The server rejects the request with a 401 status, indicating      401 Unauthorizedthat the user needs to provide his username and password.
Becausetheservermighthavedifferentareas,eachwithitsown password, the server describes the protection area inthe WWW-Authenticate header. Also, the authenticationalgorithm is specified in the WWW-Authenticate header.
Authorization      Authorization             The client retries the request, but this time attaching an        GET
Authorization header specifying the authentication algo-rithm, username, and password.
Success            Authentication-Info       If the authorization credentials are correct, the server          200 OKreturns the document. Some authorization algorithmsreturnsomeadditionalinformationabouttheauthorizationsession in the optional Authentication-Info header.
To make this concrete, let’s take a look at Figure 12-2.
Client Server
GET /family/jeff.jpg HTTP/1.0 (a)(b) HTTP/1.0 401 Authorization Required
WWW-Authenticate: Basic realm="Family"
GET /family/jeff.jpg HTTP/1.0                          (c)
Authorization: Basic YnJpYW4tdG90dHk6T3ch
HTTP/1.0 200 OK
Content-type: image/jpeg...<image data included>
Figure 12-2. Basic authentication example
When a server challenges a user, it returns a 401 Unauthorized response anddescribes how and where to authenticate in the WWW-Authenticate header(Figure 12-2b).|

Whenaclientauthorizes the server to proceed, it resends the request but attaches anencoded password and other authentication parameters in an Authorization header(Figure 12-2c).
When an authorized request is completed successfully, the server returns a normalstatus code (e.g., 200 OK) and, for advanced authentication algorithms, might attachadditional information in an Authentication-Info header (Figure 12-2d).
Security Realms
Before we discuss the details of basic authentication, we need to explain how HTTPallows servers to associate different access rights to different resources. You mighthave noticed that the WWW-Authenticate challenge in Figure 12-2b included arealm directive. Web servers group protected documents into security realms. Eachsecurity realm can have different sets of authorized users.
For example, suppose a web server has two security realms established: one for cor-porate financial information and another for personal family documents (see
Figure 12-3). Different users will have different access to the realms. The CEO ofyour company probably should have access to the sales forecast, but you might notgive her access to your family vacation photos!/
Family realmcorporate      index.html         familypress              financials         jeff.jpg  brian.jpg
Serverpr1.html   pr2.html   sales-forecast.xls
Corporate financials realm
Figure 12-3. Security realms in a web server
Here’s a hypothetical basic authentication challenge, with a realm specified:
HTTP/1.0 401 Unauthorized
WWW-Authenticate: Basic realm="Corporate Financials"
A realm should have a descriptive string name, like “Corporate Financials,” to helpthe user understand which username and password to use. It may also be useful to listthe server hostname in the realm name—for example, “executive-committee@big-company.com”.|

Basic Authentication
Basic authentication is the most prevalent HTTP authentication protocol. Almostevery major client and server implements basic authentication. Basic authenticationwas originally described in the HTTP/1.0 specification, but it has since been relo-cated into RFC 2617, which details HTTP authentication.
In basic authentication, a web server can refuse a transaction, challenging the clientfor a valid username and password. The server initiates the authentication challengeby returning a 401 status code instead of 200 and specifies the security realm beingaccessed with the WWW-Authenticate response header. When the browser receivesthe challenge, it opens a dialog box requesting the username and password for thisrealm. The username and password are sent back to the server in a slightly scram-bled format inside an Authorization request header.
Basic Authentication Example
Figure 12-2, earlier in this chapter, showed a detailed example of basic authentication:• In Figure 12-2a, a user requests the personal family photo /family/jeff.jpg.• In Figure 12-2b, the server sends back a 401 Authorization Required passwordchallenge for the personal family photo, along with the WWW-Authenticateheader. The header requests basic authentication for the realm named Family.• In Figure 12-2c, the browser receives the 401 challenge and pops open a dialogbox asking for the username and password for the Family realm. When the userenters the username and password, the browser joins them with a colon,encodes them into a “scrambled” base-64 representation (discussed in the nextsection), and sends them back in the Authorization header.• InFigure 12-2d, the server decodes the username and password, verifies that theyare correct, and returns the requested document in an HTTP 200 OK message.
The HTTP basic authentication WWW-Authenticate and Authorization headers aresummarized in Table 12-2.
Table 12-2. Basic authentication headers
Challenge/Response              Header syntax and description
Challenge (server to client)    There may be different passwords for different parts of the site. The realm is a quoted stringthat names the set of documents being requested, so the user knows which password to use.
WWW-Authenticate: Basic realm=quoted-realm
Response (client to server)     The username and password are joined together by a colon (:) and then converted to base-64encoding,makingitabiteasiertoincludeinternationalcharactersinusernamesandpasswordsand making it less likely that a cursory examination will yield usernames and passwords whilewatching network traffic.
Authorization: Basic base64-username-and-password|

Notethatthebasicauthentication protocol does not make use of the Authentication-
Info header we showed in Table 12-1.
Base-64 Username/Password Encoding
HTTPbasicauthentication packs the username and password together (separated bya colon), and encodes them using the base-64 encoding method. If you don’t knowwhat base-64 encoding is, don’t worry. You don’t need to know much about it, andif you are curious, you can read all about it in Appendix E. In a nutshell, base-64encoding takes a sequence of 8-bit bytes and breaks the sequence of bits into 6-bitchunks. Each 6-bit piece is used to pick a character in a special 64-character alpha-bet, consisting mostly of letters and numbers.
Figure 12-4 shows an example of using base-64 encoding for basic authentication.
Here, the username is “brian-totty” and the password is “Ow!”. The browser joins theusername and password with a colon, yielding the packed string “brian-totty:Ow!”.
Thisstringisthenbase64–encodedintothismouthful:“YnJpYW4tdG90dHk6T3ch”.brian-totty(a) Prompt for username and password
Ow!brian-totty(b ) Pack username and password with colon brian-totty:Ow!
Ow!(c) Base 64 encode                     BASE64ENC(brian-totty:Ow!)                        YnJpYW4tdG90dHk6T3ch(d) Send authorization
Client   Server
GET /family/jeff.jpg HTTP/1.0
Authorization: Basic YnJpYW4tdG90dHk6T3ch
Figure 12-4. Generating a basic Authorization header from username and password
Base-64 encoding was invented to take strings of binary, text, and international char-acter data (which caused problems on some systems) and convert them temporarilyinto a portable alphabet for transmission. The original strings could then be decodedon the remote end without fear of transmission corruption.
Base-64 encoding can be useful for usernames and passwords that contain interna-tional characters or other characters that are illegal in HTTP headers (such as quo-tation marks, colons, and carriage returns). Also, because base-64 encodingtrivially scrambles the username and password, it can help prevent administrators|
from accidentally viewing usernames and passwords while administering serversand networks.
Proxy Authentication
Authentication also can be done by intermediary proxy servers. Some organizationsuse proxy servers to authenticate users before letting them access servers, LANs, orwireless networks. Proxy servers can be a convenient way to provide unified accesscontrol across an organization’s resources, because access policies can be centrallyadministered on the proxy server. The first step in this process is to establish theidentity via proxy authentication.
Thestepsinvolved in proxy authentication are identical to that of web server identifi-cation. However, the headers and status codes are different. Table 12-3 contrasts thestatus codes and headers used in web server and proxy authentication.
Table 12-3. Web server versus proxy authentication
Web server                    Proxy server
Unauthorized status code: 401 Unauthorized status code: 407
WWW-Authenticate              Proxy-Authenticate
Authorization                 Proxy-Authorization
Authentication-Info           Proxy-Authentication-Info
The Security Flaws of Basic Authentication
Basic authentication is simple and convenient, but it is not secure. It should only beused to prevent unintentional access from nonmalicious parties or used in combina-tion with an encryption technology such as SSL.
Consider the following security flaws:1. Basic authentication sends the username and password across the network in aform that can trivially be decoded. In effect, the secret password is sent in theclear, for anyone to read and capture. Base-64 encoding obscures the usernameand password, making it less likely that friendly parties will glean passwords byaccidental network observation. However, given a base 64–encoded usernameand password, the decoding can be performed trivially by reversing the encod-ing process. Decoding can even be done in seconds, by hand, with pencil andpaper! Base 64–encoded passwords are effectively sent “in the clear.” Assumethat motivated third parties will intercept usernames and passwords sent bybasic authentication. If this is a concern, send all your HTTP transactions over
SSL encrypted channels, or use a more secure authentication protocol, such asdigest authentication.|
2. Even if the secret password were encoded in a scheme that was more compli-cated to decode, a third party could still capture the garbled username and pass-word and replay the garbled information to origin servers over and over again togain access. No effort is made to prevent these replay attacks.3. Even if basic authentication is used for noncritical applications, such as corpo-rate intranet access control or personalized content, social behavior makes thisdangerous. Many users, overwhelmed by a multitude of password-protected ser-vices, share usernames and passwords. A clever, malicious party may capture ausername and password in the clear from a free Internet email site, for example,and find that the same username and password allow access to critical onlinebanking sites!4. Basic authentication offers no protection against proxies or intermediaries thatact as middlemen, leaving authentication headers intact but modifying the rest ofthe message to dramatically change the nature of the transaction.5. Basic authentication is vulnerable to spoofing by counterfeit servers. If a user canbe led to believe that he is connecting to a valid host protected by basic authenti-cation when, in fact, he is connecting to a hostile server or gateway, the attackercan request a password, store it for later use, and feign an error.
This all said, basic authentication still is useful for providing convenient personaliza-tion or access control to documents in a friendly environment, or where privacy isdesired but not absolutely necessary. In this way, basic authentication is used to pre-*vent accidental or casual access by curious users.
For example, inside a corporation, product management may password-protectfuture product plans to limit premature distribution. Basic authentication makes itsufficiently inconvenient for friendly parties to access this data.† Likewise, you mightpassword-protect personal photos or private web sites that aren’t top-secret or don’tcontain valuable information, but really aren’t anyone else’s business either.
Basic authentication can be made secure by combining it with encrypted data trans-mission (such as SSL) to conceal the username and password from malicious individ-uals. This is a common technique.
We discuss secure encryption in Chapter 14. The next chapter explains a moresophisticated HTTP authentication protocol, digest authentication, that has stron-ger security properties than basic authentication.* Becarefulthattheusername/passwordinbasicauthenticationisnotthesameasthepasswordonyourmoresecure systems, or malicious users can use them to break into your secure accounts!†While not very secure, internal employees of the company usually are unmotivated to maliciously capturepasswords.Thatsaid,corporateespionagedoesoccur,andvengeful,disgruntledemployeesdoexist,soitiswise to place any data that would be very harmful if maliciously acquired under a stronger security scheme.|

For More Information
For more information on basic authentication and LDAP, see:http://www.ietf.org/rfc/rfc2617.txt
RFC 2617, “HTTP Authentication: Basic and Digest Access Authentication.”http://www.ietf.org/rfc/rfc2616.txt
RFC 2616 “Hypertext Transfer Protocol—HTTP/1.1.”|

CHAPTER 13
Digest Authentication
Basic authentication is convenient and flexible but completely insecure. Usernames*and passwords are sent in the clear, and there is no attempt to protect messagesfrom tampering. The only way to use basic authentication securely is to use it in con-junction with SSL.
Digest authentication was developed as a compatible, more secure alternative tobasic authentication. We devote this chapter to the theory and practice of digestauthentication. Even though digest authentication is not yet in wide use, the con-cepts still are important for anyone implementing secure transactions.
The Improvements of Digest Authentication
Digest authentication is an alternate HTTP authentication protocol that tries to fixthe most serious flaws of basic authentication. In particular, digest authentication:• Never sends secret passwords across the network in the clear• Prevents unscrupulous individuals from capturing and replaying authenticationhandshakes• Optionally can guard against tampering with message contents• Guards against several other common forms of attacks
Digest authentication is not the most secure protocol possible.† Many needs forsecure HTTP transactions cannot be met by digest authentication. For those needs,
Transport Layer Security (TLS) and Secure HTTP (HTTPS) are more appropriateprotocols.* Usernamesandpasswordsarescrambledusingatrivialbase-64encoding,whichcanbedecodedeasily.Thisprotects against unintentional accidental viewing but offers no protection against malicious parties.†For example, compared to public key–based mechanisms, digest authentication does not provide a strongauthentication mechanism. Also, digest authentication offers no confidentiality protection beyond protect-ing the actual password—the rest of the request and response are available to eavesdroppers.286
However, digest authentication is significantly stronger than basic authentication,which it was designed to replace. Digest authentication also is stronger than manypopular schemes proposed for other Internet services, such as CRAM-MD5, whichhas been proposed for use with LDAP, POP, and IMAP.
Todate,digest authentication has not been widely deployed. However, because of thesecurity risks inherent to basic authentication, the HTTP architects counsel in RFC2617 that “any service in present use that uses Basic should be switched to Digest as*soon as practical.”  It is not yet clear how successful this standard will become.
Using Digests to Keep Passwords Secret
Themottoofdigest authentication is “never send the password across the network.”
Instead of sending the password, the client sends a “fingerprint” or “digest” of thepassword, which is an irreversible scrambling of the password. The client and theserver both know the secret password, so the server can verify that the digest pro-vided a correct match for the password. Given only the digest, a bad guy has no easyway to find what password it came from, other than going through every password†in the universe, trying each one!
Let’s see how this works (this is a simplified version):• In Figure 13-1a, the client requests a protected document.• In Figure 13-1b, the server refuses to serve the document until the client authen-ticates its identity by proving it knows the password. The server issues a chal-lenge to the client, asking for the username and a digested form of the password.• In Figure 13-1c, the client proves that it knows the password by passing alongthe digest of the password. The server knows the passwords for all the users,‡ soit can verify that the user knows the password by comparing the client-supplieddigest with the server’s own internally computed digest. Another party wouldnot easily be able to make up the right digest if it didn’t know the password.• In Figure 13-1d, the server compares the client-provided digest with the server’sinternally computed digest. If they match, it shows that the client knows thepassword (or made a really lucky guess!). The digest function can be set to gen-erate so many digits that lucky guesses effectively are impossible. When theserver verifies the match, the document is served to the client—all without eversending the password over the network.* There has been significant debate about the relevance of digest authentication, given the popularity andwidespread adoption of SSL-encrypted HTTP. Time will tell if digest authentication gains the critical massrequired.†Therearetechniques,suchasdictionaryattacks,wherecommonpasswordsaretriedfirst.Thesecryptanal-ysis techniques can dramatically ease the process of cracking passwords.‡In fact, the server really needs to know only the digests of the passwords.|
(a) Request                        Internet                       Please give me the internal sales forecast.
Client        Server(b) Challenge                      Internet                       You requested a secret financial document.
Please tell me your username andpassword digest.
Client        Server
Ask user for username and  passworddigest(”Ow!”)= A3F5(c) Authorization                Please give me the internal sales forecast.
Internet                       My username is “bri”
My digested password is “A3F5”
Client        Serverdigest(”Ow!”)= A3F5
This is a match!(d) Success                      OK. The digest you sent me matches the
Internet                       digest of my internal password, so here isthe document.
Client        Server
Figure 13-1. Using digests for password-obscured authentication
We’ll discuss the particular headers used in digest authentication in more detail in
Table 13-8.
One-Way Digests
Adigest is a “condensation of a body of information.”* Digests act as one-way func-tions, typically converting an infinite number of possible input values into a finiterange of condensations.† One popular digest function, MD5,‡ converts any arbitrarysequence of bytes, of any length, into a 128-bit digest.128 bits = 2128, or about 1,000,000,000,000,000,000,000,000,000,000,000,000,000possible distinct condensations.* Merriam-Webster dictionary, 1998.†Intheory,becauseweareconvertinganinfinitenumberofinputvaluesintoafinitenumberofoutputvalues,it is possible to have two distinct inputs map to the same digest. This is called a collision. In practice, thenumberofpotentialoutputsissolargethatthechanceofacollisioninreallife is vanishingly small and, forthe purpose of password matching, unimportant.‡MD5standsfor“MessageDigest#5,”oneinaseriesofdigestalgorithms.TheSecureHashAlgorithm(SHA)is another popular digest function.|

Whatisimportant about these digests is that if you don’t know the secret password,you’ll have an awfully hard time guessing the correct digest to send to the server.
And likewise, if you have the digest, you’ll have an awfully hard time figuring outwhich of the effectively infinite number of input values generated it.
The 128 bits of MD5 output often are written as 32 hexadecimal characters, eachcharacter representing 4 bits. Table 13-1 shows a few examples of MD5 digests ofsample inputs. Notice how MD5 takes arbitrary inputs and yields a fixed-lengthdigest output.
Table 13-1. MD5 digest examples
Input          MD5 digest“Hi”           C1A5298F939E87E8F962A5EDFC206918“bri:Ow!”      BEAAA0E34EBDB072F8627C038AB211F8“3.1415926535897”                               475B977E19ECEE70835BC6DF46F4F6DE“http://www.http-guide.com/index.htm”           C617C0C7D1D05F66F595E22A4B0EAAA5“WE hold these Truths to be self-evident, that all Men are created equal,        66C4EF58DA7CB956BD04233FBB64E0A4that they are endowed by their Creator with certain unalienable Rights,that among these are Life, Liberty and the Pursuit of Happiness—That tosecuretheseRights,GovernmentsareinstitutedamongMen,derivingtheirjust Powers from the Consent of the Governed, that whenever any Form of
GovernmentbecomesdestructiveoftheseEnds,itistheRightofthePeopletoalterortoabolishit,andtoinstitutenewGovernment,layingitsFounda-tion on such Principles, and organizing its Powers in such Form, as to themshall seem most likely to effect their Safety and Happiness.”
Digest functions sometimes are called cryptographic checksums, one-way hash func-tions, or fingerprint functions.
Using Nonces to Prevent Replays
One-way digests save us from having to send passwords in the clear. We can justsend a digest of the password instead, and rest assured that no malicious party caneasily decode the original password from the digest.
Unfortunately, obscured passwords alone do not save us from danger, because a badguy can capture the digest and replay it over and over again to the server, eventhough the bad guy doesn’t know the password. The digest is just as good as thepassword.
Toprevent such replay attacks, the server can pass along to the client a special token*called a nonce, which changes frequently (perhaps every millisecond, or for every* Thewordnoncemeans“thepresentoccasion”or“thetimebeing.”Inacomputer-securitysense,thenoncecaptures a particular point in time and figures that into the security calculations.|
authentication). The client appends this nonce token to the password before com-puting the digest.
Mixing the nonce in with the password causes the digest to change each time thenonce changes. This prevents replay attacks, because the recorded password digest isvalid only for a particular nonce value, and without the secret password, the attackercannot compute the correct digest.
Digest authentication requires the use of nonces, because a trivial replay weaknesswould make un-nonced digest authentication effectively as weak as basic authentica-tion. Nonces are passed from server to client in the WWW-Authenticate challenge.
The Digest Authentication Handshake
The HTTP digest authentication protocol is an enhanced version of authenticationthat uses headers similar to those used in basic authentication. Some new options areaddedtothetraditional headers, and one new optional header, Authorization-Info, isadded.
The simplified three-phase handshake of digest authentication is depicted in
Figure 13-2.
Client                       Server(1) Server generates noncee (challenge)t
WWW-Authenticaalgorithms,enoncealm,er sends r
Serv(3) Choose algorithm from set               (2)[generate response digest][generate client-nonce]                  Authoriza(4)         tion (response)
Client sends response digest[send algorithm][send clien(5) Server verifies digestt nonce]                         [generate rspauth digest][generate next nonce]o)o (inftion-Inf
Authentica                 ext noncer sends ne
Serv(7) Client verifies rspauth digest                 (6)        t rspauth digest][send clien
Figure 13-2. Digest authentication handshake
Here’s what’s happening in Figure 13-2:• In Step 1, the server computes a nonce value. In Step 2, the server sends thenonce to the client in a WWW-Authenticate challenge message, along with a listof algorithms that the server supports.|
• In Step 3, the client selects an algorithm and computes the digest of the secretpassword and the other data. In Step 4, it sends the digest back to the server inan Authorization message. If the client wants to authenticate the server, it cansend a client nonce.• In Step 5, the server receives the digest, chosen algorithm, and supporting dataand computes the same digest that the client did. The server then compares thelocally generated digest with the network-transmitted digest and validates thatthey match. If the client symmetrically challenged the server with a client nonce,a client digest is created. Additionally, the next nonce can be precomputed andhanded to the client in advance, so the client can preemptively issue the rightdigest the next time.
Manyofthesepiecesofinformation are optional and have defaults. To clarify things,
Figure 13-3 compares the messages sent for basic authentication (Figure 13-3a–d)with a simple example of digest authentication (Figure 13-3e–h).
Now let’s look a bit more closely at the internal workings of digest authentication.
Digest Calculations
Theheart of digest authentication is the one-way digest of the mix of public informa-tion, secret information, and a time-limited nonce value. Let’s look now at how thedigests are computed. The digest calculations generally are straightforward.* Samplesource code is provided in Appendix F.
Digest Algorithm Input Data
Digests are computed from three components:• A pair of functions consisting of a one-way hash function H(d) and digest
KD(s,d), where s stands for secret and d stands for data• A chunk of data containing security information, including the secret password,called A1• A chunk of data containing nonsecret attributes of the request message, called A2
The two pieces of data, A1 and A2, are processed by H and KD to yield a digest.
The Algorithms H(d) and KD(s,d)
Digest authentication supports the selection of a variety of digest algorithms. Thetwo algorithms suggested in RFC 2617 are MD5 and MD5-sess (where “sess” standsfor session), and the algorithm defaults to MD5 if no other algorithm is specified.* However,theyaremadealittlemorecomplicatedforbeginnersbytheoptionalcompatibilitymodesofRFC2617 and by the lack of background material in the specifications. We’ll try to help...|

Basic authentication(a) Query
GET /cgi-bin/checkout?cart=17854 HTTP/1.1
Client     Server(b) Challenge
HTTP/1.1 401 Unauthorized
Client                       WWW-Authenticate: Basic realm="Shopping Cart"   Server
Shopping Cart
Username:
Password:(c) Response
GET /cgi-bin/checkout?cart=17854 HTTP/1.1
Client Authorization: Basic YnJpYW4tdG90dHk6T3ch                             Server(d) Success
HTTP/1.1 200 OK
Client                     ...              Server
Digest authentication(e) Query
GET /cgi-bin/checkout?cart=17854 HTTP/1.1
Client     Server(f) Challenge
HTTP/1.1 401 Unauthorized
Client                           WWW-Authenticate: Digest                    Server
Shopping Cart                            realm="Shopping Cart"
Username:   qop="auth,auth-int"nonce="66C4EF58DA7CB956BD04233FBB64E0A4"
Password:(g) Response
GET /cgi-bin/checkout?cart=17854 HTTP/1.1
Client Authorization: Digest                Serverusername="bri"realm="Shopping Cart"nonce="66C4EF58DA7CB956BD04233FBB64E0A4"uri="/cgi-bin/checkout?cart=17854"qop="auth"nc=0000001,cnonce="CFA9207102EA210EA210FFC1120F6001110D073"response="E483C94FOB3CA29109A7BA83D10FE519"(h) Success
HTTP/1.1 200 OK
Client                   Authorization-Info: nextnonce=                      Server"29FE72D109C7EF23841AB914F0C3B831"qop= “auth”rspauth="89F5A4CE6FA932F6C4DA120CEB754290"cnonce="CFA9207102EA210EA210FFC1120F6001110D073"...
Figure 13-3. Basic versus digest authentication syntax|

If either MD5 or MD5-sess is used, the H function computes the MD5 of the data,and the KD digest function computes the MD5 of the colon-joined secret and nonse-cret data. In other words:
H(<data>) = MD5(<data>)
KD(<secret>,<data>) = H(concatenate(<secret>:<data>))
The Security-Related Data (A1)
The chunk of data called A1 is a product of secret and protection information, suchas the username, password, protection realm, and nonces. A1 pertains only to secu-rity information, not to the underlying message itself. A1 is used along with H, KD,and A2 to compute digests.
RFC 2617 defines two ways of computing A1, depending on the algorithm chosen:
MD5
One-way hashes are run for every request; A1 is the colon-joined triple of user-name, realm, and secret password.
MD5-sess
The hash function is run only once, on the first WWW-Authenticate hand-shake; the CPU-intensive hash of username, realm, and secret password is doneonce and prepended to the current nonce and client nonce (cnonce) values.
The definitions of A1 are shown in Table 13-2.
Table 13-2. Definitions for A1 by algorithm
Algorithm                      A1
MD5                            A1 = <user>:<realm>:<password>
MD5-sess                       A1 = MD5(<user>:<realm>:<password>):<nonce>:<cnonce>
The Message-Related Data (A2)
Thechunkofdatacalled A2represents information about the message itself, such asthe URL, request method, and message entity body. A2is used to help protectagainst method, resource, or message tampering. A2is used along with H, KD, and
A1 to compute digests.
RFC2617defines two schemes for A2, depending on the quality of protection (qop)chosen:• The first scheme involves only the HTTP request method and URL. This is usedwhen qop=“auth”, which is the default case.• The second scheme adds in the message entity body to provide a degree of mes-sage integrity checking. This is used when qop=“auth-int”.|

The definitions of A2 are shown in Table 13-3.
Table 13-3. Definitions for A2 by algorithm (request digests)qop                  A2undefined            <request-method>:<uri-directive-value>auth                 <request-method>:<uri-directive-value>auth-int             <request-method>:<uri-directive-value>:H(<request-entity-body>)
The request-method is the HTTP request method. The uri-directive-value is therequest URI from the request line. This may be “*,” an “absoluteURL,” or an “abs_path,” but it must agree with the request URI. In particular, it must be an absolute
URL if the request URI is an absoluteURL.
Overall Digest Algorithm
RFC 2617 defines two ways of computing digests, given H, KD, A1, and A2:• The first way is intended to be compatible with the older specification RFC2069, used when the qop option is missing. It computes the digest using thehash of the secret information and the nonced message data.• Thesecondwayisthemodern,preferredapproach—itincludessupportfornoncecounting and symmetric authentication. This approach is used whenever qop is“auth” or “auth-int”. It adds nonce count, qop, and cnonce data to the digest.
The definitions for the resulting digest function are shown in Table 13-4. Notice theresulting digests use H, KD, A1, and A2.
Table 13-4. Old and new digest algorithmsqop                  Digest algorithm                     Notesundefined            KD(H(A1), <nonce>:H(A2))             Deprecatedauth or auth-int     KD(H(A1), <nonce>:<nc>:<cnonce>:<qop>:H(A2))                          Preferred
It’s a bit easy to get lost in all the layers of derivational encapsulation. This is one ofthe reasons that some readers have difficulty with RFC 2617. To try to make it a biteasier, Table 13-5 expands away the H and KD definitions, and leaves digests interms of A1 and A2.
Table 13-5. Unfolded digest algorithm cheat sheetqop                  Algorithm              Unfolded algorithmundefined            <undefined>            MD5(MD5(A1):<nonce>:MD5(A2))
MD5
MD5-sess|

Table 13-5. Unfolded digest algorithm cheat sheet (continued)qop                    Algorithm               Unfolded algorithmauth                   <undefined>             MD5(MD5(A1):<nonce>:<nc>:<cnonce>:<qop>:MD5(A2))
MD5
MD5-sessauth-int               <undefined>             MD5(MD5(A1):<nonce>:<nc>:<cnonce>:<qop>:MD5(A2))
MD5
MD5-sess
Digest Authentication Session
The client response to a WWW-Authenticate challenge for a protection space startsan authentication session with that protection space (the realm combined with thecanonical root of the server being accessed defines a “protection space”).
The authentication session lasts until the client receives another WWW-Authenti-cate challenge from any server in the protection space. A client should remember theusername, password, nonce, nonce count, and opaque values associated with anauthentication session to use to construct the Authorization header in futurerequests within that protection space.
When the nonce expires, the server can choose to accept the old Authorizationheader information, even though the nonce value included may not be fresh. Alterna-tively, the server may return a 401 response with a new nonce value, causing the cli-ent to retry the request; by specifying “stale=true” with this response, the server tellsthe client to retry with the new nonce without prompting for a new username andpassword.
Preemptive Authorization
In normal authentication, each request requires a request/challenge cycle before thetransaction can be completed. This is depicted in Figure 13-4a.
This request/challenge cycle can be eliminated if the client knows in advance whatthe next nonce will be, so it can generate the correct Authorization header before theserver asks for it. If the client can compute the Authorization header before it isrequested, the client can preemptively issue the Authorization header to the server,without first going through a request/challenge. The performance impact is depictedin Figure 13-4b.
Preemptive authorization is trivial (and common) for basic authentication. Browserscommonly maintain client-side databases of usernames and passwords. Once a userauthenticates with a site, the browser commonly sends the correct Authorizationheader for subsequent requests to that URL (see Chapter 12).|
(a) Normal request/challenge        (b) Preemptive authorization
Client  Server                      Client  Server
Request                             Request
Challenge                           Challenge
Request+authoriza                   Request+authorizationtioness    einfo
Succ                               ess+nonc
Succ
Request                      Request+authorizationeinfo
Challenge                           ess+nonc
Succ
Request+authoriza                   Request+authorizationtionessess
Succ                                Succ
Request
Challenge
Request+authorizationess
Succ
Figure 13-4. Preemptive authorization reduces message count
Preemptive authorization is a bit more complicated for digest authentication,because of the nonce technology intended to foil replay attacks. Because the servergenerates arbitrary nonces, there isn’t always a way for the client to determine what
Authorization header to send until it receives a challenge.
Digest authentication offers a few means for preemptive authorization while retain-ing many of the safety features. Here are three potential ways a client can obtain thecorrect nonce without waiting for a new WWW-Authenticate challenge:• Server pre-sends the next nonce in the Authentication-Info success header.• Server allows the same nonce to be reused for a small window of time.• Both the client and server use a synchronized, predictable nonce-generationalgorithm.|

Next nonce pregeneration
ThenextnoncevaluecanbeprovidedinadvancetotheclientbytheAuthentication-
Info success header. This header is sent along with the 200 OK response from a pre-vious successful authentication.
Authentication-Info: nextnonce="<nonce-value>"
Given the next nonce, the client can preemptively issue an Authorization header.
While this preemptive authorization avoids a request/challenge cycle (speeding upthe transaction), it also effectively nullifies the ability to pipeline multiple requests tothe same server, because the next nonce value must be received before the nextrequest can be issued. Because pipelining is expected to be a fundamental technol-ogy for latency avoidance, the performance penalty may be large.
Limited nonce reuse
Instead of pregenerating a sequence of nonces, another approach is to allow limitedreuse of nonces. For example, a server may allow a nonce to be reused 5 times, or for10 seconds.
In this case, the client can freely issue requests with the Authorization header, and itcan pipeline them, because the nonce is known in advance. When the nonce finallyexpires, the server is expected to send the client a 401 Unauthorized challenge, withthe WWW-Authenticate: stale=true directive set:
WWW-Authenticate: Digestrealm="<realm-value>"nonce="<nonce-value>"stale=true
Reusing nonces does reduce security, because it makes it easier for an attacker tosucceed at replay attacks. Because the lifetime of nonce reuse is controllable, fromstrictly no reuse to potentially long reuse, trade-offs can be made between windowsof vulnerability and performance.
Additionally, other features can be employed to make replay attacks more difficult,including incrementing counters and IP address tests. However, while makingattacks more inconvenient, these techniques do not eliminate the vulnerability.
Synchronized nonce generation
It is possible to employ time-synchronized nonce-generation algorithms, where boththe client and the server can generate a sequence of identical nonces, based on ashared secret key, that a third party cannot easily predict (such as secure ID cards).
These algorithms are beyond the scope of the digest authentication specification.|

Nonce Selection
Thecontents of the nonce are opaque and implementation-dependent. However, thequality of performance, security, and convenience depends on a smart choice.
RFC 2617 suggests this hypothetical nonce formulation:
BASE64(time-stamp H(time-stamp ":" ETag ":" private-key))where time-stamp is a server-generated time or other nonrepeating value, ETag is thevalue of the HTTP ETag header associated with the requested entity, and private-keyis data known only to the server.
With a nonce of this form, a server will recalculate the hash portion after receivingthe client authentication header and reject the request if it does not match the noncefrom that header or if the time-stamp value is not recent enough. In this way, theserver can limit the duration of the nonce’s validity.
The inclusion of the ETag prevents a replay request for an updated version of theresource. (Note that including the IP address of the client in the nonce would appearto offer the server the ability to limit the reuse of the nonce to the same client that orig-inally got it. However, that would break proxy farms, in which requests from a singleuser often go through different proxies. Also, IP address spoofing is not that hard.)
Animplementation might choose not to accept a previously used nonce or digest, toprotect against replay attacks. Or, an implementation might choose to use one-timenonces or digests for POST or PUT requests and time-stamps for GET requests.
Refer to “Security Considerations” for practical security considerations that affectnonce selection.
Symmetric Authentication
RFC2617extendsdigestauthenticationto allow the client to authenticate the server.
It does this by providing a client nonce value, to which the server generates a correctresponse digest based on correct knowledge of the shared secret information. Theserver then returns this digest to the client in the Authorization-Info header.
This symmetric authentication is standard as of RFC 2617. It is optional for back-ward compatibility with the older RFC 2069 standard, but, because it providesimportant security enhancements, all modern clients and servers are strongly recom-mended to implement all of RFC 2617’s features. In particular, symmetric authenti-cation is required to be performed whenever a qop directive is present and requirednot to be performed when the qop directive is missing.
The response digest is calculated like the request digest, except that the messagebodyinformation (A2) is different, because there is no method in a response, and themessage entity data is different. The methods of computation of A2for request andresponse digests are compared in Tables 13-6 and 13-7.|

Table 13-6. Definitions for A2 by algorithm (request digests)qop                   A2undefined             <request-method>:<uri-directive-value>auth                  <request-method>:<uri-directive-value>auth-int              <request-method>:<uri-directive-value>:H(<request-entity-body>)
Table 13-7. Definitions for A2 by algorithm (response digests)qop                   A2undefined             :<uri-directive-value>auth                  :<uri-directive-value>auth-int              :<uri-directive-value>:H(<response-entity-body>)
The cnonce value and nc value must be the ones for the client request to which thismessage is the response. The response auth, cnonce, and nonce count directivesmust be present if qop=“auth” or qop=“auth-int” is specified.
Quality of Protection Enhancements
The qop field may be present in all three digest headers: WWW-Authenticate,
Authorization, and Authentication-Info.
Theqopfieldlets clients and servers negotiate for different types and qualities of pro-tection. For example, some transactions may want to sanity check the integrity ofmessage bodies, even if that slows down transmission significantly.
Theserver first exports a comma-separated list of qop options in the WWW-Authen-ticate header. The client then selects one of the options that it supports and thatmeets its needs and passes it back to the server in its Authorization qop field.
Use of qop is optional, but only for backward compatibility with the older RFC2069 specification. The qop option should be supported by all modern digestimplementations.
RFC2617defines two initial quality of protection values: “auth,” indicating authen-tication, and “auth-int,” indicating authentication with message integrity protection.
Other qop options are expected in the future.
Message Integrity Protection
If integrity protection is applied (qop=“auth-int”), H (the entity body) is the hash ofthe entity body, not the message body. It is computed before any transfer encoding isapplied by the sender and after it has been removed by the recipient. Note that thisincludes multipart boundaries and embedded headers in each part of any multipartcontent type.|

Digest Authentication Headers
Both the basic and digest authentication protocols contain an authorization chal-lenge, carried by the WWW-Authenticate header, and an authorization response,carried by the Authorization header. Digest authentication adds an optional Authori-zation-Info header, which is sent after successful authentication, to complete a three-phase handshake and pass along the next nonce to use. The basic and digest authen-tication headers are shown in Table 13-8.
Table 13-8. HTTP authentication headers
Phase             Basic     Digest
Challenge         WWW-Authenticate: Basic                    WWW-Authenticate: Digestrealm="<realm-value>"                      realm="<realm-value>"nonce="<nonce-value>"[domain="<list-of-URIs>"][opaque="<opaque-token-value>"][stale=<true-or-false>][algorithm=<digest-algorithm>][qop="<list-of-qop-values>"][<extension-directive>]
Response          Authorization: Basic                       Authorization: Digest<base64(user:pass)>                        username="<username>"realm="<realm-value>"nonce="<nonce-value>"uri=<request-uri>response="<32-hex-digit-digest>"[algorithm=<digest-algorithm>][opaque="<opaque-token-value>"][cnonce="<nonce-value>"][qop=<qop-value>][nc=<8-hex-digit-nonce-count>][<extension-directive>]
Info              n/a       Authentication-Info:nextnonce="<nonce-value>"[qop="<list-of-qop-values>"][rspauth="<hex-digest>"][cnonce="<nonce-value>"][nc=<8-hex-digit-nonce-count>]
The digest authentication headers are quite a bit more complicated. They aredescribed in detail in Appendix F.
Practical Considerations
There are several things you need to consider when working with digest authentica-tion. This section discusses some of these issues.|

Multiple Challenges
A server can issue multiple challenges for a resource. For example, if a server doesnot know the capabilities of a client, it may provide both basic and digest authentica-tion challenges. When faced with multiple challenges, the client must choose toanswer with the strongest authentication mechanism that it supports.
User agents must take special care in parsing the WWW-Authenticate or Proxy-
Authenticate header field value if it contains more than one challenge or if more thanone WWW-Authenticate header field is provided, as a challenge may itself contain acomma-separated list of authentication parameters. Note that many browsers recog-nize only basic authentication and require that it be the first authentication mecha-nism presented.
There are obvious “weakest link” security concerns when providing a spectrum ofauthentication options. Servers should include basic authentication only if it is mini-mally acceptable, and administrators should caution users about the dangers of shar-ing the same password across systems when different levels of security are beingemployed.
Error Handling
In digest authentication, if a directive or its value is improper, or if a required direc-tive is missing, the proper response is 400 Bad Request.
If a request’s digest does not match, a login failure should be logged. Repeated fail-ures from a client may indicate an attacker attempting to guess passwords.
Theauthenticating server must assure that the resource designated by the “uri” direc-tive is the same as the resource specified in the request line; if they are different, theserver should return a 400 Bad Request error. (As this may be a symptom of an attack,server designers may want to consider logging such errors.) Duplicating informationfrom the request URL in this field deals with the possibility that an intermediateproxy may alter the client’s request line. This altered (but, presumably, semanticallyequivalent) request would not result in the same digest as that calculated by the client.
Protection Spaces
The realm value, in combination with the canonical root URL of the server beingaccessed, defines the protection space.
Realms allow the protected resources on a server to be partitioned into a set of pro-tection spaces, each with its own authentication scheme and/or authorization data-base. The realm value is a string, generally assigned by the origin server, which mayhave additional semantics specific to the authentication scheme. Note that there maybe multiple challenges with the same authorization scheme but different realms.|

Theprotection space determines the domain over which credentials can be automati-cally applied. If a prior request has been authorized, the same credentials may bereused for all other requests within that protection space for a period of time deter-minedbytheauthentication scheme, parameters, and/or user preference. Unless oth-erwise defined by the authentication scheme, a single protection space cannot extendoutside the scope of its server.
The specific calculation of protection space depends on the authentication mechanism:• In basic authentication, clients assume that all paths at or below the request URIare within the same protection space as the current challenge. A client can pre-emptively authorize for resources in this space without waiting for another chal-lenge from the server.• In digest authentication, the challenge’s WWW-Authenticate: domain field moreprecisely defines the protection space. The domain field is a quoted, space-sepa-rated list of URIs. All the URIs in the domain list, and all URIs logically beneaththese prefixes, are assumed to be in the same protection space. If the domain fieldis missing or empty, all URIs on the challenging server are in the protection space.
Rewriting URIs
Proxies may rewrite URIs in ways that change the URI syntax but not the actualresource being described. For example:• Hostnames may be normalized or replaced with IP addresses.• Embedded characters may be replaced with “%” escape forms.• Additional attributes of a type that doesn’t affect the resource fetched from theparticular origin server may be appended or inserted into the URI.
Because URIs can be changed by proxies, and because digest authentication sanitychecks the integrity of the URI value, the digest authentication will break if any ofthese changes are made. See “The Message-Related Data (A2)” for more information.
Caches
When a shared cache receives a request containing an Authorization header and aresponse from relaying that request, it must not return that response as a reply to anyother request, unless one of two Cache-Control directives was present in the response:• If the original response included the “must-revalidate” Cache-Control directive,the cache may use the entity of that response in replying to a subsequent request.
However, it must first revalidate it with the origin server, using the request head-ers from the new request, so the origin server can authenticate the new request.• If the original response included the “public” Cache-Control directive, theresponse entity may be returned in reply to any subsequent request.|

Security Considerations
RFC2617doesanadmirable job of summarizing some of the security risks inherentin HTTP authentication schemes. This section describes some of these risks.
Header Tampering
Toprovide a foolproof system against header tampering, you need either end-to-endencryption or a digital signature of the headers—preferably a combination of both!
Digest authentication is focused on providing a tamper-proof authentication scheme,but it does not necessarily extend that protection to the data. The only headers thathave some level of protection are WWW-Authenticate and Authorization.
Replay Attacks
A replay attack, in the current context, is when someone uses a set of snoopedauthentication credentials from a given transaction for another transaction. Whilethis problem is an issue with GET requests, it is vital that a foolproof method foravoiding replay attacks be available for POST and PUT requests. The ability to suc-cessfully replay previously used credentials while transporting form data could causesecurity nightmares.
Thus, in order for a server to accept “replayed” credentials, the nonce values must berepeated. One of the ways to mitigate this problem is to have the server generate anonce containing a digest of the client’s IP address, a time-stamp, the resource ETag,and a private server key (as recommended earlier). In such a scenario, the combina-tion of an IP address and a short timeout value may provide a huge hurdle for theattacker.
However, this solution has a major drawback. As we discussed earlier, using the cli-ent’s IP address in creating a nonce breaks transmission through proxy farms, inwhich requests from a single user may go through different proxies. Also, IP spoof-ing is not too difficult.
Onewaytocompletely avoid replay attacks is to use a unique nonce value for everytransaction. In this implementation, for each transaction, the server issues a uniquenonce along with a timeout value. The issued nonce value is valid only for the giventransaction, and only for the duration of the timeout value. This accounting mayincrease the load on servers; however, the increase should be miniscule.
Multiple Authentication Mechanisms
Whenaserver supports multiple authentication schemes (such as basic and digest),it usually provides the choice in WWW-Authenticate headers. Because the client is|
not required to opt for the strongest authentication mechanism, the strength of theresulting authentication is only as good as that of the weakest of the authenticationschemes.
The obvious ways to avoid this problem is to have the clients always choose thestrongest authentication scheme available. If this is not practical (as most of us douse commercially available clients), the only other option is to use a proxy server toretain only the strongest authentication scheme. However, such an approach is feasi-ble only in a domain in which all of the clients are known to be able to support thechosen authentication scheme—e.g., a corporate network.
Dictionary Attacks
Dictionary attacks are typical password-guessing attacks. A malicious user can eaves-drop on a transaction and use a standard password-guessing program against nonce/response pairs. If the users are using relatively simple passwords and the servers areusing simplistic nonces, it is quite possible to find a match. If there is no passwordaging policy, given enough time and the one-time cost of cracking the passwords, itis easy to collect enough passwords to do some real damage.
There really is no good way to solve this problem, other than using relatively com-plex passwords that are hard to crack and a good password aging policy.
Hostile Proxies and Man-in-the-Middle Attacks
Much Internet traffic today goes through a proxy at one point or another. With theadvent of redirection techniques and intercepting proxies, a user may not even real-ize that his request is going through a proxy. If one of those proxies is hostile or com-promised, it could leave the client vulnerable to a man-in-the-middle attack.
Such an attack could be in the form of eavesdropping, or altering available authenti-cation schemes by removing all of the offered choices and replacing them with theweakest authentication scheme (such as basic authentication).
One of the ways to compromise a trusted proxy is though its extension interfaces.
Proxies sometimes provide sophisticated programming interfaces, and with suchproxies it may be feasible to write an extension (i.e., plug-in) to intercept and modifythe traffic. However, the data-center security and security offered by proxies them-selves make the possibility of man-in-the-middle attacks via rogue plug-ins quiteremote.
There is no good way to fix this problem. Possible solutions include clients provid-ing visual cues regarding the authentication strength, configuring clients to alwaysuse the strongest possible authentication, etc., but even when using the strongestpossible authentication scheme, clients still are vulnerable to eavesdropping. Theonly foolproof way to guard against these attacks is by using SSL.|

Chosen Plaintext Attacks
Clients using digest authentication use a nonce supplied by the server to generate theresponse. However, if there is a compromised or malicious proxy in the middleintercepting the traffic (or a malicious origin server), it can easily supply a nonce forresponse computation by the client. Using the known key for computing theresponse may make the cryptanalysis of the response easier. This is called a chosenplaintext attack. There are a few variants of chosen plaintext attacks:
Precomputed dictionary attacks
This is a combination of a dictionary attack and a chosen plaintext attack. First,the attacking server generates a set of responses, using a predetermined nonceand common password variations, and creates a dictionary. Once a sizeable dic-tionary is available, the attacking server/proxy can complete the interdiction ofthe traffic and start sending predetermined nonces to the clients. When it gets aresponse from a client, the attacker searches the generated dictionary for matches.
If a there is a match, the attacker has the password for that particular user.
Batched brute-force attacks
The difference in a batched brute-force attack is in the computation of the pass-word. Instead of trying to match a precomputed digest, a set of machines goes towork on enumerating all of the possible passwords for a given space. As themachines get faster, the brute-force attack becomes more and more viable.
In general, the threat posed by these attacks is easily countered. One way to preventthem is to configure clients to use the optional cnonce directive, so that the responseis generated at the client’s discretion, not using the nonce supplied by the server(which could be compromised by the attacker). This, combined with policies enforc-ing reasonably strong passwords and a good password aging mechanism, can miti-gate the threat of chosen plaintext attacks completely.
Storing Passwords
The digest authentication mechanism compares the user response to what is storedinternally by the server—usually, usernames and H(A1) tuples, where H(A1) isderived from the digest of username, realm, and password.
Unlike with a traditional password file on a Unix box, if a digest authentication pass-word file is compromised, all of the documents in the realm immediately are avail-able to the attacker; there is no need for a decrypting step.
Some of the ways to mitigate this problem are to:• Protect the password file as though it contained clear-text passwords.• Makesure the realm name is unique among all the realms, so that if a passwordfile is compromised, the damage is localized to a particular realm. A fully quali-fied realm name with host and domain included should satisfy this requirement.|

While digest authentication provides a much more robust and secure solution thanbasic authentication, it still does not provide any protection for security of the con-tent—a truly secure transaction is feasible only through SSL, which we describe inthe next chapter.
For More Information
For more information on authentication, see:http://www.ietf.org/rfc/rfc2617.txt
RFC 2617, “HTTP Authentication: Basic and Digest Access Authentication.”|

CHAPTER 14
Secure HTTP
The previous three chapters reviewed features of HTTP that help identify andauthenticate users. These techniques work well in a friendly community, but theyaren’t strong enough to protect important transactions from a community of moti-vated and hostile adversaries.
This chapter presents a more complicated and aggressive technology to secure HTTPtransactions from eavesdropping and tampering, using digital cryptography.
Making HTTP Safe
People use web transactions for serious things. Without strong security, peoplewouldn’t feel comfortable doing online shopping and banking. Without being ableto restrict access, companies couldn’t place important documents on web servers.
The Web requires a secure form of HTTP.
The previous chapters talked about some lightweight ways of providing authentica-tion (basic and digest authentication) and message integrity (digest qop=“auth-int”).
These schemes are good for many purposes, but they may not be strong enough forlarge purchases, bank transactions, or access to confidential data. For these moreserious transactions, we combine HTTP with digital encryption technology.
A secure version of HTTP needs to be efficient, portable, easy to administer, andadaptable to the changing world. It also has to meet societal and governmentalrequirements. We need a technology for HTTP security that provides:• Server authentication (clients know they’re talking to the real server, not a phony)• Client authentication (servers know they’re talking to the real user, not a phony)• Integrity (clients and servers are safe from their data being changed)• Encryption (clients and servers talk privately without fear of eavesdropping)• Efficiency (an algorithm fast enough for inexpensive clients and servers to use)• Ubiquity (protocols are supported by virtually all clients and servers)307• Administrative scalability (instant secure communication for anyone, anywhere)• Adaptability (supports the best known security methods of the day)• Social viability (meets the cultural and political needs of the society)
HTTPS
HTTPS is the most popular secure form of HTTP. It was pioneered by Netscape
Communications Corporation and is supported by all major browsers and servers.
You can tell if a web page was accessed through HTTPS instead of HTTP, becausethe URL will start with the scheme https:// instead of http:// (some browsers also dis-play iconic security cues, as shown in Figure 14-1).https schemesecurity icon
Figure 14-1. Browsing secure web sites
When using HTTPS, all the HTTP request and response data is encrypted beforebeing sent across the network. HTTPS works by providing a transport-level crypto-graphic security layer—using either the Secure Sockets Layer (SSL) or its successor,
Transport Layer Security (TLS)—underneath HTTP (Figure 14-2). Because SSL and
TLSare so similar, in this book we use the term “SSL” loosely to represent both SSLand TLS.
Because most of the hard encoding and decoding work happens in the SSL libraries,webclients and servers don’t need to change much of their protocol processing logic|

HTTP                       Application layer
HTTP                       Application layer                      SSL or TLS                    Security layer
TCP                       Transport layer                            TCP                       Transport layer
IP                       Network layer                               IP                       Network layer
Network interfaces                 Data link layer                   Network interfaces                 Data link layer(a) HTTP                           (b) HTTPS
Figure 14-2. HTTPS is HTTP layered over a security layer, layered over TCPto use secure HTTP. For the most part, they simply need to replace TCP input/out-put calls with SSL calls and add a few other calls to configure and manage the secu-rity information.
Digital Cryptography
Before we talk in detail about HTTPS, we need to provide a little background aboutthe cryptographic encoding techniques used by SSL and HTTPS. In the next few sec-tions, we’ll give a speedy primer of the essentials of digital cryptography. If youalready are familiar with the technology and terminology of digital cryptography, feelfree to jump ahead to “HTTPS: The Details.”
In this digital cryptography primer, we’ll talk about:
Ciphers
Algorithms for encoding text to make it unreadable to voyeurs
Keys
Numeric parameters that change the behavior of ciphers
Symmetric-key cryptosystems
Algorithms that use the same key for encoding and decoding
Asymmetric-key cryptosystems
Algorithms that use different keys for encoding and decoding
Public-key cryptography
A system making it easy for millions of computers to send secret messages
Digital signatures
Checksums that verify that a message has not been forged or tampered with
Digital certificates
Identifying information, verified and signed by a trusted organization|

The Art and Science of Secret Coding
Cryptography is the art and science of encoding and decoding messages. People haveused cryptographic methods to send secret messages for thousands of years. How-ever, cryptography can do more than just encrypt messages to prevent reading bynosy folks; it also can be used to prevent tampering with messages. Cryptographyeven can be used to prove that you indeed authored a message or transaction, justlike your handwritten signature on a check or an embossed wax seal on an envelope.
Ciphers
Cryptography is based on secret codes called ciphers. A cipher is a coding scheme—aparticular way to encode a message and an accompanying way to decode the secretlater. The original message, before it is encoded, often is called plaintext or cleartext.
The coded message, after the cipher is applied, often is called ciphertext. Figure 14-3shows a simple example.
Plaintext    Ciphertext        Plaintext
Meet me at the pier                            Phhw ph dw wkh slhu                               Meet me at the pierat midnight   dw plgqljkw      at midnight
Encoder          Decoder
Figure 14-3. Plaintext and ciphertext
Ciphers have been used to generate secret messages for thousands of years. Legend hasit that Julius Caesar used a three-character rotation cipher, where each character in themessage is replaced with a character three alphabetic positions forward. In our mod-ern alphabet, “A” would be replaced by “D,” “B” would be replaced by “E,” and so on.
For example, in Figure 14-4, the message “meet me at the pier at midnight” encodesinto the ciphertext “phhw ph dw wkh slhu dw plgqljkw” using the rot3 (rotate by 3characters) cipher.* The ciphertext can be decrypted back to the original plaintextmessage by applying the inverse coding, rotating –3 characters in the alphabet.
Cipher              ABCDEFGHIJKLMNOPQRSTUVWXYZ
ABCDEFGHIJKLMNOPQRSTUVWXYZABC
Plaintext     MEET ME AT THE AT PIER AT MIDNIGHT
Ciphertext    PHHW PH DW WKH DW SLHU DW PLGQLJKW
Figure 14-4. Rotate-by-3 cipher example* For simplicity of example, we aren’t rotating punctuation or whitespace, but you could.|

Cipher Machines
Ciphers began as relatively simple algorithms, because human beings needed to dothe encoding and decoding themselves. Because the ciphers were simple, peoplecould work the codes using pencil and paper and code books. However, it also waspossible for clever people to “crack” the codes fairly easily.
As technology advanced, people started making machines that could quickly andaccurately encode and decode messages using much more complicated ciphers.
Instead of just doing simple rotations, these cipher machines could substitute charac-ters, transpose the order of characters, and slice and dice messages to make codes*much harder to crack.
Keyed Ciphers
Because code algorithms and machines could fall into enemy hands, most machineshaddials that could be set to a large number of different values that changed how thecipher worked. Even if the machine was stolen, without the right dial settings (keyvalues) the decoder wouldn’t work.†
These cipher parameters were called keys. You needed to enter the right key into thecipher machine to get the decoding process to work correctly. Cipher keys make asingle cipher machine act like a set of many virtual cipher machines, each of whichbehaves differently because they have different key values.
Figure 14-5 illustrates an example of keyed ciphers. The cipher algorithm is the triv-ial “rotate-by-N” cipher. The value of N is controlled by the key. The same inputmessage, “meet me at the pier at midnight,” passed through the same encodingmachine, generates different outputs depending on the value of the key. Today, vir-tually all cipher algorithms use keys.
Digital Ciphers
With the advent of digital computation, two major advances occurred:• Complicated encoding and decoding algorithms became possible, freed from thespeed and function limitations of mechanical machinery.* Perhaps the most famous mechanical code machine was the World War II German Enigma code machine.
Despite the complexity of the Enigma cipher, Alan Turing and colleagues were able to crack the Enigmacodes in the early 1940s, using the earliest digital computers.†In reality, having the logic of the machine in your possession can sometimes help you to crack the code,becausethemachinelogicmaypointtopatternsthatyoucanexploit.Moderncryptographicalgorithmsusu-ally are designed so that even if the algorithm is publicly known, it’s difficult to come up with any patternsthat will help evildoers crack the code. In fact, many of the strongest ciphers in common use have theirsource code available in the public domain, for all to see and study!|
(a)        Plaintext
Meet me at the pierat midnight
Ciphertext
Key= 1                  nffu nf bu uif qjfsbu njeojhiu
Rotate(n) encoder(b)        Plaintext
Meet me at the pierat midnight
Ciphertext
Key= 2                  oggv og cv vjgrkgt cv okfpkijv
Rotate(n) encoder(c)        Plaintext
Meet me at the pierat midnight
Ciphertext
Key= 3                  phhw ph dw wkhslhu dw plgqlijkw
Rotate(n) encoder
Figure 14-5. The rotate-by-N cipher, using different keys• It became possible to support very large keys, so that a single cipher algorithmcould yield trillions of virtual cipher algorithms, each differing by the value ofthe key. The longer the key, the more combinations of encodings are possible,and the harder it is to crack the code by randomly guessing keys.
Unlike physical metal keys or dial settings in mechanical devices, digital keys are justnumbers. These digital key values are inputs to the encoding and decoding algo-rithms. The coding algorithms are functions that take a chunk of data and encode/decode it based on the algorithm and the value of the key.
Given a plaintext message called P, an encoding function called E, and a digitalencoding key called e, you can generate a coded ciphertext message C (Figure 14-6).
You can decode the ciphertext C back into the original plaintext P by using thedecoder function D and the decoding key d. Of course, the decoding and encodingfunctions are inverses of each other; the decoding of the encoding of P gives back theoriginal message P.|

Plaintext P
C = E(P, e)         Key= e                             Ciphertext C
Encoder E
Figure 14-6. Plaintext is encoded with encoding key e, and decoded using decoding key d
Symmetric-Key Cryptography
Let’s talk in more detail about how keys and ciphers work together. Many digitalcipher algorithms are called symmetric-key ciphers, because they use the same keyvalue for encoding as they do for decoding (e = d). Let’s just call the key k.
In a symmetric key cipher, both a sender and a receiver need to have the same sharedsecret key, k, to communicate. The sender uses the shared secret key to encrypt themessage and sends the resulting ciphertext to the receiver. The receiver takes theciphertext and applies the decrypting function, along with the same shared secretkey, to recover the original plaintext (Figure 14-7).
Plaintext P
P = D(C, d)         Key= d                             Ciphertext C
Decoder D
Figure 14-7. Symmetric-key cryptography algorithms use the same key for encoding and decoding
Some popular symmetric-key cipher algorithms are DES, Triple-DES, RC2, and RC4.
Key Length and Enumeration Attacks
It’s very important that secret keys stay secret. In most cases, the encoding anddecoding algorithms are public knowledge, so the key is the only thing that’s secret!
Agoodcipheralgorithmforces the enemy to try every single possible key value in theuniverse to crack the code. Trying all key values by brute force is called an enumera-tion attack. If there are only a few possible key values, a bad guy can go through all ofthem by brute force and eventually crack the code. But if there are a lot of possiblekey values, it might take the bad guy days, years, or even the lifetime of the universeto go through all the keys, looking for one that breaks the cipher.|

Thenumberofpossiblekeyvaluesdependsonthenumberofbitsinthekeyandhowmanyofthe possible keys are valid. For symmetric-key ciphers, usually all of the keyvalues are valid.* An 8-bit key would have only 256 possible keys, a 40-bit key would40have 2       possible keys (around one trillion keys), and a 128-bit key would generatearound 340,000,000,000,000,000,000,000,000,000,000,000,000 possible keys.
For conventional symmetric-key ciphers, 40-bit keys are considered safe enough forsmall, noncritical transactions. However, they are breakable by today’s high-speedworkstations, which can now do billions of calculations per second.
In contrast, 128-bit keys are considered very strong for symmetric-key cryptography.
In fact, long keys have such an impact on cryptographic security that the U.S. gov-ernment has put export controls on cryptographic software that uses long keys, toprevent potentially antagonistic organizations from creating secret codes that the U.
S. National Security Agency (NSA) would itself be unable to crack.
Bruce Schneier’s excellent book, Applied Cryptography (John Wiley & Sons),includes a table describing the time it would take to crack a DES cipher by guessingall keys, using 1995 technology and economics.† Excerpts of this table are shown in
Table 14-1.
Table 14-1. Longer keys take more effort to crack (1995 data, from “Applied Cryptography”)
Attack cost             40-bit key        56-bit key         64-bit key         80-bit key           128-bit key19 years$100,000                2 secs            35 hours           1 year             70,000 years         10$1,000,000              200 msecs         3.5 hours          37 days            7,000 years          1018 years$10,000,000             20 msecs          21 mins            4 days             700 years            1017 years$100,000,000            2 msecs           2 mins             9 hours            70 years             1016 years$1,000,000,000          200 usecs         13 secs            1 hour             7 years              1015 years
Given the speed of 1995 microprocessors, an attacker willing to spend $100,000 in1995 could break a 40-bit DES code in about 2seconds. And computers in 2002already are 20 times faster than they were in 1995. Unless the users change keys fre-quently, 40-bit keys are not safe against motivated opponents.
The DES standard key size of 56 bits is more secure. In 1995 economics, a $1 mil-lion assault still would take several hours to crack the code. But a person with accessto supercomputers could crack the code by brute force in a matter of seconds. In* There are ciphers where only some of the key values are valid. For example, in RSA, the best-knownasymmetric-key cryptosystem, valid keys must be related to prime numbers in a certain way. Only a smallnumber of the possible key values have this property.†Computation speed has increased dramatically since 1995, and cost has been reduced. And the longer ittakes you to read this book, the faster they’ll become! However, the table still is relatively useful, even if thetimes are off by a factor of 5, 10, or more.|
contrast, 128-bit DES keys, similar in size to Triple-DES keys, are believed to be*effectively unbreakable by anyone, at any cost, using a brute-force attack.
Establishing Shared Keys
Onedisadvantage of symmetric-key ciphers is that both the sender and receiver haveto have a shared secret key before they can talk to each other.
If you wanted to talk securely with Joe’s Hardware store, perhaps to order some wood-working tools after watching a home-improvement program on public television,you’d have to establish a private secret key between you and www.joes-hardware.combefore you could order anything securely. You’d need a way to generate the secret keyand to remember it. Both you and Joe’s Hardware, and every other Internet user,would have thousands of keys to generate and remember.
Say that Alice (A), Bob (B), and Chris (C) all wanted to talk to Joe’s Hardware (J). A,
B, and C each would need to establish their own secret keys with J. A would needkey kAJ                               BJ  CJ, B would need key k , and C would need key k . Every pair of communicat-ing parties needs its own private key. If there are N nodes, and each node has to talk2securely with all the other N–1 nodes, there are roughly N total secret keys: anadministrative nightmare.
Public-Key Cryptography
Instead of a single encoding/decoding key for every pair of hosts, public-key cryptog-raphy uses two asymmetric keys: one for encoding messages for a host, and anotherfor decoding the host’s messages. The encoding key is publicly known to the world(thus the name public-key cryptography), but only the host knows the private decod-ing key (see Figure 14-8). This makes key establishment much easier, because every-one can find the public key for a particular host. But the decoding key is kept secret,so only the recipient can decode messages sent to it.x†
Node X can take its encoding key e and publish it publicly. Now anyone wantingto send a message to node X can use the same, well-known public key. Because eachhost is assigned an encoding key, which everyone uses, public-key cryptographyavoids the N2explosion of pairwise symmetric keys (see Figure 14-9).* Alargekeydoesnotmeanthatthecipherisfoolproof,though!Theremaybeanunnoticedflawinthecipheralgorithm or implementation that provides a weakness for an attacker to exploit. It’s also possible that theattackermayhavesomeinformationabouthowthekeysaregenerated,sothatheknowssomekeysaremorelikely thanothers,helpingtofocusabrute-forceattack.Orausermightleavethesecretkeysomeplacewherean attacker might be able to steal it.†Aswe’llseelater,mostpublic-keylookupactuallyisdonethroughdigitalcertificates,butthedetailsofhowyou find public keys don’t matter much now—just know that they are publicly available somewhere.|

Client
Plaintext
Public                Encrypted ciphertext         Privatekey= es     Internet                               key= ds
Plaintext
Server
Figure 14-8. Public-key cryptography is asymmetric, using different keys for encoding and decoding
A                   AkAX                  exkBX              kDX ex               ex
BDBD
X                   XkCX                  ex
C                   C(a) Symmetric-key cryptography                        (b) Public-key cryptography
Figure 14-9. Public-key cryptography assigns a single, public encoding key to each host
Even though everyone can encode messages to X with the same key, no one otherthan X can decode the messages, because only X has the decoding private key dx.
Splitting the keys lets anyone encode a message but restricts the ability to decodemessages to only the owner. This makes it easier for nodes to securely send mes-sages to servers, because they can just look up the server’s public key.
Public-key encryption technology makes it possible to deploy security protocols toevery computer user around the world. Because of the great importance of making a|
standardized public-key technology suite, a massive Public-Key Infrastructure (PKI)standards initiative has been under way for well over a decade.
RSA
Thechallenge of any public-key asymmetric cryptosystem is to make sure no bad guycan compute the secret, private key—even if he has all of the following clues:• The public key (which anyone can get, because it’s public)• A piece of intercepted ciphertext (obtained by snooping the network)• Amessageanditsassociated ciphertext (obtained by running the encoder on anytext)
One popular public-key cryptosystem that meets all these needs is the RSA algo-rithm, invented at MIT and subsequently commercialized by RSA Data Security.
Given a public key, an arbitrary piece of plaintext, the associated ciphertext fromencoding the plaintext with the public key, the RSA algorithm itself, and even thesource code of the RSA implementation, cracking the code to find the correspondingprivate key is believed to be as hard a problem as computing huge prime numbers—believed to be one of the hardest problems in all of computer science. So, if you canfind a fast way of factoring large numbers into primes, not only can you break into
Swiss bank accounts, but you can also win a Turing Award.
The details of RSA cryptography involve some tricky mathematics, so we won’t gointo them here. There are plenty of libraries available to let you perform the RSAalgorithms without you needing a Ph.D. in number theory.
Hybrid Cryptosystems and Session Keys
Asymmetric, public-key cryptography is nifty, because anyone can send secure mes-sages to a public server, just by knowing its public key. Two nodes don’t first have tonegotiate a private key in order to communicate securely.
But public-key cryptography algorithms tend to be computationally slow. In prac-tice, mixtures of both symmetric and asymmetric schemes are used. For example, itis common to use public-key cryptography to conveniently set up secure communi-cation between nodes but then to use that secure channel to generate and communi-cate a temporary, random symmetric key to encrypt the rest of the data throughfaster, symmetric cryptography.
Digital Signatures
So far, we’ve been talking about various kinds of keyed ciphers, using symmetric andasymmetric keys, to allow us to encrypt and decrypt secret messages.|

In addition to encrypting and decrypting messages, cryptosystems can be used tosign messages, proving who wrote the message and proving the message hasn’t beentampered with. This technique, called digital signing, is important for Internet secu-rity certificates, which we discuss in the next section.
Signatures Are Cryptographic Checksums
Digital signatures are special cryptographic checksums attached to a message. Theyhave two benefits:• Signatures prove the author wrote the message. Because only the author has theauthor’s top-secret private key,* only the author can compute these checksums.
The checksum acts as a personal “signature” from the author.• Signatures prevent message tampering. If a malicious assailant modified the mes-sage in-flight, the checksum would no longer match. And because the checksuminvolves the author’s secret, private key, the intruder will not be able to fabricatea correct checksum for the tampered-with message.
Digital signatures often are generated using asymmetric, public-key technology. Theauthor’s private key is used as a kind of “thumbprint,” because the private key isknown only by the owner.
Figure 14-10 shows an example of how node A can send a message to node B andsign it:• Node A distills the variable-length message into a fixed-sized digest.• Node A applies a “signature” function to the digest that uses the user’s privatekey as a parameter. Because only the user knows the private key, a correct signa-ture function shows the signer is the owner. In Figure 14-10, we use the decoderfunction D as the signature function, because it involves the user’s private key.†• Once the signature is computed, node A appends it to the end of the messageand sends both the message and the signature to node B.• Onreceipt, if node B wants to make sure that node A really wrote the message,and that the message hasn’t been tampered with, node B can check the signa-ture. Node B takes the private-key scrambled signature and applies the inversefunction using the public key. If the unpacked digest doesn’t match node B’sownversion of the digest, either the message was tampered with in-flight, or thesender did not have node A’s private key (and therefore was not node A).* Thisassumestheprivatekeyhasnotbeenstolen.Mostprivatekeysexpireafterawhile.Therealsoare“revo-cation lists” that keep track of stolen or compromised keys.†With the RSA cryptosystem, the decoder function D is used as the signature function, because D alreadytakes the private key as input. Note that the decoder function is just a function, so it can be used on anyinput. Also, in the RSA cryptosystem, the D and E functions work when applied in either order and canceleach other out. So, E(D(stuff)) = stuff, just as D(E(stuff)) = stuff.|

A    Plaintext           Bmessage
Message  Message      Message digestdigest   digest
D                    Signature                   E                      Same?
Private        Publickey= dA       key= eA
Figure 14-10. Unencrypted digital signature
Digital Certiﬁcates
In this section, we talk about digital certificates, the “ID cards” of the Internet. Digi-tal certificates (often called “certs,” like the breath mints) contain information abouta user or firm that has been vouched for by a trusted organization.
Weall carry many forms of identification. Some IDs, such as passports and drivers’licenses, are trusted enough to prove one’s identity in many situations. For example,a U.S. driver’s license is sufficient proof of identity to let you board an airplane to
NewYork for New Year’s Eve, and it’s sufficient proof of your age to let you drinkintoxicating beverages with your friends when you get there.
Moretrusted forms of identification, such as passports, are signed and stamped by agovernment on special paper. They are harder to forge, so they inherently carry ahigher level of trust. Some corporate badges and smart cards include electronics tohelp strengthen the identity of the carrier. Some top-secret government organiza-tions even need to match up your fingerprints or retinal capillary patterns with your
ID before trusting it!
Other forms of ID, such as business cards, are relatively easy to forge, so people trustthis information less. They may be fine for professional interactions but probably arenot enough proof of employment when you apply for a home loan.
The Guts of a Certiﬁcate
Digital certificates also contain a set of information, all of which is digitally signed byan official “certificate authority.” Basic digital certificates commonly contain basicthings common to printed IDs, such as:• Subject’s name (person, server, organization, etc.)• Expiration date|
• Certificate issuer (who is vouching for the certificate)• Digital signature from the certificate issuer
Additionally, digital certificates often contain the public key of the subject, as well asdescriptive information about the subject and about the signature algorithm used.
Anyonecancreateadigital certificate, but not everyone can get a well-respected sign-ing authority to vouch for the certificate’s information and sign the certificate withits private key. A typical certificate structure is shown in Figure 14-11.
Certificate format version number
Certificate serial number
Certificate signature algorithm
Certificate issuer                            Digital signature
Validity period function
Subject’s name
Subject’s public key
Other extension information
Digital signature
Figure 14-11. Typical digital signature format
X.509 v3 Certiﬁcates
Unfortunately, there is no single, universal standard for digital certificates. There aremany,subtly different styles of digital certificates, just as not all printed ID cards con-tain the same information in the same place. The good news is that most certificatesin use today store their information in a standard form, called X.509 v3. X.509 v3 cer-tificates provide a standard way of structuring certificate information into parseablefields. Different kinds of certificates have different field values, but most follow the
X.509 v3 structure. The fields of an X.509 certificate are described in Table 14-2.
Table 14-2. X.509 certificate fields
Field       Description
Version     The X.509 certificate version number for this certificate. Usually version 3 today.
Serial Number                                A unique integer generated by the certification authority. Each certificate from a CA musthave a unique serial number.
Signature Algorithm ID                       The cryptographic algorithm used for the signature. For example, “MD2 digest with RSAencryption”.
Certificate Issuer                           The name for the organization that issued and signed this certificate, in X.500 format.
Validity Period                              When this certificate is valid, defined by a start date and an end date.|

Table 14-2. X.509 certificate fields (continued)
FieldDescription
Subject’s Name                        The entity described in the certificate, such as a person or an organization. The subjectname is in X.500 format.
Subject’s Public Key Information      The public key for the certificate’s subject, the algorithm used for the public key, and anyadditional parameters.
Issuer Unique ID (optional)           An optional unique identifier for the certificate issuer, to allow the potential reuse of thesame issuer name.
Subject Unique ID (optional)          Anoptionaluniqueidentifierforthecertificatesubject,toallowthepotentialreuseofthesame subject name.
Extensions                            Anoptionalsetofextensionfields(inversion3andhigher).Eachextensionfieldisflaggedas critical or noncritical. Critical extensions are important and must be understood by thecertificate user. If a certificate user doesn’t recognize a critical extension field, it mustreject the certificate. Common extension fields in use include:
Basic Constraints
Subject’s relationship to certification authority
Certificate Policy
The policy under which the certificate is granted
Key Usage
Restricts how the public key can be used
Certification Authority Signature     The certification authority’s digital signature of all of the above fields, using the specifiedsigning algorithm.
There are several flavors of X.509-based certificates, including (among others) webserver certificates, client email certificates, software code-signing certificates, and cer-tificate authority certificates.
Using Certiﬁcates to Authenticate Servers
When you establish a secure web transaction through HTTPS, modern browsersautomatically fetch the digital certificate for the server being connected to. If theserver does not have a certificate, the secure connection fails. The server certificatecontains many fields, including:• Name and hostname of the web site• Public key of the web site• Name of the signing authority• Signature from the signing authority
When the browser receives the certificate, it checks the signing authority.* If it is apublic, well-respected signing authority, the browser will already know its public key* BrowsersandotherInternetapplicationstryhardtohidethedetailsofmostcertificatemanagement,tomakebrowsing easier. But, when you are browsing through secure connections, all the major browsers allow youto personally examinethecertificates of the sites to which you are talking, to be sure all is on the up-and-up.|
(browsers ship with certificates of many signing authorities preinstalled), so it canverify the signature as we discussed in the previous section, “Digital Signatures.”
Figure 14-12 shows how a certificate’s integrity is verified using its digital signature.
Certificate format version number
Certificate serial number
Certificate signature algorithm
Certificate issuer(signing authority)
Validity period
Subject’s name     B
Subject’s public key
Other extension information
Message digest
Messagedigest
Digital signature                              E  Same?
Signing authority’spublic key
Figure 14-12. Verifying that a signature is real
If the signing authority is unknown, the browser isn’t sure if it should trust the sign-ing authority and usually displays a dialog box for the user to read and see if he truststhe signer. The signer might be the local IT department, or a software vendor.
HTTPS: The Details
HTTPS is the most popular secure version of HTTP. It is widely implemented andavailable in all major commercial browsers and servers. HTTPS combines the HTTPprotocol with a powerful set of symmetric, asymmetric, and certificate-based crypto-graphic techniques, making HTTPS very secure but also very flexible and easy toadminister across the anarchy of the decentralized, global Internet.
HTTPS has accelerated the growth of Internet applications and has been a majorforce in the rapid growth of web-based electronic commerce. HTTPS also has beencritical in the wide-area, secure administration of distributed web applications.
HTTPS Overview
HTTPS is just HTTP sent over a secure transport layer. Instead of sending HTTPmessages unencrypted to TCP and across the world-wide Internet (Figure 14-13a),
HTTPS sends the HTTP messages first to a security layer that encrypts them beforesending them to TCP (Figure 14-13b).|

HTTP                       Application layer
HTTP                       Application layer                      SSL or TLS                    Security layer
TCP                       Transport layer                            TCP                       Transport layer
IP                       Network layer                               IP                       Network layer
Network interfaces                 Data link layer                   Network interfaces                 Data link layer(a) HTTP                           (b) HTTPS
Figure 14-13. HTTP transport-level security
Today, the HTTP security layer is implemented by SSL and its modern replacement,
TLS. We follow the common practice of using the term “SSL” to mean either SSL or
TLS.
HTTPS Schemes
Today, secure HTTP is optional. Thus, when making a request to a web server, weneed a way to tell the web server to perform the secure protocol version of HTTP.
This is done in the scheme of the URL.
In normal, nonsecure HTTP, the scheme prefix of the URL is http, as in:http://www.joes-hardware.com/index.html
In the secure HTTPS protocol, the scheme prefix of the URL is https, as in:https://cajun-shop.securesites.com/Merchant2/merchant.mv?Store_Code=AGCGS
When a client (such as a web browser) is asked to perform a transaction on a webresource, it examines the scheme of the URL:• If the URL has an http scheme, the client opens a connection to the server onport 80 (by default) and sends it plain-old HTTP commands (Figure 14-14a).• If the URL has an https scheme, the client opens a connection to the server onport 443 (by default) and then “handshakes” with the server, exchanging some
SSL security parameters with the server in a binary format, followed by theencrypted HTTP commands (Figure 14-14b).
Because SSL traffic is a binary protocol, completely different from HTTP, the trafficis carried on different ports (SSL usually is carried over port 443). If both SSL and
HTTPtraffic arrived on port 80, most web servers would interpret binary SSL trafficas erroneous HTTP and close the connection. A more integrated layering of securityservices into HTTP would have eliminated the need for multiple destination ports,but this does not cause severe problems in practice.
Let’s look a bit more closely at how SSL sets up connections with secure servers.|
(a) HTTP request
HTTP                80
Client                             Server(b) HTTPS request443
HTTPS
Client                          Secure server(c) HTTPS over HTTP tunnel8080                               443
HTTPS
HTTPS tunnel           Proxy
Client                           Secure server
Figure 14-14. HTTP and HTTPS port numbers
Secure Transport Setup
In unencrypted HTTP, a client opens a TCP connection to port 80 on a web server,sends a request message, receives a response message, and closes the connection.
This sequence is sketched in Figure 14-15a.
The procedure is slightly more complicated in HTTPS, because of the SSL securitylayer. In HTTPS, the client first opens a connection to port 443 (the default port forsecure HTTP) on the web server. Once the TCP connection is established, the clientandserver initialize the SSL layer, negotiating cryptography parameters and exchang-ing keys. When the handshake completes, the SSL initialization is done, and the cli-ent can send request messages to the security layer. These messages are encryptedbefore being sent to TCP. This procedure is depicted in Figure 14-15b.
SSL Handshake
Before you can send encrypted HTTP messages, the client and server need to do an
SSL handshake, where they:• Exchange protocol version numbers• Select a cipher that each side knows• Authenticate the identity of each side• Generate temporary session keys to encrypt the channel|
(a) Unencrypted HTTP transaction (b) Encrypted HTTPS transaction
Internet                  80       Internet                 4431
Client                 Server     Client                 Server
Establish TCP connection to server port 80                         Establish TCP connection to server port 443
Internet2
Client                 Server
SSL security parameters handshake
Internet                           Internet3                ED
Client                 Server     Client                 Server
HTTP request sent over TCP        HTTP request sent over SSL/encrypted request sent over TCP
Internet                           Internet4                DE
Client                 Server     Client                 Server
HTTP response sent over TCP       HTTP response sent over SSL/encrypted response sent over TCP
Internet5
Client                 Server
SSL close notification
Internet                           Internet6
Client                 Server     Client                 Server
TCP connection close              TCP connection close
Figure 14-15. HTTP and HTTPS transactions
Before any encrypted HTTP data flies across the network, SSL already has sent abunch of handshake data to establish the communication. The essence of the SSLhandshake is shown in Figure 14-16.
This is a simplified version of the SSL handshake. Depending on how SSL is beingused, the handshake can be more complicated, but this is the general idea.|

Client               Internet              Server(1) Client sends cipher choices and requests certification
Servercertificate
Client               Internet              Server(2) Server sends chosen cipher and certificate
Server
Client               Internet              Server
SSL security parameters handshake
Client               Internet              Server(3) Client sends secret; client and server make keys
Client               Internet              Server(4) Client and server tell each other to start encryption
Figure 14-16. SSL handshake (simplified)
Server Certiﬁcates
SSL supports mutual authentication, carrying server certificates to clients and carry-ing client certificates back to servers. But today, client certificates are not commonlyused for browsing. Most users don’t even possess personal client certificates.* A webserver can demand a client certificate, but that seldom occurs in practice.†
On the other hand, secure HTTPS transactions always require server certificates.
Whenyouperformasecure transaction on a web server, such as posting your creditcard information, you want to know that you are talking to the organization youthink you are talking to. Server certificates, signed by a well-known authority, helpyou assess how much you trust the server before sending your credit card or per-sonal information.
The server certificate is an X.509 v3–derived certificate showing the organization’sname, address, server DNS domain name, and other information (see Figure 14-17).
You and your client software can examine the certificate to make sure everythingseems to be on the up-and-up.* Client certificates are used for web browsing in some corporate settings, and client certificates are used forsecure email. In the future, client certificates may become more common for web browsing, but todaythey’ve caught on very slowly.†Some organizational intranets use client certificates to control employee access to information.|

Server
Client        certificate     Internet                        Server
Certificate serial number                35:DE:F4:CF
Certificate expiration date              Wed, Sep 17, 2003
Site’s organization name                 Joe’s Hardware Online
Site’s DNS hostname                      www.joes-hardware.com
Site’s public key
Certificate issuer name                  RSA Data Security
Certificate issuer signature
Figure 14-17. HTTPS certificates are X.509 certificates with site information
Site Certiﬁcate Validation
SSL itself doesn’t require you to examine the web server certificate, but most mod-ern browsers do some simple sanity checks on certificates and provide you with themeans to do more thorough checks. One algorithm for web server certificate valida-tion, proposed by Netscape, forms the basis of most browser’s validation tech-niques. The steps are:
Date check
First, the browser checks the certificate’s start and end dates to ensure the certifi-cate is still valid. If the certificate has expired or has not yet become active, thecertificate validation fails and the browser displays an error.
Signer trust check
Every certificate is signed by some certificate authority (CA), who vouches forthe server. There are different levels of certificate, each requiring different levelsof background verification. For example, if you apply for an e-commerce servercertificate, you usually need to provide legal proof of incorporation as a business.
Anyone can generate certificates, but some CAs are well-known organizationswith well-understood procedures for verifying the identity and good businessbehavior of certificate applicants. For this reason, browsers ship with a list ofsigning authorities that are trusted. If a browser receives a certificate signed bysome unknown (and possibly malicious) authority, the browser usually displaysa warning. Browsers also may choose to accept any certificates with a valid sign-ing path to a trusted CA. In other words, if a trusted CA signs a certificate for“Sam’s Signing Shop” and Sam’s Signing Shop signs a site certificate, thebrowser may accept the certificate as deriving from a valid CA path.|

Signature check
Once the signing authority is judged as trustworthy, the browser checks the cer-tificate’s integrity by applying the signing authority’s public key to the signatureand comparing it to the checksum.
Site identity check
To prevent a server from copying someone else’s certificate or intercepting theirtraffic, most browsers try to verify that the domain name in the certificate matchesthe domain name of the server they talked to. Server certificates usually contain asingle domain name, but some CAs create certificates that contain lists of servernames or wildcarded domain names, for clusters or farms of servers. If the host-name does not match the identity in the certificate, user-oriented clients musteither notify the user or terminate the connection with a bad certificate error.
Virtual Hosting and Certiﬁcates
It’s sometimes tricky to deal with secure traffic on sites that are virtually hosted (mul-tiple hostnames on a single server). Some popular web server programs support onlya single certificate. If a user arrives for a virtual hostname that does not strictly matchthe certificate name, a warning box is displayed.
For example, consider the Louisiana-themed e-commerce site Cajun-Shop.com. Thesite’s hosting provider provided the official name cajun-shop.securesites.com. Whenusers go to https://www.cajun-shop.com, the official hostname listed in the server cer-tificate (*.securesites.com) does not match the virtual hostname the user browsed to(www.cajun-shop.com), and the warning in Figure 14-18 appears.
To prevent this problem, the owners of Cajun-Shop.com redirect all users to cajun-shop.securesites.com when they begin secure transactions. Cert management for vir-tually hosted sites can be a little tricky.
A Real HTTPS Client
SSL is a complicated binary protocol. Unless you are a crypto expert, you shouldn’tsend raw SSL traffic directly. Thankfully, several commercial and open source librar-ies exist to make it easier to program SSL clients and servers.
OpenSSL
OpenSSL is the most popular open source implementation of SSL and TLS. The
OpenSSL Project is a collaborative volunteer effort to develop a robust, commercial-grade, full-featured toolkit implementing the SSL and TLS protocols, as well as a full-strength, general-purpose cryptography library. You can get information about
OpenSSL, and download the software, from http://www.openssl.org.|
(a) The hostname in this URL (www.cajun-shop.com)does not match the name in the certificate, because thesite is virtually hosted, and the certificate is made outto *.securesites.com.(b) A dialog box warns the user that the site’s certificate hasa valid date and is from a valid certificate authority, but thename listed in the certificate does not match the siterequested in the URL.(c) To get more details the user presses the “View Certificate”button, and sees that the certificate is a wildcard certificatemade out to “*.securesites.com”.  With this information, the usercan decide whether to accept or decline the certificate.(d) Accepting the certificate loads the page through the secure
HTTPS protocol.
To avoid this kind of user error, this particular site directs all
HTTPS traffic to the hostname alias cajun-shop.securesites.com.
This virtual hostname matches the name on the certificateprovided by the ISP as part of their commerce package.
Figure 14-18. Certificate name mismatches bring up certificate error dialog boxes
You might also hear of SSLeay (pronounced S-S-L-e-a-y). OpenSSL is the successorto the SSLeay library, and it has a very similar interface. SSLeay was originally devel-oped by Eric A. Young (the “eay” of SSLeay).
A Simple HTTPS Client
In this section, we’ll use the OpenSSL package to write an extremely primitive
HTTPS client. This client establishes an SSL connection with a server, prints out|
some identification information from the site server, sends an HTTP GET requestacross the secure channel, receives an HTTP response, and prints the response.
The C program shown below is an OpenSSL implementation of the trivial HTTPSclient. To keep the program simple, error-handling and certificate-processing logichas not been included.
Because error handling has been removed from this example program, you shoulduse it only for explanatory value. The software will crash or otherwise misbehave innormal error conditions./*********************************************************************** https_client.c --- very simple HTTPS client with no error checking*     usage: https_client servername**********************************************************************/#include <stdio.h>#include <memory.h>#include <errno.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <netdb.h>#include <openssl/crypto.h>#include <openssl/x509.h>#include <openssl/pem.h>#include <openssl/ssl.h>#include <openssl/err.h>void main(int argc, char **argv){
SSL *ssl;
SSL_CTX *ctx;
SSL_METHOD *client_method;
X509 *server_cert;int sd,err;char *str,*hostname,outbuf[4096],inbuf[4096],host_header[512];struct hostent *host_entry;struct sockaddr_in server_socket_address;struct in_addr ip;/*========================================*//* (1) initialize SSL library *//*========================================*/
SSLeay_add_ssl_algorithms();client_method = SSLv2_client_method();
SSL_load_error_strings();ctx = SSL_CTX_new(client_method);|
printf("(1) SSL context initialized\n\n");/*=============================================*//* (2) convert server hostname into IP address *//*=============================================*/hostname = argv[1];host_entry = gethostbyname(hostname);bcopy(host_entry->h_addr, &(ip.s_addr), host_entry->h_length);printf("(2) '%s' has IP address '%s'\n\n", hostname, inet_ntoa(ip));/*=================================================*//* (3) open a TCP connection to port 443 on server *//*=================================================*/sd = socket (AF_INET, SOCK_STREAM, 0);memset(&server_socket_address, '\0', sizeof(server_socket_address));server_socket_address.sin_family = AF_INET;server_socket_address.sin_port = htons(443);memcpy(&(server_socket_address.sin_addr.s_addr),host_entry->h_addr, host_entry->h_length);err = connect(sd, (struct sockaddr*) &server_socket_address,sizeof(server_socket_address));if (err < 0) { perror("can't connect to server port"); exit(1); }printf("(3) TCP connection open to host '%s', port %d\n\n",hostname, server_socket_address.sin_port);/*========================================================*//* (4) initiate the SSL handshake over the TCP connection *//*========================================================*/ssl = SSL_new(ctx);         /* create SSL stack endpoint */
SSL_set_fd(ssl, sd);        /* attach SSL stack to socket */err = SSL_connect(ssl);     /* initiate SSL handshake */printf("(4) SSL endpoint created & handshake completed\n\n");/*============================================*//* (5) print out the negotiated cipher chosen *//*============================================*/printf("(5) SSL connected with cipher: %s\n\n", SSL_get_cipher(ssl));/*========================================*//* (6) print out the server's certificate *//*========================================*/server_cert = SSL_get_peer_certificate(ssl);|
printf("(6) server's certificate was received:\n\n");str = X509_NAME_oneline(X509_get_subject_name(server_cert), 0, 0);printf("      subject: %s\n", str);str = X509_NAME_oneline(X509_get_issuer_name(server_cert), 0, 0);printf("      issuer: %s\n\n", str);/* certificate verification would happen here */
X509_free(server_cert);/*********************************************************//* (7) handshake complete --- send HTTP request over SSL *//*********************************************************/sprintf(host_header,"Host: %s:443\r\n",hostname);strcpy(outbuf,"GET / HTTP/1.0\r\n");strcat(outbuf,host_header);strcat(outbuf,"Connection: close\r\n");strcat(outbuf,"\r\n");err = SSL_write(ssl, outbuf, strlen(outbuf));shutdown (sd, 1); /* send EOF to server */printf("(7) sent HTTP request over encrypted channel:\n\n%s\n",outbuf);/**************************************************//* (8) read back HTTP response from the SSL stack *//**************************************************/err = SSL_read(ssl, inbuf, sizeof(inbuf) - 1);inbuf[err] = '\0';printf ("(8) got back %d bytes of HTTP response:\n\n%s\n",err,inbuf);/************************************************//* (9) all done, so close connection & clean up *//************************************************/
SSL_shutdown(ssl);close (sd);
SSL_free (ssl);
SSL_CTX_free (ctx);printf("(9) all done, cleaned up and closed connection\n\n");}
This example compiles and runs on Sun Solaris, but it is illustrative of how SSL pro-grams work on many OS platforms. This entire program, including all the encryp-tion and key and certificate management, fits in a three-page C program, thanks tothe powerful features provided by OpenSSL.|

Let’s walk through the program section by section:• The top of the program includes support files needed to support TCP network-ing and SSL.• Section 1 creates the local context that keeps track of the handshake parametersand other state about the SSL connection, by calling SSL_CTX_new.• Section 2converts the input hostname (provided as a command-line argument)to an IP address, using the Unix gethostbyname function. Other platforms mayhave other ways to provide this facility.• Section 3 opens a TCP connection to port 443 on the server by creating a localsocket, setting up the remote address information, and connecting to the remoteserver.• OncetheTCPconnectionisestablished,weattachtheSSLlayertotheTCPcon-nection using SSL_new and SSL_set_fd and perform the SSL handshake with theserver by calling SSL_connect. When section 4 is done, we have a functioning
SSL channel established, with ciphers chosen and certificates exchanged.• Section 5 prints out the value of the chosen bulk-encryption cipher.• Section 6 prints out some of the information contained in the X.509 certificatesent back from the server, including information about the certificate holder andthe organization that issued the certificate. The OpenSSL library doesn’t do any-thing special with the information in the server certificate. A real SSL applica-tion, such as a web browser, would do some sanity checks on the certificate tomakesureitis signed properly and came from the right host. We discussed whatbrowsers do with server certificates in “Site Certificate Validation.”• At this point, our SSL connection is ready to use for secure data transfer. In sec-tion 7, we send the simple HTTP request “GET / HTTP/1.0” over the SSL chan-nel using SSL_write, then close the outbound half of the connection.• In section 8, we read the response back from the connection using SSL_read, andprint it on the screen. Because the SSL layer takes care of all the encryption anddecryption, we can just write and read normal HTTP commands.• Finally, we clean up in section 9.
Refer to http://www.openssl.org for more information about the OpenSSL libraries.
Executing Our Simple OpenSSL Client
Thefollowing shows the output of our simple HTTP client when pointed at a secureserver. In this case, we pointed the client at the home page of the Morgan Stanley
Online brokerage. Online trading companies make extensive use of HTTPS.% https_client clients1.online.msdw.com(1) SSL context initialized|
(2) 'clients1.online.msdw.com' has IP address '63.151.15.11'(3) TCP connection open to host 'clients1.online.msdw.com', port 443(4) SSL endpoint created & handshake completed(5) SSL connected with cipher: DES-CBC3-MD5(6) server's certificate was received:subject: /C=US/ST=Utah/L=Salt Lake City/O=Morgan Stanley/OU=Online/CN=clients1.online.msdw.comissuer: /C=US/O=RSA Data Security, Inc./OU=Secure Server Certification
Authority(7) sent HTTP request over encrypted channel:
GET / HTTP/1.0
Host: clients1.online.msdw.com:443
Connection: close(8) got back 615 bytes of HTTP response:
HTTP/1.1 302 Found
Date: Sat, 09 Mar 2002 09:43:42 GMT
Server: Stronghold/3.0 Apache/1.3.14 RedHat/3013c (Unix) mod_ssl/2.7.1 OpenSSL/0.9.6
Location: https://clients.online.msdw.com/cgi-bin/ICenter/home
Connection: close
Content-Type: text/html; charset=iso-8859-1<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"><HTML><HEAD><TITLE>302 Found</TITLE></HEAD><BODY><H1>Found</H1>
The document has moved <A HREF="https://clients.online.msdw.com/cgi-bin/ICenter/home">here</A>.<P><HR><ADDRESS>Stronghold/3.0Apache/1.3.14 RedHat/3013c Server at clients1.online.msdw.com
Port 443</ADDRESS></BODY></HTML>(9) all done, cleaned up and closed connection
As soon as the first four sections are completed, the client has an open SSL connec-tion. It can then inquire about the state of the connection and chosen parametersand can examine server certificates.
In this example, the client and server negotiated the DES-CBC3-MD5 bulk-encryptioncipher. You also can see that the server site certificate belongs to the organization“Morgan Stanley” in “Salt Lake City, Utah, USA”. The certificate was granted by RSA
Data Security, and the hostname is “clients1.online.msdw.com,” which matches ourrequest.|

Once the SSL channel is established and the client feels comfortable about the sitecertificate, it sends its HTTP request over the secure channel. In our example, the cli-ent sends a simple “GET / HTTP/1.0” HTTP request and receives back a 302Redi-rect response, requesting that the user fetch a different URL.
Tunneling Secure Trafﬁc Through Proxies
Clients often use web proxy servers to access web servers on their behalf (proxies arediscussed in Chapter 6). For example, many corporations place a proxy at the secu-rity perimeter of the corporate network and the public Internet (Figure 14-19). Theproxy is the only device permitted by the firewall routers to exchange HTTP traffic,and it may employ virus checking or other content controls.
Client           Public Internet
Client                     Firewallproxy
Securityperimeter
Figure 14-19. Corporate firewall proxy
But once the client starts encrypting the data to the server, using the server’s publickey, the proxy no longer has the ability to read the HTTP header! And if the proxy can-notreadtheHTTPheader,itwon’tknowwheretoforwardtherequest(Figure14-20).client17.mycompany.com                                proxy.mycompany.com                     www.cajun-gifts.combdfwr73ytr6ouydoiw687eqidfjwvd76weti76fig287hdi98r82yr87pfdy72y87193836PDUyqe719eyty3gee98y8787
Figure 14-20. Proxy can’t proxy an encrypted request
TomakeHTTPSworkwithproxies,afewmodificationsareneededtotell the proxywhere to connect. One popular technique is the HTTPS SSL tunneling protocol.|

Using the HTTPS tunneling protocol, the client first tells the proxy the secure hostand port to which it wants to connect. It does this in plaintext, before encryptionstarts, so the proxy can read this information.
HTTP is used to send the plaintext endpoint information, using a new extensionmethod called CONNECT. The CONNECT method tells the proxy to open a con-nection to the desired host and port number and, when that’s done, to tunnel datadirectly between the client and server. The CONNECT method is a one-line textcommandthatprovides the hostname and port of the secure origin server, separatedby a colon. The host:port is followed by a space and an HTTP version string fol-lowed by a CRLF. After that there is a series of zero or more HTTP request headerlines, followed by an empty line. After the empty line, if the handshake to establishthe connection was successful, SSL data transfer can begin. Here is an example:
CONNECT home.netscape.com:443 HTTP/1.0
User-agent: Mozilla/1.1N<raw SSL-encrypted data would follow here...>
After the empty line in the request, the client will wait for a response from the proxy.
Theproxywill evaluate the request and make sure that it is valid and that the user isauthorized to request such a connection. If everything is in order, the proxy willmake a connection to the destination server and, if successful, send a 200 Connec-tion Established response to the client.
HTTP/1.0 200 Connection established
Proxy-agent: Netscape-Proxy/1.1
For more information about secure tunnels and security proxies, refer back to “Tun-nels” in Chapter 8.
For More Information
Security and cryptography are hugely important and hugely complicated topics. Ifyou’d like to learn more about HTTP security, digital cryptography, digital certifi-cates, and the Public-Key Infrastructure, here are a few starting points.
HTTP Security
Web Security, Privacy & Commerce
Simson Garfinkel, O’Reilly & Associates, Inc. This is one of the best, most read-able introductions to web security and the use of SSL/TLS and digital certificates.http://www.ietf.org/rfc/rfc2818.txt
RFC 2818, “HTTP Over TLS,” specifies how to implement secure HTTP over
Transport Layer Security (TLS), the modern successor to SSL.|
http://www.ietf.org/rfc/rfc2817.txt
RFC 2817, “Upgrading to TLS Within HTTP/1.1,” explains how to use the
Upgrade mechanism in HTTP/1.1 to initiate TLS over an existing TCP connec-tion. This allows unsecured and secured HTTP traffic to share the same well-known port (in this case, http: at 80 rather than https: at 443). It also enablesvirtual hosting, so a single HTTP+TLS server can disambiguate traffic intendedfor several hostnames at a single IP address.
SSL and TLShttp://www.ietf.org/rfc/rfc2246.txt
RFC2246,“TheTLSProtocolVersion1.0,”specifiesVersion1.0oftheTLSpro-tocol (the successor to SSL). TLS provides communications privacy over the
Internet. The protocol allows client/server applications to communicate in a waythat is designed to prevent eavesdropping, tampering, and message forgery.http://developer.netscape.com/docs/manuals/security/sslin/contents.htm“Introduction to SSL” introduces the Secure Sockets Layer (SSL) protocol. Origi-nally developed by Netscape, SSL has been universally accepted on the World
WideWebforauthenticated and encrypted communication between clients andservers.http://www.netscape.com/eng/ssl3/draft302.txt“The SSL Protocol Version 3.0” is Netscape’s 1996 specification for SSL.http://developer.netscape.com/tech/security/ssl/howitworks.html“How SSL Works” is Netscape’s introduction to key cryptography.http://www.openssl.org
The OpenSSL Project is a collaborative effort to develop a robust, commercial-grade, full-featured, and open source toolkit implementing the Secure Sockets
Layer (SSL v2/v3) and Transport Layer Security (TLS v1) protocols, as well as afull-strength, general-purpose cryptography library. The project is managed by aworldwide community of volunteers that use the Internet to communicate, plan,and develop the OpenSSL toolkit and its related documentation. OpenSSL isbased on the excellent SSLeay library developed by Eric A. Young and Tim J.
Hudson. The OpenSSL toolkit is licensed under an Apache-style licence, whichbasically means that you are free to get and use it for commercial and noncom-mercial purposes, subject to some simple license conditions.
Public-Key Infrastructurehttp://www.ietf.org/html.charters/pkix-charter.html
The IETF PKIX Working Group was established in 1995 with the intent ofdeveloping Internet standards needed to support an X.509-based Public-Key
Infrastructure. This is a nice summary of that group’s activities.|
http://www.ietf.org/rfc/rfc2459.txt
RFC 2459, “Internet X.509 Public Key Infrastructure Certificate and CRL Pro-file,” contains details about X.509 v3 digital certificates.
Digital Cryptography
Applied Cryptography
Bruce Schneier, John Wiley & Sons. This is a classic book on cryptography forimplementors.
The Code Book: The Science of Secrecy from Ancient Egypt to Quantum Cryptography
Simon Singh, Anchor Books. This entertaining book is a cryptography primer.
While it’s not intended for technology experts, it is a lively historical tour ofsecret coding.|

PART IV
Entities, Encodings, and
Internationalization
Part IV is all about the entity bodies of HTTP messages and the content that theentity bodies ship around as cargo:• Chapter15, Entities and Encodings, describes the formats and syntax of HTTPcontent.• Chapter16, Internationalization, surveys the web standards that allow people toexchange content in different languages and different character sets, around theglobe.• Chapter17, Content Negotiation and Transcoding, explains mechanisms fornegotiating acceptable content.
CHAPTER 15
Entities and Encodings
HTTP ships billions of media objects of all kinds every day. Images, text, movies,software programs... you name it, HTTP ships it. HTTP also makes sure that itsmessages can be properly transported, identified, extracted, and processed. In partic-ular, HTTP ensures that its cargo:• Can be identified correctly (using Content-Type media formats and Content-
Language headers) so browsers and other clients can process the content properly• Can be unpacked properly (using Content-Length and Content-Encoding headers)• Is fresh (using entity validators and cache-expiration controls)• Meets the user’s needs (based on content-negotiation Accept headers)• Moves quickly and efficiently through the network (using range requests, deltaencoding, and other data compression)• Arrives complete and untampered with (using transfer encoding headers and
Content-MD5 checksums)
To make all this happen, HTTP uses well-labeled entities to carry content.
This chapter discusses entities, their associated entity headers, and how they work totransport web cargo. We’ll show how HTTP provides the essentials of content size,type, and encodings. We’ll also explain some of the more complicated and powerfulfeatures of HTTP entities, including range requests, delta encoding, digests, andchunked encodings.
This chapter covers:• The format and behavior of HTTP message entities as HTTP data containers• How HTTP describes the size of entity bodies, and what HTTP requires in theway of sizing• The entity headers used to describe the format, alphabet, and language of con-tent, so clients can process it properly341• Reversible content encodings, used by senders to transform the content data for-mat before sending to make it take up less space or be more secure• Transfer encoding, which modifies how HTTP ships data to enhance the commu-nication of some kinds of content, and chunked encoding, a transfer encodingthat chops data into multiple pieces to deliver content of unknown length safely• Theassortmentoftags, labels, times, and checksums that help clients get the lat-est version of requested content• Thevalidators that act like version numbers on content, so web applications canensure they have fresh content, and the HTTP header fields designed to controlobject freshness• Ranges, which are useful for continuing aborted downloads where they left off• HTTPdelta encoding extensions, which allow clients to request just those partsof a web page that actually have changed since a previously viewed revision• Checksums of entity bodies, which are used to detect changes in entity contentas it passes through proxies
Messages Are Crates, Entities Are Cargo
If you think of HTTP messages as the crates of the Internet shipping system, then
HTTP entities are the actual cargo of the messages. Figure 15-1 shows a simpleentity, carried inside an HTTP response message.
HTTP/1.0 200 OK
Server: Netscape-Enterprise/3.6
Date: Sun, 17 Sep 2000 00:01:05 GMT
Content-type: text/plain         Entity headers
Content-length: 18
Entity
Hi! I'm a message!                  Entity body
Figure 15-1. Message entity is made up of entity headers and entity body
Theentity headers indicate a plaintext document (Content-Type: text/plain) that is amere 18 characters long (Content-Length: 18). As always, a blank line (CRLF) sepa-rates the header fields from the start of the body.
HTTPentity headers (covered in Chapter 3) describe the contents of an HTTP mes-sage. HTTP/1.1 defines 10 primary entity header fields:
Content-Type
The kind of object carried by the entity.
Content-Length
The length or size of the message being sent.|

Content-Language
The human language that best matches the object being sent.
Content-Encoding
Any transformation (compression, etc.) performed on the object data.
Content-Location
An alternate location for the object at the time of the request.
Content-Range
If this is a partial entity, this header defines which pieces of the whole are included.
Content-MD5
A checksum of the contents of the entity body.
Last-Modified
The date on which this particular content was created or modified at the server.
Expires
The date and time at which this entity data will become stale.
Allow
What request methods are legal on this resource; e.g., GET and HEAD.
ETag*
A unique validator for this particular instance of the document. The ETagheader is not defined formally as an entity header, but it is an important headerfor many operations involving entities.
Cache-Control
Directives on how this document can be cached. The Cache-Control header, likethe ETag header, is not defined formally as an entity header.
Entity Bodies†
The entity body just contains the raw cargo. Any other descriptive information iscontained in the headers. Because the entity body cargo is just raw data, the entityheaders are needed to describe the meaning of that data. For example, the Content-
Type entity header tells us how to interpret the data (image, text, etc.), and the Con-tent-Encoding entity header tells us if the data was compressed or otherwise recoded.
We talk about all of this and more in upcoming sections.
Therawcontent begins immediately after the blank CRLF line that marks the end ofthe header fields. Whatever the content is—text or binary, document or image, com-pressed or uncompressed, English or French or Japanese—it is placed right after the
CRLF.* Instances are described later in this chapter, in the section “Time-Varying Instances.”†If there is a Content-Encoding header, the content already has been encoded by the content-encoding algo-rithm, and the first byte of the entity is the first byte of the encoded (e.g., compressed) cargo.|

Figure 15-2shows two examples of real HTTP messages, one carrying a text entity,the other carrying an image entity. The hexadecimal values show the exact contentsof the message:• In Figure 15-2a, the entity body begins at byte number 65, right after the end-of-headers CRLF. The entity body contains the ASCII characters for “Hi! I’m amessage!”• In Figure 15-2b, the entity body begins at byte number 67. The entity body con-tains the binary contents of the GIF image. GIF files begin with 6-byte versionsignature, a 16-bit width, and a 16-bit height. You can see all three of thesedirectly in the entity body.(a) Text/plain entity in HTTP response message
HTTP/1.0 200 OK
Content-type: text/plain
Content-length: 18
Hi! I’m a message!final LF (0x0A= <LF>)      start-of-content (0x48= “H”)(b) Image/gif entity in HTTP response message
HTTP/1.0 200 OK
Content-Type: image/gif
Content-Length: 34867final LF     start-of-content    Width          Height(0x0A= <LF>)       (”GIF87a”)    (0x0227= 551) (0x0206= 518)
Figure 15-2. Hex dumps of real message content (raw message content follows blank CRLF)
Content-Length: The Entity’s Size
The Content-Length header indicates the size of the entity body in the message, inbytes. The size includes any content encodings (the Content-Length of a gzip-compressed text file will be the compressed size, not the original size).
TheContent-Length header is mandatory for messages with entity bodies, unless themessage is transported using chunked encoding. Content-Length is needed to detectpremature message truncation when servers crash and to properly segment messagesthat share a persistent connection.
Detecting Truncation
Older versions of HTTP used connection close to delimit the end of a message. But,without Content-Length, clients cannot distinguish between successful connection|
close at the end of a message and connection close due to a server crash in the mid-dle of a message. Clients need Content-Length to detect message truncation.
Messagetruncation is especially severe for caching proxy servers. If a cache receives atruncated message and doesn’t recognize the truncation, it may store the defectivecontent and serve it many times. Caching proxy servers generally do not cache HTTPbodies that don’t have an explicit Content-Length header, to reduce the risk of cach-ing truncated messages.
Incorrect Content-Length
An incorrect Content-Length can cause even more damage than a missing Content-
Length. Because some early clients and servers had well-known bugs with respect to
Content-Length calculations, some clients, servers, and proxies contain algorithms totry to detect and correct interactions with broken servers. HTTP/1.1 user agents offi-cially are supposed to notify the user when an invalid length is received and detected.
Content-Length and Persistent Connections
Content-Length is essential for persistent connections. If the response comes across apersistent connection, another HTTP response can immediately follow the currentresponse. The Content-Length header lets the client know where one message endsand the next begins. Because the connection is persistent, the client cannot use con-nection close to identify the message’s end. Without a Content-Length header, HTTPapplications won’t know where one entity body ends and the next message begins.
As we will see in “Transfer Encoding and Chunked Encoding,” there is one situationwhere you can use persistent connections without having a Content-Length header:when you use chunked encoding. Chunked encoding sends the data in a series ofchunks, each with a specified size. Even if the server does not know the size of theentire entity at the time the headers are generated (often because the entity is beinggenerated dynamically), the server can use chunked encoding to transmit pieces ofwell-defined size.
Content Encoding
HTTP lets you encode the contents of an entity body, perhaps to make it moresecure or to compress it to take up less space (we explain compression in detail laterin this chapter). If the body has been content-encoded, the Content-Length headerspecifies the length, in bytes, of the encoded body, not the length of the original,unencoded body.
SomeHTTPapplicationshavebeenknowntogetthiswrongandtosendthesizeofthe data before the encoding, which causes serious errors, especially with persis-tent connections. Unfortunately, none of the headers described in the HTTP/1.1|
specification can be used to send the length of the original, unencoded body, which*makes it difficult for clients to verify the integrity of their unencoding processes.
Rules for Determining Entity Body Length
The following rules describe how to correctly determine the length and end of anentity body in several different circumstances. The rules should be applied in order;the first match applies.1. If a particular HTTP message type is not allowed to have a body, ignore the
Content-Length header for body calculations. The Content-Length headers areinformational in this case and do not describe the actual body length. (Naïve
HTTP applications can get in trouble if they assume Content-Length alwaysmeans there is a body).
The most important example is the HEAD response. The HEAD methodrequests that a server send the headers that would have been returned by anequivalent GET request, but no body. Because a GET response would send backa Content-Length header, so will the HEAD response—but unlike the GETresponse, the HEAD response will not have a body. 1XX, 204, and 304responses also can have informational Content-Length headers but no entitybody. Messages that forbid entity bodies must terminate at the first empty lineafter the headers, regardless of which entity header fields are present.2. If a message contains a Transfer-Encoding header (other than the default HTTP“identity” encoding), the entity will be terminated by a special pattern called a“zero-byte chunk,” unless the message is terminated first by closing the connec-tion. We’ll discuss transfer encodings and chunked encodings later in this chapter.3. If a message has a Content-Length header (and the message type allows entitybodies), the Content-Length value contains the body length, unless there is anon-identity Transfer-Encoding header. If a message is received with both a
Content-Length header field and a non-identity Transfer-Encoding header field,you must ignore the Content-Length, because the transfer encoding will changethe way entity bodies are represented and transferred (and probably the numberof bytes transmitted).4. If the message uses the “multipart/byteranges” media type and the entity lengthis not otherwise specified (in the Content-Length header), each part of the multi-part message will specify its own size. This multipart type is the only entity bodytype that self-delimits its own size, so this media type must not be sent unless the†sender knows the recipient can parse it.* Even the Content-MD5 header, which can be used to send the 128-bit MD5 of the document, contains the
MD5 of the encoded document. The Content-MD5 header is described later in this chapter.†BecauseaRangeheadermightbeforwardedbyamoreprimitiveproxythatdoesnotunderstandmultipart/byteranges, the sender must delimit the message using methods 1, 3, or 5 in this section if it isn’t sure thereceiver understands the self- delimiting format.|
5. If none of the above rules match, the entity ends when the connection closes.
In practice, only servers can use connection close to indicate the end of amessage. Clients can’t close the connection to signal the end of client mes-sages, because that would leave no way for the server to send back aresponse.*6. To be compatible with HTTP/1.0 applications, any HTTP/1.1 request that hasan entity body also must include a valid Content-Length header field (unless theserver is known to be HTTP/1.1-compliant). The HTTP/1.1 specification coun-sels that if a request contains a body and no Content-Length, the server shouldsend a 400 Bad Request response if it cannot determine the length of the mes-sage, or a 411 Length Required response if it wants to insist on receiving a valid
Content-Length.
Entity Digests
Although HTTP typically is implemented over a reliable transport protocol suchas TCP/IP, parts of messages may get modified in transit for a variety of reasons,such as noncompliant transcoding proxies or buggy intermediary proxies. Todetect unintended (or undesired) modification of entity body data, the sendercan generate a checksum of the data when the initial entity is generated, and thereceiver can sanity check the checksum to catch any unintended entity modifica-tion.†
The Content-MD5 header is used by servers to send the result of running the
MD5 algorithm on the entity body. Only the server where the response origi-nates may compute and send the Content-MD5 header. Intermediate proxies andcaches may not modify or add the header—that would violate the whole pur-pose of verifying end-to-end integrity. The Content-MD5 header contains the
MD5of the content after all content encodings have been applied to the entitybody and before any transfer encodings have been applied to it. Clients seekingto verify the integrity of the message must first decode the transfer encodings,then compute the MD5 of the resulting unencoded entity body. As an example, ifa document is compressed using the gzip algorithm, then sent with chunkedencoding, the MD5 algorithm is run on the full gripped body.
In addition to checking message integrity, the MD5 can be used as a key into ahash table to quickly locate documents and reduce duplicate storage of content.
Despite these possible uses, the Content-MD5 header is not sent often.* The client could do a half close of just its output connection, but many server applications aren’t designedtohandlethissituationandwillinterpretahalfcloseastheclientdisconnectingfromtheserver.Connectionmanagement was never well specified in HTTP. See Chapter 4 for more details.†Thismethod,ofcourse,isnotimmunetoamaliciousattackthatreplacesboththemessagebodyanddigestheader. It is intended only to detect unintentional modification. Other facilities, such as digest authentica-tion, are needed to provide safeguards against malicious tampering.|

Extensions to HTTP have proposed other digest algorithms in IETF drafts. Theseextensions have proposed a new header, Want-Digest, that allows clients to specifythe type of digest they expect with the response. Quality values can be used to sug-gest multiple digest algorithms and indicate preference.
Media Type and Charset*
The Content-Type header field describes the MIME type of the entity body. The
MIMEtype is a standardized name that describes the underlying type of media car-ried as cargo (HTML file, Microsoft Word document, MPEG video, etc.). Clientapplications use the MIME type to properly decipher and process the content.
The Content-Type values are standardized MIME types, registered with the Internet
Assigned Numbers Authority (IANA). MIME types consist of a primary media type(e.g., text, image, audio), followed by a slash, followed by a subtype that furtherspecifies the media type. Table 15-1 lists a few common MIME types for the Content-
Type header. More MIME types are listed in Appendix D.
Table 15-1. Common media types
Media type                       Descriptiontext/html                        Entity body is an HTML documenttext/plain                       Entity body is a document in plain textimage/gif                        Entity body is an image of type GIFimage/jpeg                       Entity body is an image of type JPEGaudio/x-wav                      Entity body contains WAV sound datamodel/vrml                       Entity body is a three-dimensional VRML modelapplication/vnd.ms-powerpoint    Entity body is a Microsoft PowerPoint presentationmultipart/byteranges             Entity body has multiple parts, each containing a different range (in bytes) of the full doc-umentmessage/http                     Entity body contains a complete HTTP message (see TRACE)
It is important to note that the Content-Type header specifies the media type of theoriginal entity body. If the entity has gone through content encoding, for example,the Content-Type header will still specify the entity body type before the encoding.* In the case of the HEAD request, Content-Type shows the type that would have been sent if it was a GETrequest.|

Character Encodings for Text Media
The Content-Type header also supports optional parameters to further specify thecontent type. The “charset” parameter is the primary example, specifying the mecha-nism to convert bits from the entity into characters in a text file:
Content-Type: text/html; charset=iso-8859-4
We talk about character sets in detail in Chapter 16.
Multipart Media Types
MIME “multipart” email messages contain multiple messages stuck together andsent as a single, complex message. Each component is self-contained, with its ownset of headers describing its content; the different components are concatenatedtogether and delimited by a string.
HTTPalsosupports multipart bodies; however, they typically are sent in only one oftwosituations: in fill-in form submissions and in range responses carrying pieces of adocument.
Multipart Form Submissions
When an HTTP fill-in form is submitted, variable-length text fields and uploadedobjects are sent as separate parts of a multipart body, allowing forms to be filled outwith values of different types and lengths. For example, you may choose to fill out aform that asks for your name and a description with your nickname and a smallphoto, while your friend may put down her full name and a long essay describing herpassion for fixing Volkswagen buses.
HTTP sends such requests with a Content-Type: multipart/form-data header or a
Content-Type: multipart/mixed header and a multipart body, like this:
Content-Type: multipart/form-data; boundary=[abcdefghijklmnopqrstuvwxyz]where the boundary specifies the delimiter string between the different parts of thebody.
The following example illustrates multipart/form-data encoding. Suppose we havethis form:<FORM action="http://server.com/cgi/handle"enctype="multipart/form-data"method="post"><P>
What is your name? <INPUT type="text" name="submit-name"><BR>
What files are you sending? <INPUT type="file" name="files"><BR><INPUT type="submit" value="Send"> <INPUT type="reset"></FORM>|

If the user enters “Sally” in the text-input field and selects the text file “essayfile.txt,”the user agent might send back the following data:
Content-Type: multipart/form-data; boundary=AaB03x--AaB03x
Content-Disposition: form-data; name="submit-name"
Sally--AaB03x
Content-Disposition: form-data; name="files"; filename="essayfile.txt"
Content-Type: text/plain...contents of essayfile.txt...--AaB03x--
If the user selected a second (image) file, “imagefile.gif,” the user agent might con-struct the parts as follows:
Content-Type: multipart/form-data; boundary=AaB03x--AaB03x
Content-Disposition: form-data; name="submit-name"
Sally--AaB03x
Content-Disposition: form-data; name="files"
Content-Type: multipart/mixed; boundary=BbC04y--BbC04y
Content-Disposition: file; filename="essayfile.txt"
Content-Type: text/plain...contents of essayfile.txt...--BbC04y
Content-Disposition: file; filename="imagefile.gif"
Content-Type: image/gif
Content-Transfer-Encoding: binary...contents of imagefile.gif...--BbC04y----AaB03x--
Multipart Range Responses
HTTPresponsestorangerequestsalsocanbemultipart.Suchresponsescomewitha
Content-Type: multipart/byteranges header and a multipart body with the differentranges. Here is an example of a multipart response to a request for different ranges ofa document:
HTTP/1.0 206 Partial content
Server: Microsoft-IIS/5.0
Date: Sun, 10 Dec 2000 19:11:20 GMT
Content-Location: http://www.joes-hardware.com/gettysburg.txt
Content-Type: multipart/x-byteranges; boundary=--[abcdefghijklmnopqrstuvwxyz]--
Last-Modified: Sat, 09 Dec 2000 00:38:47 GMT--[abcdefghijklmnopqrstuvwxyz]--
Content-Type: text/plain
Content-Range: bytes 0-174/1441|

Fourscore and seven years ago our fathers brough forth on this continenta new nation, conceived in liberty and dedicated to the proposition thatall men are created equal.--[abcdefghijklmnopqrstuvwxyz]--
Content-Type: text/plain
Content-Range: bytes 552-761/1441
But in a larger sense, we can not dedicate, we can not consecrate,we can not hallow this ground. The brave men, living and dead whostruggled here have consecrated it far above our poor power to addor detract.--[abcdefghijklmnopqrstuvwxyz]--
Content-Type: text/plain
Content-Range: bytes 1344-1441/1441and that government of the people, by the people, for the people shallnot perish from the earth.--[abcdefghijklmnopqrstuvwxyz]--
Range requests are discussed in more detail later in this chapter.
Content Encoding
HTTPapplications sometimes want to encode content before sending it. For exam-ple, a server might compress a large HTML document before sending it to a clientthat is connected over a slow connection, to help lessen the time it takes to transmitthe entity. A server might scramble or encrypt the contents in a way that preventsunauthorized third parties from viewing the contents of the document.
These types of encodings are applied to the content at the sender. Once the contentis content-encoded, the encoded data is sent to the receiver in the entity body asusual.
The Content-Encoding Process
The content-encoding process is:1. A web server generates an original response message, with original Content-
Type and Content-Length headers.2. A content-encoding server (perhaps the origin server or a downstream proxy)creates an encoded message. The encoded message has the same Content-Typebut (if, for example, the body is compressed) a different Content-Length. Thecontent-encoding server adds a Content-Encoding header to the encoded mes-sage, so that a receiving application can decode it.3. A receiving program gets the encoded message, decodes it, and obtains theoriginal.|

Figure 15-3 sketches a content-encoding example.
Original content                           Content-encoded content                       Original content
Content-type: text/html                    Content-type: text/html                       Content-type: text/html
Content-length: 12480                      Content-length: 3907                          Content-length: 12480
Content-encoding: gzip0100101111000101
Gzip content               Gzip contentdecoder                    encoder
Figure 15-3. Content-encoding example
Here, an HTML page is encoded by a gzip content-encoding function, to produce asmaller, compressed body. The compressed body is sent across the network, flaggedwith the gzip encoding. The receiving client decompresses the entity using the gzipdecoder.
This response snippet shows another example of an encoded response (a com-pressed image):
HTTP/1.1 200 OK
Date: Fri, 05 Nov 1999 22:35:15 GMT
Server: Apache/1.2.4
Content-Length: 6096
Content-Type: image/gif
Content-Encoding: gzip[...]
Note that the Content-Type header can and should still be present in the message. Itdescribes the original format of the entity—information that may be necessary fordisplaying the entity once it has been decoded. Remember that the Content-Lengthheader now represents the length of the encoded body.
Content-Encoding Types
HTTP defines a few standard content-encoding types and allows for additionalencodings to be added as extension encodings. Encodings are standardized throughthe IANA, which assigns a unique token to each content-encoding algorithm. The
Content-Encoding header uses these standardized token values to describe the algo-rithm used in the encoding.
Some of the common content-encoding tokens are listed in Table 15-2.|

Table 15-2. Content-encoding tokens
Content-encodingvalue   Descriptiongzip                    Indicates that the GNU zip encoding was applied to the entity.acompress                Indicates that the Unix file compression program has been run on the entity.bdeflate                 Indicates that the entity has been compressed into the zlib format.identity                Indicates that no encoding has been performed on the entity. When a Content-Encoding headeris not present, this can be assumed.a RFC 1952 describes the gzip encoding.b RFCs 1950 and 1951 describe the zlib format and deflate compression.
The gzip, compress, and deflate encodings are lossless compression algorithms usedto reduce the size of transmitted messages without loss of information. Of these, gziptypically is the most effective compression algorithm and is the most widely used.
Accept-Encoding Headers
Ofcourse, we don’t want servers encoding content in ways that the client can’t deci-pher. To prevent servers from using encodings that the client doesn’t support, theclient passes along a list of supported content encodings in the Accept-Encodingrequest header. If the HTTP request does not contain an Accept-Encoding header, aserver can assume that the client will accept any encoding (equivalent to passing
Accept-Encoding: *).
Figure 15-4 shows an example of Accept-Encoding in an HTTP transaction.
Request message
GET /logo.gif HTTP/1.1
Accept-encoding: gzip[...]
HTTP/1.1 200 OK
Content-type: image/gif
Content-encoding: gzipgunzip                        [...]gzip
Response message...011010011...                    ...011010011...
The server compresses the image with gzip to transport a smaller file over the thinnetwork connection between itself and the client. This saves network bandwidthand reduces the amount of time that the client waits for the transfer. Though, theclient will have to spend time decompressing the image once the image is served.
Figure 15-4. Content encoding|

The Accept-Encoding field contains a comma-separated list of supported encodings.
Here are a few examples:
Accept-Encoding: compress, gzip
Accept-Encoding:
Accept-Encoding: *
Accept-Encoding: compress;q=0.5, gzip;q=1.0
Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0
Clients can indicate preferred encodings by attaching Q (quality) values as parame-ters to each encoding. Q values can range from 0.0, indicating that the client doesnot want the associated encoding, to 1.0, indicating the preferred encoding. Thetoken “*” means “anything else.” The process of selecting which content encoding toapply is part of a more general process of deciding which content to send back to aclient in a response. This process and the Content-Encoding and Accept-Encodingheaders are discussed in more detail in Chapter 17.
Theidentity encoding token can be present only in the Accept-Encoding header and isused by clients to specify relative preference over other content-encoding algorithms.
Transfer Encoding and Chunked Encoding
Theprevioussection discussed content encodings—reversible transformations appliedto the body of the message. Content encodings are tightly associated with the detailsof the particular content format. For example, you might compress a text file withgzip, but not a JPEG file, because JPEGs don’t compress well with gzip.
This section discusses transfer encodings. Transfer encodings also are reversibletransformations performed on the entity body, but they are applied for architecturalreasons and are independent of the format of the content. You apply a transferencoding to a message to change the way message data is transferred across the net-work (Figure 15-5).
Safe Transport
Historically, transfer encodings exist in other protocols to provide “safe transport” ofmessages across a network. The concept of safe transport has a different focus for
HTTP, where the transport infrastructure is standardized and more forgiving. In
HTTP,thereareonlyafewreasonswhytransporting message bodies can cause trou-ble. Two of these are:
Unknown size
Some gateway applications and content encoders are unable to determine thefinal size of a message body without generating the content first. Often, theseservers would like to start sending the data before the size is known. Because|

Content-encoded response
HTTP/1.0 200 OK
Content-encoding: gzip                Normal header block
Content-type: text/html[...][encoded message]                     Normal entity             A Content-encoded message just encodes the entity(just encoded)            section of the message. With Transfer-encodedmessages the encoding is a function of the entire
Transfer-encoded response        message, changing the structure of the message itself.
HTTP/1.1 200 OK                            Basic header
Transfer-encoding: chunked10        Encoded blocksabcdefghijk1a
Figure 15-5. Content encodings versus transfer encodings
HTTP requires the Content-Length header to precede the data, some serversapply a transfer encoding to send the data with a special terminating footer that*indicates the end of data.
Security
Youmightuseatransfer encoding to scramble the message content before send-ing it across a shared transport network. However, because of the popularity oftransport layer security schemes like SSL, transfer-encoding security isn’t verycommon.
Transfer-Encoding Headers
There are just two defined headers to describe and control transfer encoding:
Transfer-Encoding
Tells the receiver what encoding has been performed on the message in order forit to be safely transported
TE
Used in the request header to tell the server what extension transfer encodings†are okay to use* You could close the connection as a “poor man’s” end-of-message signal, but this breaks persistentconnections.†ThemeaningoftheTEheaderwouldbemoreintuitiveifitwerecalledtheAccept-Transfer-Encodingheader.|

In the following example, the request uses the TE header to tell the server that itaccepts the chunked encoding (which it must if it’s an HTTP 1.1 application) and iswilling to accept trailers on the end of chunk-encoded messages:
GET /new_products.html HTTP/1.1
Host: www.joes-hardware.com
User-Agent: Mozilla/4.61 [en] (WinNT; I)
TE: trailers, chunked...
The response includes a Transfer-Encoding header to tell the receiver that the mes-sage has been transfer-encoded with the chunked encoding:
HTTP/1.1 200 OK
Transfer-Encoding: chunked
Server: Apache/3.0...
After this initial header, the structure of the message will change.
All transfer-encoding values are case-insensitive. HTTP/1.1 uses transfer-encodingvalues in the TE header field and in the Transfer-Encoding header field. The latest
HTTP specification defines only one transfer encoding, chunked encoding.
The TE header, like the Accept-Encoding header, can have Q values to describe pre-ferred forms of transfer encoding. The HTTP/1.1 specification, however, forbids theassociation of a Q value of 0.0 to chunked encoding.
Future extensions to HTTP may drive the need for additional transfer encodings. Ifand when this happens, the chunked transfer encoding should always be applied ontop of the extension transfer encodings. This guarantees that the data will get “tun-neled” through HTTP/1.1 applications that understand chunked encoding but notother transfer encodings.
Chunked Encoding
Chunked encoding breaks messages into chunks of known size. Each chunk is sentone after another, eliminating the need for the size of the full message to be knownbefore it is sent.
Note that chunked encoding is a form of transfer encoding and therefore is anattribute of the message, not the body. Multipart encoding, described earlier in thischapter, is an attribute of the body and is completely separate from chunked encoding.
Chunking and persistent connections
When the connection between the client and server is not persistent, clients do notneed to know the size of the body they are reading—they expect to read the bodyuntil the server closes the connection.|

With persistent connections, the size of the body must be known and sent in the
Content-Length header before the body can be written. When content is dynami-cally created at a server, it may not be possible to know the length of the body beforesending it.
Chunked encoding provides a solution for this dilemma, by allowing servers to sendthe body in chunks, specifying only the size of each chunk. As the body is dynami-cally generated, a server can buffer up a portion of it, send its size and the chunk,and then repeat the process until the full body has been sent. The server can signalthe end of the body with a chunk of size 0 and still keep the connection open andready for the next response.
Chunkedencodingisfairly simple. Figure 15-6 shows the basic anatomy of a chunkedmessage. It begins with an initial HTTP response header block, followed by a streamof chunks. Each chunk contains a length value and the data for that chunk. The lengthvalue is in hexadecimal form and is separated from the chunk data with a CRLF. Thesize of the chunk data is measured in bytes and includes neither the CRLF sequencebetweenthelengthvalueandthedatanortheCRLFsequenceattheendofthechunk.
The last chunk is special—it has a length of zero, which signifies “end of body.”
HTTP/1.1 200 OK<CR><LF>
Response                          Content-type: text/plain<CR><LF>stream                           Transfer-encoding: chunked<CR><LF>
HTTP response          Trailer: Content-MD5<CR><LF><CR><LF>
Hexadecimal chunk size (27 hex=> 39 characters)
Chunk #1             27<CR><LF>
We hold these truths to be self-evident<CR><LF>
Chunk #2             26<CR><LF>, that all men are created equal, that<CR><LF>84<CR><LF>
Chunk #3              they are endowed by their Creator with certainunalienable Rights, that among these are Life,
Liberty and the pursuit of Happiness.<CR><LF>0<CR><LF>
Last chunk
Content-MD5:gjqei54p26tjisgj3p4utjgrj53<CR><LF>
Trailer*          *Optional–only present if there is a Trailer header in the message headers.
Figure 15-6. Anatomy of a chunked message|

A client also may send chunked data to a server. Because the client does not knowbeforehand whether the server accepts chunked encoding (servers do not send TEheaders in responses to clients), it must be prepared for the server to reject thechunked request with a 411 Length Required response.
Trailers in chunked messages
Atrailer can be added to a chunked message if the client’s TE header indicates that itaccepts trailers, or if the trailer is added by the server that created the originalresponse and the contents of the trailer are optional metadata that it is not necessaryfor the client to understand and use (it is okay for the client to ignore and discard the*contents of the trailer).
The trailer can contain additional header fields whose values might not have beenknown at the start of the message (e.g., because the contents of the body had to begenerated first). An example of a header that can be sent in the trailer is the Content-
MD5header—it would be difficult to calculate the MD5 of a document before thedocument has been generated. Figure 15-6 illustrates the use of trailers. The messageheaders contain a Trailer header listing the headers that will follow the chunked mes-sage. The last chunk is followed by the headers listed in the Trailer header.
Any of the HTTP headers can be sent as trailers, except for the Transfer-Encoding,
Trailer, and Content-Length headers.
Combining Content and Transfer Encodings
Content encoding and transfer encoding can be used simultaneously. For example,
Figure 15-7 illustrates how a sender can compress an HTML file using a contentencoding and send the data chunked using a transfer encoding. The process to“reconstruct” the body is reversed on the receiver.
Transfer-Encoding Rules
When a transfer encoding is applied to a message body, a few rules must be followed:• The set of transfer encodings must include “chunked.” The only exception is ifthe message is terminated by closing the connection.• Whenthechunkedtransfer encoding is used, it is required to be the last transferencoding applied to the message body.• The chunked transfer encoding must not be applied to a message body morethan once.* TheTrailerheaderwasaddedaftertheinitialchunkedencodingwasaddedtodraftsoftheHTTP/1.1spec-ification, so some applications may not understand it (or understand trailers) even if they claim to be
HTTP/1.1-compliant.|

Content-type: text/html
Content encoding
Content-type: text/html                  9BF2578EA4  9BF2578EA4
Content-encoding: gzip                   2670CD      2670CD
Transfer encoding(chunking)
Content-type: text/html                426                     9BF
Content-encoding: gzip                     8EA             257
Transfer-encoding: chunked                      257   8EA9BF                            426
Figure 15-7. Combining content encoding with transfer encoding
These rules allow the recipient to determine the transfer length of the message.
Transfer encodings are a relatively new feature of HTTP, introduced in Version 1.1.
Servers that implement transfer encodings need to take special care not to sendtransfer-encoded messages to non-HTTP/1.1 applications. Likewise, if a serverreceives a transfer-encoded message that it can not understand, it should respondwith the 501 Unimplemented status code. However, all HTTP/1.1 applications mustat least support chunked encoding.
Time-Varying Instances
Webobjectsarenotstatic. The same URLcan,overtime,pointtodifferent versions ofanobject. Take the CNN home page as an example—going to “http://www.cnn.com”several times in a day is likely to result in a slightly different page being returned eachtime.
Think of the CNN home page as being an object and its different versions as beingdifferent instances of the object (see Figure 15-8). The client in the figure requests thesame resource (URL) multiple times, but it gets different instances of the resource asit changes over time. At time (a) and (b) it has the same instance; at time (c) it has adifferent instance.
The HTTP protocol specifies operations for a class of requests and responses, calledinstance manipulations, that operate on instances of an object. The two maininstance-manipulation methods are range requests and delta encoding. Both of thesemethods require clients to be able to identify the exact copy of the resource that theyhave (if any) and request new instances conditionally. These mechanisms are dis-cussed later in this chapter.|

V1               V1               V2                   V2                       V4(a)               (b)              (c)                  (d)                      (e)
Time      Feb 17               Mar 3Apr 2           Apr 124:30 p.m.           11:21 a.m.                             9:07 a.m.       1:48 p.m.
Version 1            Version 2                             Version 3       Version 4              www.cnn.com
Figure 15-8. Instances are “snapshots” of a resource in time
Validators and Freshness
LookbackatFigure15-8.Theclient does not initially have a copy of the resource, soit sends a request to the server asking for it. The server responds with Version 1 ofthe resource. The client can now cache this copy, but for how long?
Once the document has “expired” at the client (i.e., once the client can no longerconsider its copy a valid copy), it must request a fresh copy from the server. If thedocumenthasnotchangedattheserver, however, the client does not need to receiveit again—it can just continue to use its cached copy.
This special request, called a conditional request, requires that the client tell the serverwhich version it currently has, using a validator, and ask for a copy to be sent only ifits current copy is no longer valid. Let’s look at the three key concepts—freshness,validators, and conditionals—in more detail.
Freshness
Servers are expected to give clients information about how long clients can cachetheir content and consider it fresh. Servers can provide this information using one oftwo headers: Expires and Cache-Control.
The Expires header specifies the exact date and time when the document“expires”—when it can no longer be considered fresh. The syntax for the Expiresheader is:
Expires: Sun Mar 18 23:59:59 GMT 2001
For a client and server to use the Expires header correctly, their clocks must be syn-chronized. This is not always easy, because neither may run a clock synchronizationprotocol such as the Network Time Protocol (NTP). A mechanism that defines expi-ration using relative time is more useful. The Cache-Control header can be used tospecify the maximum age for a document in seconds—the total amount of time sincethe document left the server. Age is not dependent on clock synchronization andtherefore is likely to yield more accurate results.|

The Cache-Control header actually is very powerful. It can be used by both serversand clients to describe freshness using more directives than just specifying an age orexpiration time. Table 15-3 lists some of the directives that can accompany the
Cache-Control header.
Table 15-3. Cache-Control header directives
Directive               Message type      Descriptionno-cache                Request           Donotreturnacachedcopyofthedocumentwithoutfirstrevalidatingitwiththeserver.no-store                Request           Do not return a cached copy of the document. Do not store the response from theserver.max-age                 Request           The document in the cache must not be older than the specified age.max-stale               Request           The document may be stale based on the server-specified expiration information,but it must not have been expired for longer than the value in this directive.min-fresh               Request           The document’s age must not be more than its age plus the specified amount. Inother words, the response must be fresh for at least the specified amount of time.no-transform            Request           The document must not be transformed before being sent.only-if-cached          Request           Send the document only if it is in the cache, without contacting the origin server.public                  Response          Response may be cached by any cache.private                 Response          Response may be cached such that it can be accessed only by a single client.no-cache                Response          If the directive is accompanied by a list of header fields, the content may becached and served to clients, but the listed header fields must first be removed. Ifno header fields are specified, the cached copy must not be served without revali-dation with the server.no-store                Response          Response must not be cached.no-transform            Response          Response must not be modified in any way before being served.must-revalidate         Response          Response must be revalidated with the server before being served.proxy-revalidate        Response          Shared caches must revalidate the response with the origin server before serving.
This directive can be ignored by private caches.max-age                 Response          Specifies the maximum length of time the document can be cached and still con-sidered fresh.s-max-age               Response          Specifies the maximum age of the document as it applies to shared caches (over-riding the max-age directive, if one is present). This directive can be ignored byprivate caches.
Caching and freshness were discussed in more detail in Chapter 7.
Conditionals and Validators
Whenacache’s copy is requested, and it is no longer fresh, the cache needs to makesure it has a fresh copy. The cache can fetch the current copy from the origin server,but in many cases, the document on the server is still the same as the stale copy inthe cache. We saw this in Figure 15-8b; the cached copy may have expired, but the|
server content still is the same as the cache content. If a cache always fetches aserver’s document, even if it’s the same as the expired cache copy, the cache wastesnetwork bandwidth, places unnecessary load on the cache and server, and slowseverything down.
Tofix this, HTTP provides a way for clients to request a copy only if the resource haschanged, using special requests called conditional requests. Conditional requests arenormal HTTP request messages, but they are performed only if a particular condi-tion is true. For example, a cache might send the following conditional GET messageto a server, asking it to send the file /announce.html only if the file has been modifiedsince June 29, 2002 (the date the cached document was last changed by the author):
GET /announce.html HTTP/1.0
If-Modified-Since: Sat, 29 Jun 2002, 14:30:00 GMT
Conditional requests are implemented by conditional headers that start with “If-”. Inthe example above, the conditional header is If-Modified-Since. A conditional headerallows a method to execute only if the condition is true. If the condition is not true,the server sends an HTTP error code back.
Each conditional works on a particular validator. A validator is a particular attributeof the document instance that is tested. Conceptually, you can think of the validatorlike the serial number, version number, or last change date of a document. A wise cli-ent in Figure 15-8b would send a conditional validation request to the server saying,“send me the resource only if it is no longer Version 1; I have Version 1.” We dis-cussed conditional cache revalidation in Chapter 7, but we’ll study the details ofentity validators more carefully in this chapter.
The If-Modified-Since conditional header tests the last-modified date of a documentinstance, so we say that the last-modified date is the validator. The If-None-Matchconditional header tests the ETag value of a document, which is a special keyword orversion-identifying tag associated with the entity. Last-Modified and ETag are thetwo primary validators used by HTTP. Table 15-4 lists four of the HTTP headersused for conditional requests. Next to each conditional header is the type of valida-tor used with the header.
Table 15-4. Conditional request types
Request type          Validator        Description
If-Modified-Since     Last-Modified    Sendacopyoftheresourceiftheversionthatwaslastmodifiedatthetimeinyourprevious Last-Modified response header is no longer the latest one.
If-Unmodified-Since   Last-Modified    Sendacopyoftheresourceonlyifitisthesameastheversionthatwaslastmodi-fied at the time in your previous Last-Modified response header.
If-Match              ETag             Send a copy of the resource if its entity tag is the same as that of the one in yourprevious ETag response header.
If-None-Match         ETag             Sendacopyoftheresourceifitsentitytagisdifferentfromthatoftheoneinyourprevious ETag response header.|

HTTP groups validators into two classes: weak validators and strong validators.
Weak validators may not always uniquely identify an instance of a resource; strongvalidators must. An example of a weak validator is the size of the object in bytes. Theresource content might change even thought the size remains the same, so a hypo-thetical byte-count validator only weakly indicates a change. A cryptographic check-sumofthe contents of the resource (such as MD5), however, is a strong validator; itchanges when the document changes.
The last-modified time is considered a weak validator because, although it specifiesthe time at which the resource was last modified, it specifies that time to an accuracyof at most one second. Because a resource can change multiple times in a second,and because servers can serve thousands of requests per second, the last-modifieddate might not always reflect changes. The ETag header is considered a strong vali-dator, because the server can place a distinct value in the ETag header every time avalue changes. Version numbers and digest checksums are good candidates for the
ETag header, but they can contain any arbitrary text. ETag headers are flexible; theytake arbitrary text values (“tags”), and can be used to devise a variety of client andserver validation strategies.
Clients and servers may sometimes want to adopt a looser version of entity-tag vali-dation. For example, a server may want to make cosmetic changes to a large, popu-lar cached document without triggering a mass transfer when caches revalidate. Inthis case, the server might advertise a “weak” entity tag by prefixing the tag with“W/”. A weak entity tag should change only when the associated entity changes in asemantically significant way. A strong entity tag must change whenever the associ-ated entity value changes in any way.
The following example shows how a client might revalidate with a server using aweak entity tag. The server would return a body only if the content changed in ameaningful way from Version 4.0 of the document:
GET /announce.html HTTP/1.1
If-None-Match: W/"v4.0"
In summary, when clients access the same resource more than once, they first needto determine whether their current copy still is fresh. If it is not, they must get the lat-est version from the server. To avoid receiving an identical copy in the event that theresource has not changed, clients can send conditional requests to the server, specify-ing validators that uniquely identify their current copies. Servers will then send acopy of the resource only if it is different from the client’s copy. For more details oncache revalidation, please refer back to “Cache Processing Steps” in Chapter 7.
Range Requests
Wenowunderstandhowaclientcanaskaservertosenditaresourceonlyifthecli-ent’s copy of the resource is no longer valid. HTTP goes further: it allows clients toactually request just part or a range of a document.|

Imagine if you were three-fourths of the way through downloading the latest hot soft-ware across a slow modem link, and a network glitch interrupted your connection.
Youwouldhavebeenwaitingforawhileforthedownloadtocomplete,andnowyouwould have to start all over again, hoping the same thing does not happen again.
With range requests, an HTTP client can resume downloading an entity by askingfor the range or part of the entity it failed to get (provided that the object did notchange at the origin server between the time the client first requested it and its subse-quent range request). For example:
GET /bigfile.html HTTP/1.1
Host: www.joes-hardware.com
Range: bytes=4000-
User-Agent: Mozilla/4.61 [en] (WinNT; I)...
In this example, the client is requesting the remainder of the document after the first4,000 bytes (the end bytes do not have to be specified, because the size of the docu-mentmaynotbeknowntotherequestor).Rangerequestsofthisformcanbeusedfora failed request where the client received the first 4,000 bytes before the failure. The
Range header also can be used to request multiple ranges (the ranges can be specifiedin any order and may overlap)—for example, imagine a client connecting to multipleservers simultaneously, requesting different ranges of the same document from differ-ent servers in order to speed up overall download time for the document. In the casewhere clients request multiple ranges in a single request, responses come back as asingle entity, with a multipart body and a Content-Type: multipart/byteranges header.
Not all servers accept range requests, but many do. Servers can advertise to clientsthat they accept ranges by including the header Accept-Ranges in their responses.*
The value of this header is the unit of measure, usually bytes.  For example:
HTTP/1.1 200 OK
Date: Fri, 05 Nov 1999 22:35:15 GMT
Server: Apache/1.2.4
Accept-Ranges: bytes...
Figure 15-9 shows an example of a set of HTTP transactions involving ranges.
Range headers are used extensively by popular peer-to-peer file-sharing client softwareto download different parts of multimedia files simultaneously, from different peers.
Note that range requests are a class of instance manipulations, because they areexchanges between a client and a server for a particular instance of an object. That is,a client’s range request makes sense only if the client and server have the same ver-sion of a document.* TheHTTP/1.1specificationdefinesonlythebytestoken,butserverandclientimplementorscouldcomeupwith their own units to measure or chop up an entity.|

Request message
GET /bigfile.html HTTP/1.1
Client           [...]
Response message
HTTP/1.1 200 OK
Content-type: text/html                               www.joes-hardware.com
Content-length: 65537
Accept-ranges: bytes110001             [...]111011010111            Range request message000101
Client received only   GET /bigfile.html HTTP.1.1the first 20224 bytes   Range: bytes=20224-of the resource      [...]
Range response message
The client’s original request was   HTTP/1.1 200 OKinterrupted, but a second request   Range: bytes=20224-  www.joes-hardware.comfor the part of the message that    Accept-ranges: byteswas not received allows the         [...]client to resume from the pointof the interruption
Figure 15-9. Entity range request example
Delta Encoding
Wehavedescribeddifferent versions of a web page as different instances of a page. Ifa client has an expired copy of a page, it requests the latest instance of the page. Ifthe server has a newer instance of the page, it will send it to the client, and it willsend the full new instance of the page even if only a small portion of the page actu-ally has changed.
Rather than sending it the entire new page, the client would get the page faster if theserver sent just the changes to the client’s copy of the page (provided that the num-ber of changes is small). Delta encoding is an extension to the HTTP protocol thatoptimizes transfers by communicating changes instead of entire objects. Delta encod-ing is a type of instance manipulation, because it relies on clients and serversexchanging information about particular instances of an object. RFC 3229 describesdelta encoding.
Figure 15-10 illustrates more clearly the mechanism of requesting, generating, receiv-ing, and applying a delta-encoded document. The client has to tell the server whichversion of the page it has, that it is willing to accept a delta from the latest version ofpage, and which algorithms it knows for applying those deltas to its current version.|

The server has to check if it has the client’s version of the page and how to computedeltas from the latest version and the client’s version (there are several algorithms forcomputing the difference between two objects). It then has to compute the delta,send it to the client, let the client know that it’s sending a delta, and specify the newidentifier for the latest version of the page (because this is the version that the clientwill end up with after it applies the delta to its old version).
Request message
Client              GET /bigfile.html HTTP/1.1
Date: Mon, 01 Feb 2001 12:03:00 GMT
Page on Monday
Feb 1, 2001 at 12:03 p m.
Hello, welcome to
Response message     Joe’s Hardware store.
HTTP/1.1 200 OK     Today’s special is on
Client receives this response and          Content-type: text/html                  Server           hammers.caches it. The next day, the client        Expires: Mon, 01 Feb 2001 12:00:00 GMTtries to access the same page and          Etag: abcdefghi09876AFsees its cached copy has expired,          ...so it sends a request to the serverrequesting the latest copy. Since ithas a cached copy, it tells the server   Delta request messagewhich copy it has and indicatesits willingness to accept a delta.         GET /bigfile.html HTTP.1.1
If-None-Match: abcdefghi09876AF                        Page on Tuesday
A-IM: diffe      Feb 2, 2001 at 03:03 a m.
Date: Tue, 02 Feb 2001 03:03:00 GMT
Hello, welcome to
Joe’s Hardware store.
Delta                               Today’s special is onchisels.5c.chisels..
Delta response message             Delta generator
HTTP/1.1 226 IM Used
IM: diffe
Client receives the delta and applies      Etag: zywxtuv123456BGit to its cached version of the            Delta-base: abcdefghi09876AFpage, generating the latest version        ...of the page. The client also updates its
ETag to that of the new version of the page.
Delta applier
Hello, welcome to
Joe’s Hardware store.
Today’s special is onchisels.
Figure 15-10. Mechanics of delta-encoding
The client uses the unique identifier for its version of the page (sent by the server inits previous response to the client in the ETag header) in an If-None-Match header.
This is the client’s way of telling the server, “if the latest version of the page you have|
does not have this same ETag, send me the latest version of the page.” Just the If-
None-Match header, then, would cause the server to send the client the full latestversion of the page (if it was different from the client’s version).
The client can tell the server, however, that it is willing to accept a delta of the pageby also sending an A-IM header. A-IM is short for Accept-Instance-Manipulation(“Oh, by the way, I do accept some forms of instance manipulation, so if you applyone of those you will not have to send me the full document.”). In the A-IM header,the client specifies the algorithms it knows how to apply in order to generate the lat-est version of a page given an old version and a delta. The server sends back the fol-lowing: a special response code (226 IM Used) telling the client that it is sending itan instance manipulation of the requested object, not the full object itself; an IM(short for Instance-Manipulation) header, which specifies the algorithm used to com-pute the delta; the new ETag header; and a Delta-Base header, which specifies the
ETag of the document used as the base for computing the delta (ideally, the same asthe ETag in the client’s If-None-Match request!). The headers used in delta encodingare summarized in Table 15-5.
Table 15-5. Delta-encoding headers
Header           Description
ETag             Uniqueidentifierforeachinstanceofadocument.Sentbytheserverintheresponse;usedbyclientsinsub-sequent requests in If-Match and If-None-Match headers.
If-None-Match    Request header sent by the client, asking the server for a document if and only if the client’s version of thedocument is different from the server’s.
A-IM             Client request header indicating types of instance manipulations accepted.
IM               Serverresponseheaderspecifyingthetypeofinstancemanipulationappliedtotheresponse.Thisheaderissent when the response code is 226 IM Used.
Delta-Base       Server response header that specifies the ETag of the base document used for generating the delta (shouldbe the same as the ETag in the client request’s If-None-Match header).
Instance Manipulations, Delta Generators,and Delta Appliers
Clients can specify the types of instance manipulation they accept using the A-IMheader. Servers specify the type of instance manipulation used in the IM header. Justwhat are the types of instance manipulation that are accepted, and what do they do?
Table 15-6 lists some of the IANA registered types of instance manipulations.
Table 15-6.  IANA registered types of instance manipulations
Type             Descriptionavcdiff           Delta using the vcdiff algorithmdiffe            Delta using the Unix diff -e commandbgdiff            Delta using the gdiff algorithm|

Table 15-6.  IANA registered types of instance manipulations (continued)
Type                Descriptiongzip                Compression using the gzip algorithmdeflate             Compression using the deflate algorithmrange               Used in a server response to indicate that the response is partial content as the result of a range selectionidentity            Used in a client request’s A-IM header to indicate that the client is willing to accept an identity instancemanipulationa Internet draft draft-korn-vcdiff-01 describes the vcdiff algorithm. This specification was approved by the IESG in early 2002 andshould be released in RFC form shortly.b http://www.w3org/TR/NOTE-gdiff-19970901.html describes the GDIFF algorithm.
A “delta generator” at the server, as in Figure 15-10, takes the base document andthe latest instance of the document and computes the delta between the two usingthe algorithm specified by the client in the A-IM header. At the client side, a “deltaapplier” takes the delta and applies it to the base document to generate the latestinstance of the document. For example, if the algorithm used to generate the delta isthe Unix diff -e command, the client can apply the delta using the functionality of the
Unix ed text editor, because diff -e <file1> <file2> generates the set of ed commandsthat will convert <file1> into <file2>. ed is a very simple editor with a few supportedcommands. In the example in Figure 15-10, 5c says delete line 5 in the base docu-ment, and chisels.<cr>. says add “chisels.”. That’s it. More complicated instructionscan be generated for bigger changes. The Unix diff -e algorithm does a line-by-linecomparison of files. This obviously is okay for text files but breaks down for binaryfiles. The vcdiff algorithm is more powerful, working even for non-text files and gen-erally producing smaller deltas than diff -e.
The delta encoding specification defines the format of the A-IM and IM headers indetail. Suffice it to say that multiple instance manipulations can be specified in theseheaders (along with corresponding quality values). Documents can go through multi-ple instance manipulations before being returned to clients, in order to maximizecompression. For example, deltas generated by the vcdiff algorithm may in turn becompressed using the gzip algorithm. The server response would then contain theheader IM: vcdiff, gzip. The client would first gunzip the content, then apply theresults of the delta to its base page in order to generate the final document.
Delta encoding can reduce transfer times, but it can be tricky to implement. Imaginea page that changes frequently and is accessed by many different people. A serversupporting delta encoding must keep all the different copies of that page as itchanges over time, in order to figure out what’s changed between any requesting cli-ent’s copy and the latest copy. (If the document changes frequently, as different cli-ents request the document, they will get different instances of the document. Whenthey make subsequent requests to the server, they will be requesting changesbetween their instance of the document and the latest instance of the document. Tobe able to send them just the changes, the server must keep copies of all the previous|
instances that the clients have.) In exchange for reduced latency in serving docu-ments, servers need to increase disk space to keep old instances of documentsaround. The extra disk space necessary to do so may quickly negate the benefits fromthe smaller transfer amounts.
For More Information
For more information on entities and encodings, see:http://www.ietf.org/rfc/rfc2616.txt
The HTTP/1.1 specification, RFC 2616, is the primary reference for entity bodymanagement and encodings.http://www.ietf.org/rfc/rfc3229.txt
RFC 3229, “Delta Encoding in HTTP,” describes how delta encoding can besupported as an extension to HTTP/1.1.
Introduction to Data Compression
Khalid Sayood, Morgan Kaufmann Publishers. This book explains some of thecompression algorithms supported by HTTP content encodings.http://www.ietf.org/rfc/rfc1521.txt
RFC 1521, “Multipurpose Internet Mail Extensions, Part One: Mechanisms for
Specifying and Describing the Format of Internet Message Bodies,” describes theformat of MIME bodies. This reference material is useful because HTTP bor-rows heavily from MIME. In particular, this document is designed to providefacilities to include multiple objects in a single message, to represent body text incharacter sets other than US-ASCII, to represent formatted multi-font text mes-sages, and to represent nontextual material such as images and audio fragments.http://www.ietf.org/rfc/rfc2045.txt
RFC 2045, “Multipurpose Internet Mail Extensions, Part One: Format of Inter-net Message Bodies,” specifies the various headers used to describe the structureof MIME messages, many of which are similar or identical to HTTP.http://www.ietf.org/rfc/rfc1864.txt
RFC 1864, “The Content-MD5 Header Field,” provides some historical detailabout the behavior and intended use of the Content-MD5 header field in MIMEcontent as a message integrity check.http://www.ietf.org/rfc/rfc3230.txt
RFC3230,“InstanceDigestsinHTTP,”describesimprovementstoHTTPentity-digest handling that fix weaknesses present in the Content-MD5 formulation.|

CHAPTER 16
Internationalization
Every day, billions of people write documents in hundreds of languages. To live upto the vision of a truly world-wide Web, HTTP needs to support the transport andprocessing of international documents, in many languages and alphabets.
This chapter covers two primary internationalization issues for the Web: characterset encodings and language tags. HTTP applications use character set encodings torequest and display text in different alphabets, and they use language tags to describeand restrict content to languages the user understands. We finish with a brief chatabout multilingual URIs and dates.
This chapter:• Explains how HTTP interacts with schemes and standards for multilingualalphabets• Gives a rapid overview of the terminology, technology, and standards to help
HTTP programmers do things right (readers familiar with character encodingscan skip this section)• Explains the standard naming system for languages, and how standardized lan-guage tags describe and select content• Outlines rules and cautions for international URIs• Briefly discusses rules for dates and other internationalization issues
HTTP Support for International Content
HTTPmessages can carry content in any language, just as it can carry images, mov-ies, or any other kind of media. To HTTP, the entity body is just a box of bits.
To support international content, servers need to tell clients about the alphabet andlanguages of each document, so the client can properly unpack the document bitsinto characters and properly process and present the content to the user.370
Servers tell clients about a document’s alphabet and language with the HTTP
Content-Type charset parameter and Content-Language headers. These headersdescribe what’s in the entity body’s “box of bits,” how to convert the contents intothe proper characters that can be displayed onscreen, and what spoken language thewords represent.
At the same time, the client needs to tell the server which languages the user under-stands and which alphabetic coding algorithms the browser has installed. The clientsends Accept-Charset and Accept-Language headers to tell the server which charac-ter set encoding algorithms and languages the client understands, and which of themare preferred.
The following HTTP Accept headers might be sent by a French speaker who prefershis native language (but speaks some English in a pinch) and who uses a browserthat supports the iso-8859-1 West European charset encoding and the UTF-8 Uni-code charset encoding:
Accept-Language: fr, en;q=0.8
Accept-Charset: iso-8859-1, utf-8
The parameter “q=0.8” is a quality factor, giving lower priority to English (0.8) thanto French (1.0 by default).
Character Sets and HTTP
So, let’s jump right into the most important (and confusing) aspects of web interna-tionalization—international alphabetic scripts and their character set encodings.
Web character set standards can be pretty confusing. Lots of people get frustratedwhen they first try to write international web software, because of complex andinconsistent terminology, standards documents that you have to pay to read, andunfamiliarity with foreign languages. This section and the next section should makeit easier for you to use character sets with HTTP.
Charset Is a Character-to-Bits Encoding
The HTTP charset values tell you how to convert from entity content bits into char-acters in a particular alphabet. Each charset tag names an algorithm to translate bitsto characters (and vice versa). The charset tags are standardized in the MIME charac-ter set registry, maintained by the IANA (see http://www.iana.org/assignments/character-sets). Appendix H summarizes many of them.
The following Content-Type header tells the receiver that the content is an HTMLfile, and the charset parameter tells the receiver to use the iso-8859-6 Arabic charac-ter set decoding scheme to decode the content bits into characters:
Content-Type: text/html; charset=iso-8859-6|

The iso-8859-6 encoding scheme maps 8-bit values into both the Latin and Arabicalphabets, including numerals, punctuation and other symbols.* For example, in
Figure 16-1, the highlighted bit pattern has code value 225, which (under iso-8859-6)maps into the Arabic letter “FEH” (a sound like the English letter “F”).
HTTP/1.1 200 OK                               iso-8859-6 decoding
Content-type: text/html; charset=iso-8859-6       of code
Content-length: 18572                            11100001
Content-language: ar                            (decimal 225)00100101110100100101001001111101010100101001111010011111100001100101010101110000010101000101001101011111001000010101111101010...              Arabic letter Feh
Entity body
Code bits in HTTP response                Character
Figure 16-1. The charset parameter tells the client how to go from bits to characters
Some character encodings (e.g., UTF-8 and iso-2022-jp) are more complicated, vari-able-length codes, where the number of bits per character varies. This type of codinglets you use extra bits to support alphabets with large numbers of characters (such as
Chinese and Japanese), while using fewer bits to support standard Latin characters.
How Character Sets and Encodings Work
Let’s see what character sets and encodings really do.
We want to convert from bits in a document into characters that we can displayonscreen. But because there are many different alphabets, and many different waysof encoding characters into bits (each with advantages and disadvantages), we need astandard way to describe and apply the bits-to-character decoding algorithm.
Bits-to-character conversions happen in two steps, as shown in Figure 16-2:• In Figure 16-2a, bits from a document are converted into a character code thatidentifies a particular numbered character in a particular coded character set. Inthe example, the decoded character code is numbered 225.• In Figure 16-2b, the character code is used to select a particular element of thecoded character set. In iso-8859-6, the value 225 corresponds to “ARABIC LET-
TER FEH.” The algorithms used in Steps a and b are determined from the
MIME charset tag.
A key goal of internationalized character systems is the isolation of the semantics(letters) from the presentation (graphical presentation forms). HTTP concerns itself* Unlike Chinese and Japanese, Arabic has only 28 characters. Eight bits provides 256 unique values, whichgives plenty of room for Latin characters, Arabic characters, and other useful symbols.|
(iso-8859-6 codedcharacter set)65     LATIN CAPITAL LETTER A66     LATIN CAPITAL LETTER B224    ARABIC TATWEEL225    ARABIC LETTER FEH226    ARABIC LETTER QAF227    ARABIC LETTER KAF
Data bits                    Character code                        Unique character                              Glyph...11100001                          225                          "ARABIC LETTER FEH"(in iso-8859-6 set)encoding scheme                 Coded character set                        Fonts and presentation logic(using iso-8859-6’s encoding)(a) Decode using encoding scheme   (b) Find character using coded      (c) Find display shape using fonts andcharacter set                       formatting software
MIME charset tag describes the combination of characterencoding scheme and coded character set mapping
Figure 16-2. HTTP “charset” combines a character encoding scheme and a coded character setonly with transporting the character data and the associated language and charsetlabels. The presentation of the character shapes is handled by the user’s graphics dis-play software (browser, operating system, fonts), as shown in Figure 16-2c.
The Wrong Charset Gives the Wrong Characters
If the client uses the wrong charset parameter, the client will display strange, boguscharacters. Let’s say a browser got the value 225 (binary 11100001) from the body:• If the browser thinks the body is encoded with iso-8859-1 Western Europeancharacter codes, it will show a lowercase Latin “a” with acute accent:• If the browser is using iso-8859-6 Arabic codes, it will show “FEH”:• If the browser is using iso-8859-7 Greek, it will show a small “Alpha”:|
• If the browser is using iso-8859-8 Hebrew codes, it will show “BET”:
Standardized MIME Charset Values
The combination of a particular character encoding and a particular coded characterset is called a MIME charset. HTTP uses standardized MIME charset tags in the Con-tent-Type and Accept-Charset headers. MIME charset values are registered with the*
IANA. Table16-1 lists a few MIME charset encoding schemes used by documentsand browsers. A more complete list is provided in Appendix H.
Table 16-1. MIME charset encoding tags
MIME charset value     Descriptionus-ascii               The famous character encoding standardized in 1968 as ANSI_X3.4-1968. It is also named ASCII, butthe “US” prefix is preferred because of several international variants in ISO 646 that modify selectedcharacters. US-ASCII maps 7-bit values into 128 characters. The high bit is unused.iso-8859-1             iso-8859-1isan8-bitextensiontoASCIItosupportWesternEuropeanlanguages.Itusesthehighbitto include many West European characters, while leaving the ASCII codes (0–127) intact. Also callediso-latin-1, or nicknamed “Latin1.”iso-8859-2             Extends ASCII to include characters for Central and Eastern European languages, including Czech,
Polish, and Romanian. Also called iso-latin-2.iso-8859-5             Extends ASCII to include Cyrillic characters, for languages including Russian, Serbian, and Bulgarian.iso-8859-6             Extends ASCII to include Arabic characters. Because the shapes of Arabic characters change depend-ing on their position in a word, Arabic requires a display engine that analyzes the context and gener-ates the correct shape for each character.iso-8859-7             Extends ASCII to include modern Greek characters. Formerly known as ELOT-928 or ECMA-118:1986.iso-8859-8             Extends ASCII to include Hebrew and Yiddish characters.iso-8859-15            Updates iso-8859-1, replacing some less-needed punctuation and fraction symbols with forgotten
FrenchandFinnishlettersandreplacingtheinternationalcurrencysignwiththesymbolforthenew
Euro currency. This character set is nicknamed “Latin0” and may one day replace iso-8859-1 as thepreferred default character set in Europe.iso-2022-jp            iso-2022-jp is a widely used encoding for Japanese email and web content. It is a variable-lengthencoding scheme that supports ASCII characters with single bytes but uses three-character modalescape sequences to shift into three different Japanese character sets.euc-jp                 euc-jp is an ISO 2022–compliant variable-length encoding that uses explicit bit patterns to identifyeach character, without requiring modes and escape sequences. It uses 1-byte, 2-byte, and 3-bytesequences of characters to identify characters in multiple Japanese character sets.
Shift_JIS              This encoding was originally developed by Microsoft and sometimes is called SJIS or MS Kanji. It is abit complicated, for reasons of historic compatibility, and it cannot map all characters, but it still iscommon.* See http://www.iana.org/numbers.htm for the list of registered charset values.|

Table 16-1. MIME charset encoding tags (continued)
MIME charset value     Descriptionkoi8-r                 KOI8-R is a popular 8-bit Internet character set encoding for Russian, defined in IETF RFC 1489. Theinitials are transliterations of the acronym for “Code for Information Exchange, 8 bit, Russian.”utf-8                  UTF-8 is a common variable-length character encoding scheme for representing UCS (Unicode),whichistheUniversalCharacterSetoftheworld’scharacters.UTF-8usesavariable-lengthencodingfor character code values, representing each character by from one to six bytes. One of the primaryfeatures of UTF-8 is backward compatibility with ordinary 7-bit ASCII text.windows-1252           Microsoft calls its coded character sets “code pages.” Windows code page 1252 (a.k.a. “CP1252” or“WinLatin1”) is an extension of iso-8859-1.
Content-Type Charset Header and META Tags
Webservers send the client the MIME charset tag in the Content-Type header, usingthe charset parameter:
Content-Type: text/html; charset=iso-2022-jp
If no charset is explicitly listed, the receiver may try to infer the character set fromthe document contents. For HTML content, character sets might be found in<META HTTP-EQUIV="Content-Type"> tags that describe the charset.
Example16-1 shows how HTML META tags set the charset to the Japanese encod-ing iso-2022-jp. If the document is not HTML, or there is no META Content-Typetag, software may attempt to infer the character encoding by scanning the actual textfor common patterns indicative of languages and encodings.
Example16-1.Character encoding can be specified in HTML META tags<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-2022-jp"><META LANG="jp"><TITLE>A Japanese Document</TITLE></HEAD><BODY>...
If a client cannot infer a character encoding, it assumes iso-8859-1.
The Accept-Charset Header
There are thousands of defined character encoding and decoding methods, devel-oped over the past several decades. Most clients do not support all the various char-acter coding and mapping systems.
HTTP clients can tell servers precisely which character systems they support, usingthe Accept-Charset request header. The Accept-Charset header value provides a listof character encoding schemes that the client supports. For example, the following
HTTPrequestheaderindicatesthataclient accepts the Western European iso-8859-1|
character system as well as the UTF-8 variable-length Unicode compatibility system.
A server is free to return content in either of these character encoding schemes.
Accept-Charset: iso-8859-1, utf-8
Note that there is no Content-Charset response header to match the Accept-Charsetrequest header. The response character set is carried back from the server by thecharset parameter of the Content-Type response header, to be compatible with
MIME. It’s too bad this isn’t symmetric, but all the information still is there.
Multilingual Character Encoding Primer
The previous section described how the HTTP Accept-Charset header and the
Content-Type charset parameter carry character-encoding information from the cli-ent and server. HTTP programmers who do a lot of work with international applica-tions and content need to have a deeper understanding of multilingual character sys-tems to understand technical specifications and properly implement software.
It isn’t easy to learn multilingual character systems—the terminology is complex andinconsistent, you often have to pay to read the standards documents, and you maybe unfamiliar with the other languages with which you’re working. This section is anoverview of character systems and standards. If you are already comfortable withcharacter encodings, or are not interested in this detail, feel free to jump ahead to“Language Tags and HTTP.”
Character Set Terminology
Here are eight terms about electronic character systems that you should know:
Character
Analphabetic letter, numeral, punctuation mark, ideogram (as in Chinese), sym-bol, or other textual “atom” of writing. The Universal Character Set (UCS) ini-*tiative, known informally as Unicode, has developed a standardized set oftextual names for many characters in many languages, which often are used to†conveniently and uniquely name characters.
Glyph
Astroke pattern or unique graphical shape that describes a character. A charac-ter may have multiple glyphs if it can be written different ways (see Figure 16-3).
Coded character
A unique number assigned to a character so that we can work with it.
Coding space
A range of integers that we plan to use as character code values.* Unicode is a commercial consortium based on UCS that drives commercial products.†The names look like “LATIN CAPITAL LETTER S” and “ARABIC LETTER QAF.”|

Code width
The number of bits in each (fixed-size) character code.
Character repertoire
A particular working set of characters (a subset of all the characters in the world).
Coded character set
Aset of coded characters that takes a character repertoire (a selection of charac-ters from around the world) and assigns each character a code from a codingspace. In other words, it maps numeric character codes to real characters.
Character encoding scheme
Analgorithm to encode numeric character codes into a sequence of content bits(and to decode them back). Character encoding schemes can be used to reducethe amount of data required to identify characters (compression), work aroundtransmission restrictions, and unify overlapping coded character sets.
Charset Is Poorly Named
Technically, the MIME charset tag (used in the Content-Type charset parameter andthe Accept-Charset header) doesn’t specify a character set at all. The MIME charsetvalue names a total algorithm for mapping data bits to codes to unique characters. Itcombines the two separate concepts of character encoding scheme and coded charac-ter set (see Figure 16-2).
This terminology is sloppy and confusing, because there already are published stan-dards for character encoding schemes and for coded character sets.* Here’s what the
HTTP/1.1 authors say about their use of terminology (in RFC 2616):
The term “character set” is used in this document to refer to a method ... to convert asequence of octets into a sequence of characters... Note: This use of the term “charac-ter set” is more commonly referred to as a “character encoding.” However, since
HTTPandMIMEsharethe same registry, it’s important that the terminology also beshared.
The IETF also adopts nonstandard terminology in RFC 2277:
This document uses the term “charset” to mean a set of rules for mapping from asequence of octets to a sequence of characters, such as the combination of a codedcharacter set and a character encoding scheme; this is also what is used as an identifierin MIME “charset=” parameters, and registered in the IANA charset registry. (Notethat this is NOT a term used by other standards bodies, such as ISO).
So, be careful when reading standards documents, so you know exactly what’s beingdefined. Now that we’ve got the terminology sorted out, let’s look a bit more closelyat characters, glyphs, character sets, and character encodings.* Worse,theMIMEcharsettagoftenco-optsthenameofaparticularcodedcharactersetorencodingscheme.
Forexample,iso-8859-1isacodedcharacterset(itassignsnumericcodestoasetof256Europeancharacters),but MIMEusesthecharsetvalue“iso-8859-1”tomeanan8-bitidentityencodingofthecodedcharacterset.
This imprecise terminology isn’t fatal, but when reading standards documents, be clear on the assumptions.|

Characters
Characters are the most basic building blocks of writing. A character represents analphabetic letter, numeral, punctuation mark, ideogram (as in Chinese), mathemati-cal symbol, or other basic unit of writing.
Characters are independent of font and style. Figure 16-3 shows several variants ofthe same character, called “LATIN SMALL LETTER A.” A native reader of Western
European languages would immediately recognize all five of these shapes as the samecharacter, even though the stroke patterns and styles are quite different.
Figure 16-3. One character can have many different written forms
Many writing systems also have different stroke shapes for a single character,depending on the position of the character in the word. For example, the four*strokes in Figure 16-4 all represent the character “ARABIC LETTER AIN.”
Figure 16-4a shows how “AIN” is written as a standalone character. Figure 16-4dshows “AIN” at the beginning of a word, Figure 16-4c shows “AIN” in the middle of†a word, and Figure 16-4b shows “AIN” at the end of a word.(a) Standalone    (b)Final position  (c) Medial position (d) Initial postion(These different glyphs represent the same character, “ARABIC LETTER AIN”)
Figure 16-4. Four positional forms of the single character “ARABIC LETTER AIN”
Glyphs, Ligatures, and Presentation Forms
Don’t confuse characters with glyphs. Characters are the unique, abstract “atoms” oflanguage. Glyphs are the particular ways you draw each character. Each characterhas many different glyphs, depending on the artistic style and script.‡
Also, don’t confuse characters with presentation forms. To make writing looknicer, many handwritten scripts and typefaces let you join adjacent characters intopretty ligatures, in which the two characters smoothly connect. English-speaking* The sound “AIN” is pronounced something like “ayine,” but toward the back of the throat.†Note that Arabic words are written from right to left.‡Manypeopleusetheterm“glyph” to mean the final rendered bitmap image, but technically a glyph is theinherent shape of a character, independent of font and minor artistic style. This distinction isn’t very easy toapply, or useful for our purposes.|
typesetters often join “F” and “I” into an “FI ligature” (see Figure 16-5a–b), and
Arabic writers often join the “LAM” and “ALIF” characters into an attractive liga-ture (Figure 16-5c–d).(a) Without FI ligature       (b) With FI ligature          (c) Without LA ligature       (d) With LA ligature
ALIF          LAM                         LAM and ALIF
Figure 16-5. Ligatures are stylistic presentation forms of adjacent characters, not new characters
Here’s the general rule: if the meaning of the text changes when you replace oneglyph with another, the glyphs are different characters. Otherwise, they are the samecharacters, with a different stylistic presentation.*
Coded Character Sets
Coded character sets, defined in RFCs 2277 and 2130, map integers to characters.
Codedcharacter sets often are implemented as arrays,† indexed by code number (see
Figure 16-6). The array elements are characters.‡
US-ASCII coded character set68            “LATIN CAPTIAL LETTER D”
Code 68 (0x44)
Figure 16-6. Coded character sets can be thought of as arrays that map numeric codes to characters
Let’s look at a few important coded character set standards, including the historic
US-ASCII character set, the iso-8859 extensions to ASCII, the Japanese JIS X 0201character set, and the Universal Character Set (Unicode).
US-ASCII: The mother of all character sets
ASCII is the most famous coded character set, standardized back in 1968 as ANSIstandard X3.4 “American Standard Code for Information Interchange.” ASCII uses* The division between semantics and presentation isn’t always clear. For ease of implementation, some pre-sentation variants of the same characters have been assigned distinct characters, but the goal is to avoid this.†The arrays can be multidimensional, so different bits of the code number index different axes of the array.‡Figure 16-6 uses a grid to represent a coded character set. Each element of the grid contains a characterimage. These images are symbolic. The presence of an image “D” is shorthand for the character “LATIN
CAPITAL LETTER D,” not for any particular graphical glyph.|
only the code values 0–127, so only 7 bits are required to cover the code space. Thepreferred name for ASCII is “US-ASCII,” to distinguish it from international variantsof the 7-bit character set.
HTTP messages (headers, URIs, etc.) use US-ASCII.iso-8859
The iso-8859 character set standards are 8-bit supersets of US-ASCII that use thehigh bit to add characters for international writing. The additional space provided bythe extra bit (128 extra codes) isn’t large enough to hold even all of the Europeancharacters (not to mention Asian characters), so iso-8859 provides customized char-acter sets for different regions:iso-8859-1           Western European languages (e.g., English, French)iso-8859-2           Central and Eastern European languages (e.g., Czech, Polish)iso-8859-3           Southern European languagesiso-8859-4           Northern European languages (e.g., Latvian, Lithuanian, Greenlandic)iso-8859-5           Cyrillic (e.g., Bulgarian, Russian, Serbian)iso-8859-6           Arabiciso-8859-7           Greekiso-8859-8           Hebrewiso-8859-9           Turkishiso-8859-10          Nordic languages (e.g., Icelandic, Inuit)iso-8859-15          Modification to iso-8859-1 that includes the new Euro currency characteriso-8859-1, also known as Latin1, is the default character set for HTML. It can beused to represent text in most Western European languages. There has been somediscussion of replacing iso-8859-1 with iso-8859-15 as the default HTTP coded char-acter set, because it includes the new Euro currency symbol. However, because ofthe widespread adoption of iso-8859-1, it’s unlikely that a widespread change to iso-8859-15 will be adopted for quite some time.
JIS X 0201
JIS X 0201 is an extremely minimal character set that extends ASCII with Japanesehalf width katakana characters. The half-width katakana characters were originallyused in the Japanese telegraph system. JIS X 0201 is often called “JIS Roman.” JIS isan acronym for “Japanese Industrial Standard.”
JIS X 0208 and JIS X 0212
Japanese includes thousands of characters from several writing systems. While it ispossible to limp by (painfully) using the 63 basic phonetic katakana characters in JIS
X 0201, a much more complete character set is required for practical use.|

The JIS X 0208 character set was the first multi-byte Japanese character set; itdefined 6,879 coded characters, most of which are Chinese-based kanji. The JIS X0212 character set adds an additional 6,067 characters.
UCS
The Universal Character Set (UCS) is a worldwide standards effort to combine all ofthe world’s characters into a single coded character set. UCS is defined by ISO10646. Unicode is a commercial consortium that tracks the UCS standards. UCS hascoding space for millions of characters, although the basic set consists of only about50,000 characters.
Character Encoding Schemes
Character encoding schemes pack character code numbers into content bits andunpack them back into character codes at the other end (Figure 16-7). There arethree broad classes of character encoding schemes:
Fixed width
Fixed-width encodings represent each coded character with a fixed number ofbits. They are fast to process but can waste space.
Variable width (nonmodal)
Variable-width encodings use different numbers of bits for different charactercode numbers. They can reduce the number of bits required for common charac-ters, and they retain compatibility with legacy 8-bit character sets while allowingthe use of multiple bytes for international characters.
Variable width (modal)
Modalencodings use special “escape” patterns to shift between different modes.
For example, a modal encoding can be used to switch between multiple, over-lapping character sets in the middle of text. Modal encodings are complicated toprocess, but they can efficiently support complicated writing systems.
HTTP/1.1 200 OK
Content-type: text/html; charset=iso-2022-jp
Content-length: 4198
Content-lanuage: jp001001011101001001010010011111010101001010011110100101001101001001010101011100000101010001010011
Character encoder                   01011111001000010101111101010...                               Character decoder
Entity body
Figure 16-7. Character encoding scheme encodes character codes into bits and back again
Let’s look at a few common encoding schemes.|
8-bit
The 8-bit fixed-width identity encoding simply encodes each character code with itscorresponding 8-bit value. It supports only character sets with a code range of 256characters. The iso-8859 family of character sets uses the 8-bit identity encoding.
UTF-8
UTF-8 is a popular character encoding scheme designed for UCS (UTF stands for“UCS Transformation Format”). UTF-8 uses a nonmodal, variable-length encodingfor the character code values, where the leading bits of the first byte tell the length ofthe encoded character in bytes, and any subsequent byte contains six bits of codevalue (see Table 16-2).
If the first encoded byte has a high bit of 0, the length is just 1 byte, and the remain-ing 7 bits contain the character code. This has the nice result of ASCII compatibility(but not iso-8859 compatibility, because iso-8859 uses the high bit).
Table 16-2. UTF-8 variable-width, nonmodal encoding
Character code bits        Byte 1          Byte 2         Byte 3          Byte 4         Byte 5         Byte 60–7                        0ccccccc        -----8–11                       110ccccc        10cccccc       ----12–16                      1110cccc        10cccccc       10cccccc        -              -              -17–21                      11110ccc        10cccccc       10cccccc        10cccccc       -              -22–26                      111110cc        10cccccc       10cccccc        10cccccc       10cccccc       -27–31                      1111110c        10cccccc       10cccccc        10cccccc       10cccccc       10cccccc
For example, character code 90 (ASCII “Z”) would be encoded as 1 byte (01011010),while code 5073 (13-bit binary value 1001111010001) would be encoded into 3 bytes:11100001 10001111 10010001iso-2022-jpiso-2022-jp is a widely used encoding for Japanese Internet documents. iso-2022-jp isa variable-length, modal encoding, with all values less than 128 to prevent problemswith non–8-bit-clean software.*
The encoding context always is set to one of four predefined character sets. Special“escape sequences” shift from one set to another. iso-2022-jp initially uses the US-
ASCII character set, but it can switch to the JIS X 0201 (JIS-Roman) character set orthe much larger JIS X 0208-1978 and JIS X 0208-1983 character sets using 3-byteescape sequences.* The iso-2022-jp encoding is tightly bound to these four character sets, whereas some other encodings areindependent of the particular character set.|

TheescapesequencesareshowninTable16-3.Inpractice,Japanesetext begins with“ESC $ @” or “ESC $ B” and ends with “ESC ( B” or “ESC ( J”.
Table 16-3. iso-2022-jp character set switching escape sequences
Escape sequence                     Resulting coded character set                   Bytes per code
ESC ( B                             US-ASCII       1
ESC ( J                             JIS X 0201-1976 (JIS Roman)                     1
ESC $ @                             JIS X 0208-19782
ESC $ B                             JIS X 0208-19832
When in the US-ASCII or JIS-Roman modes, a single byte is used per character.
When using the larger JIS X 0208 character set, two bytes are used per character*code. The encoding restricts the bytes sent to be between 33 and 126.euc-jpeuc-jp is another popular Japanese encoding. EUC stands for “Extended Unix
Code,” first developed to support Asian characters on Unix operating systems.
Like iso-2022-jp, the euc-jp encoding is a variable-length encoding that allows theuse of several standard Japanese character sets. But unlike iso-2022-jp, the euc-jpencoding is not modal. There are no escape sequences to shift between modes.euc-jp supports four coded character sets: JIS X 0201 (JIS-Roman, ASCII with a few
Japanese substitutions), JIS X 0208, half-width katakana (63 characters used in theoriginal Japanese telegraph system), and JIS X 0212.
OnebyteisusedtoencodeJISRoman(ASCIIcompatible),twobytesareusedforJISX0208andhalf-width katakana, and three bytes are used for JIS X 0212. The coding is abit wasteful but is simple to process.
The encoding patterns are outlined in Table 16-4.
Table 16-4. euc-jp encoding values
Which byte    Encoding values
JIS X 0201 (94 coded characters)1st byte      33–126
JIS X 0208 (6879 coded characters)1st byte      161–2542nd byte      161–254* Thoughthebytescanhaveonly94values(between33and126),thisissufficienttocoverallthecharactersin the JIS X 0208 character sets, because the character sets are organized into a 94×94 grid of code values,enough to cover all JIS X 0208 character codes.|

Table 16-4. euc-jp encoding values (continued)
Which byte                             Encoding values
Half-width katakana (63 coded characters)1st byte                               1422nd byte                               161–223
JIS X 0212 (6067 coded characters)1st byte                               1432nd byte                               161–2543rd byte                               161–254
This wraps up our survey of character sets and encodings. The next section explainslanguage tags and how HTTP uses language tags to target content to audiences.
Please refer to Appendix H for a detailed listing of standardized character sets.
Language Tags and HTTP
Language tags are short, standardized strings that name spoken languages.
We need standardized names, or some people will tag French documents as“French,” others will use “Français,” others still might use “France,” and lazy peoplemight just use “Fra” or “F.” Standardized language tags avoid this confusion.
There are language tags for English (en), German (de), Korean (ko), and many otherlanguages. Language tags can describe regional variants and dialects of languages,such as Brazilian Portuguese (pt-BR), U.S. English (en-US), and Hunan Chinese (zh-xiang). There is even a standard language tag for Klingon (i-klingon)!
The Content-Language Header
TheContent-Languageentity header field describes the target audience languages forthe entity. If the content is intended primarily for a French audience, the Content-
Language header field would contain:
Content-Language: fr
The Content-Language header isn’t limited to text documents. Audio clips, movies,andapplications might all be intended for a particular language audience. Any mediatype that is targeted to particular language audiences can have a Content-Languageheader. In Figure 16-8, the audio file is tagged for a Navajo audience.
If the content is intended for multiple audiences, you can list multiple languages. Assuggested in the HTTP specification, a rendition of the “Treaty of Waitangi,” pre-sented simultaneously in the original Maori and English versions, would call for:
Content-Language: mi, en|
http://www.canyonrecords.com/wav/534.wav
HTTP/1.1 200 OK
Content-type: audio/x-wav
Content-length: 289772
Content-language: i-navajo00100101110100100101010100101001111010010101010101110000010101011111001000011...
Figure 16-8. Content-Language header marks a “Rain Song” audio clip for Navajo speakers
However,just because multiple languages are present within an entity does not meanthat it is intended for multiple linguistic audiences. A beginner’s language primer,such as “A First Lesson in Latin,” which clearly is intended to be used by an English-literate audience, would properly include only “en”.
The Accept-Language Header
Most of us know at least one language. HTTP lets us pass our language restrictionsand preferences along to web servers. If the web server has multiple versions of a*resource, in different languages, it can give us content in our preferred language.
Here, a client requests Spanish content:
Accept-Language: es
YoucanplacemultiplelanguagetagsintheAccept-Languageheadertoenumerateallsupported languages and the order of preference (left to right). Here, the client pre-fers English but will accept Swiss German (de-CH) or other variants of German (de):
Accept-Language: en, de-CH, de
Clients use Accept-Language and Accept-Charset to request content they can under-stand. We’ll see how this works in more detail in Chapter 17.
Types of Language Tags
Language tags have a standardized syntax, documented in RFC 3066, “Tags for the
Identification of Languages.” Language tags can be used to represent:• General language classes (as in “es” for Spanish)• Country-specific languages (as in “en-GB” for English in Great Britain)• Dialects of languages (as in “no-bok” for Norwegian “Book Language”)* Servers also can use the Accept-Language header to generate dynamic content in the language of the user orto select images or target language-appropriate merchandising promotions.|
• Regional languages (as in “sgn-US-MA” for Martha’s Vineyard sign language)• Standardized nonvariant languages (e.g., “i-navajo”)*• Nonstandard languages (e.g., “x-snowboarder-slang” )
Subtags
Language tags have one or more parts, separated by hyphens, called subtags:• The first subtag called the primary subtag. The values are standardized.• The second subtag is optional and follows its own naming standard.• Any trailing subtags are unregistered.
The primary subtag contains only letters (A–Z). Subsequent subtags can contain let-ters or numbers, up to eight characters in length. An example is shown in Figure 16-9.
Martha’s Vineyard sign languagesgn-US-MA
First subtag     Second subtag      Third subtag(sign language)      (America)       (Massachusettsregional variant)
Figure 16-9. Language tags are separated into subtags
Capitalization
All tags are case-insensitive—the tags “en” and “eN” are equivalent. However, low-ercasing conventionally is used to represent general languages, while uppercasing isused to signify particular countries. For example, “fr” means all languages classifiedas French, while “FR” signifies the country France.†
IANA Language Tag Registrations
The values of the first and second language subtags are defined by various standards‡documents and their maintaining organizations. The IANA administers the list ofstandard language tags, using the rules outlined in RFC 3066.
If a language tag is composed of standard country and language values, the tag doesn’thave to be specially registered. Only those language tags that can’t be composed outof the standard country and language values need to be registered specially with the* Describes the unique dialect spoken by “shredders.”†This convention is recommended by ISO standard 3166.‡Seehttp://www.iana.org and RFC 2860.|
*
IANA. The following sections outline the RFC 3066 standards for the first and sec-ond subtags.
First Subtag: Namespace
The first subtag usually is a standardized language token, chosen from the ISO 639set of language standards. But it also can be the letter “i” to identify IANA-registerednames, or “x” for private, extension names. Here are the rules:
If the first subtag has:• Two characters, it is a language code from the ISO 639† and 639-1 standards‡ standard and• Three characters, it is a language code listed in the ISO 639-2extensions• The letter “i,” the language tag is explicitly IANA-registered• The letter “x,” the language tag is a private, nonstandard, extension subtag
The ISO 639 and 639-2names are summarized in Appendix G. A few examples areshown here in Table 16-5.
Table 16-5. Sample ISO 639 and 639-2 language codes
Language                            ISO 639                             ISO 639-2
Arabic                              ar ara
Chinese                             zh chi/zho
Dutch                               nl dut/nla
English                             en eng
French                              fr fra/fre
German                              de deu/ger
Greek (Modern)                      el ell/gre
Hebrew                              he heb
Italian                             it ita
Japanese                            ja jpn
Korean                              ko kor
Norwegian                           no nor
Russian                             ru rus
Spanish                             es esl/spa* At the time of writing, only 21 language tags have been explicitly registered with the IANA, including Can-tonese (“zh-yue”), New Norwegian (“no-nyn”), Luxembourgish (“i-lux”), and Klingon (“i-klingon”). ThehundredsofremainingspokenlanguagesinuseontheInternethavebeencomposedfromstandardcompo-nents.†See ISO standard 639, “Codes for the representation of names of languages.”‡See ISO 639-2, “Codes for the representation of names of languages—Part 2: Alpha-3 code.”|

Table 16-5. Sample ISO 639 and 639-2 language codes (continued)
Language    ISO 639     ISO 639-2
Swedish     sv          sve/swe
Turkish     tr          tur
Second Subtag: Namespace
The second subtag usually is a standardized country token, chosen from the ISO3166 set of country code and region standards. But it may also be another string,which you may register with the IANA. Here are the rules:
If the second subtag has:• Two characters, it’s a country/region defined by ISO 3166*• Three to eight characters, it may be registered with the IANA• One character, it is illegal
Some of the ISO 3166 country codes are shown in Table 16-6. The complete list ofcountry codes can be found in Appendix G.
Table 16-6. Sample ISO 3166 country codes
Country   Code
Brazil    BR
Canada    CA
China     CN
France    FR
Germany   DE
Holy See (Vatican City State)              VA
Hong Kong HK
India     IN
Italy     IT
Japan     JP
Lebanon   LB
Mexico    MX
Pakistan  PK
Russian Federation                         RU
United Kingdom                             GB
United States                              US* The country codes AA, QM–QZ, XA–XZ and ZZ are reserved by ISO 3166 as user-assigned codes. Thesemust not be used to form language tags.|

Remaining Subtags: Namespace
There are no rules for the third and following subtags, apart from being up to eightcharacters (letters and digits).
Conﬁguring Language Preferences
You can configure language preferences in your browser profile.
Netscape Navigator lets you set language preferences through Edit ➝ Preferences...➝ Languages..., and Microsoft Internet Explorer lets you set languages through
Tools ➝ Internet Options... ➝ Languages.
Language Tag Reference Tables
AppendixG contains convenient reference tables for language tags:• IANA-registered language tags are shown in Table G-1.• ISO 639 language codes are shown in Table G-2.• ISO 3166 country codes are shown in Table G-3.
Internationalized URIs
Today, URIs don’t provide much support for internationalization. With a few(poorly defined) exceptions, today’s URIs are comprised of a subset of US-ASCIIcharacters. There are efforts underway that might let us include a richer set of char-acters in the hostnames and paths of URLs, but right now, these standards have notbeen widely accepted or deployed. Let’s review today’s practice.
Global Transcribability Versus Meaningful Characters
The URI designers wanted everyone around the world to be able to share URIs witheach other—by email, by phone, by billboard, even over the radio. And they wanted
URIs to be easy to use and remember. These two goals are in conflict.
Tomakeiteasyfor folks around the globe to enter, manipulate, and share URIs, thedesigners chose a very limited set of common characters for URIs (basic Latin alpha-bet letters, digits, and a few special characters). This small repertoire of characters issupported by most software and keyboards around the world.
Unfortunately, by restricting the character set, the URI designers made it muchharder for people around the globe to create URIs that are easy to use and remem-ber. The majority of world citizens don’t even recognize the Latin alphabet, makingit nearly impossible to remember URIs as abstract patterns.|

The URI authors felt it was more important to ensure transcribability and sharabilityof resource identifiers than to have them consist of the most meaningful characters. Sowe have URIs that (today) essentially consist of a restricted subset of ASCII characters.
URI Character Repertoire
The subset of US-ASCII characters permitted in URIs can be divided into reserved,unreserved, and escape character classes. The unreserved character classes can beused generally within any component of URIs that allow them. The reserved charac-ters have special meanings in many URIs, so they shouldn’t be used in general. See
Table 16-7 for a list of the unreserved, reserved, and escape characters.
Table 16-7. URI character syntax
Character class        Character repertoire
Unreserved             [A-Za-z0-9] | “-” | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)”
Reserved               “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”
Escape                 “%” <HEX> <HEX>
Escaping and Unescaping
URI “escapes” provide a way to safely insert reserved characters and other unsup-ported characters (such as spaces) inside URIs. An escape is a three-charactersequence, consisting of a percent character (%) followed by two hexadecimal digitcharacters. The two hex digits represent the code for a US-ASCII character.
For example, to insert a space (ASCII 32) in a URL, you could use the escape “%20”,because 20 is the hexadecimal representation of 32. Similarly, if you wanted toinclude a percent sign and have it not be treated as an escape, you could enter“%25”, where 25 is the hexadecimal value of the ASCII code for percent.
Figure 16-10 shows how the conceptual characters for a URI are turned into codebytes for the characters, in the current character set. When the URI is needed forprocessing, the escapes are undone, yielding the underlying ASCII code bytes.
Internally, HTTP applications should transport and forward URIs with the escapesin place. HTTP applications should unescape the URIs only when the data is needed.
And, more importantly, the applications should ensure that no URI ever is unes-caped twice, because percent signs that might have been encoded in an escape willthemselves be unescaped, leading to loss of data.
Escaping International Characters
Note that escape values should be in the range of US-ASCII codes (0–127). Someapplications attempt to use escape values to represent iso-8859-1 extended charac-ters (128–255)—for example, web servers might erroneously use escapes to code|

Conceptual characters                    URI code bytes            Unescaped ASCII code byte...                              ...o=111                            111m=109                            109s                    /=47                             47’st Joe’                        b=98                             98ale at Joe
Big Sale a      i=105                            105
Big S          g=103                            103http://www.joes-hardware.com/big%20sale.txt         %=372=50                             320=48s=115                            115...                              ...
External form                    What you enter and send            What you process(email, web, billboard, radio)         (in current character set)     (in US-ASCII character set)
Figure 16-10. URI characters are transported as escaped code bytes but processed unescapedfilenames that contain international characters. This is incorrect and may causeproblems with some applications.
For example, the filename Sven Ölssen.html (containing an umlaut) might beencoded by a web server as Sven%20%D6lssen.html. It’s fine to encode the spacewith %20, but is technically illegal to encode the Ö with %D6, because the code D6(decimal 214) falls outside the range of ASCII. ASCII defines only codes up to 0x7F(decimal 127).
Modal Switches in URIs
Some URIs also use sequences of ASCII characters to represent characters in othercharacter sets. For example, iso-2022-jp encoding might be used to insert “ESC ( J”to shift into JIS-Roman and “ESC ( B” to shift back to ASCII. This works in somelocal circumstances, but the behavior is not well defined, and there is no standard-ized scheme to identify the particular encoding used for the URL. As the authors of
RFC 2396 say:
For original character sequences that contain non-ASCII characters, however, the situ-ation is more difficult. Internet protocols that transmit octet sequences intended torepresent character sequences are expected to provide some way of identifying thecharset used, if there might be more than one [RFC2277].
However, there is currently no provision within the generic URI syntax to accomplishthis identification. An individual URI scheme may require a single charset, define adefault charset, or provide a way to indicate the charset used. It is expected that a sys-tematic treatment of character encoding within URI will be developed as a future mod-ification of this specification.
Currently, URIs are not very international-friendly. The goal of URI portability out-weighed the goal of language flexibility. There are efforts currently underway tointernationalize URIs, but in the near term, HTTP applications should stick with
ASCII. It’s been around since 1968, so it can’t be all that bad.|

Other Considerations
This section discusses a few other things you should keep in mind when writinginternational HTTP applications.
Headers and Out-of-Spec Data
HTTP headers must consist of characters from the US-ASCII character set. How-ever, not all clients and servers implement this correctly, so you may on occasionreceive illegal characters with code values larger than 127.
Many HTTP applications use operating-system and library routines for processingcharacters (for example, the Unix ctype character classification library). Not all ofthese libraries support character codes outside of the ASCII range (0–127).
In some circumstances (generally, with older implementations), these libraries mayreturn improper results or crash the application when given non-ASCII characters.
Carefully read the documentation for your character classification libraries beforeusing them to process HTTP messages, in case the messages contain illegal data.
Dates
The HTTP specification clearly defines the legal GMT date formats, but be awarethat not all web servers and clients follow the rules. For example, we have seen webservers send invalid HTTP Date headers with months expressed in local languages.
HTTPapplications should attempt to be tolerant of out-of-spec dates, and not crashon receipt, but they may not always be able to interpret all dates sent. If the date isnot parseable, servers should treat it conservatively.
Domain Names
DNSdoesn’t currently support international characters in domain names. There arestandards efforts under way to support multilingual domain names, but they havenot yet been widely deployed.
For More Information
The very success of the World Wide Web means that HTTP applications will con-tinue to exchange more and more content in different languages and character sets.
For more information on the important but slightly complex topic of multilingualmultimedia, please refer to the following sources.|

Appendixes• IANA-registered charset tags are listed in Table H-1.• IANA-registered language tags are shown in Table G-1.• ISO 639 language codes are shown in Table G-2.• ISO 3166 country codes are shown in Table G-3.
Internet Internationalizationhttp://www.w3.org/International/“Making the WWW Truly World Wide”—the W3C Internationalization and
Localization web site.http://www.ietf.org/rfc/rfc2396.txt
RFC 2396, “Uniform Resource Identifiers (URI): Generic Syntax,” is the defin-ing document of URIs. This document includes sections describing character setrestrictions for international URIs.
CJKV Information Processing
Ken Lunde, O’Reilly & Associates, Inc. CJKV is the bible of Asian electroniccharacter processing. Asian character sets are varied and complex, but this bookprovides an excellent introduction to the standards technologies for large charac-ter sets.http://www.ietf.org/rfc/rfc2277.txt
RFC2277, “IETF Policy on Character Sets and Languages,” documents the cur-rent policies being applied by the Internet Engineering Steering Group (IESG)toward the standardization efforts in the Internet Engineering Task Force (IETF)in order to help Internet protocols interchange data in multiple languages andcharacters.
International Standardshttp://www.iana.org/numbers.htm
TheInternet Assigned Numbers Authority (IANA) contains repositories of regis-tered names and numbers. The “Protocol Numbers and Assignments Directory”contains records of registered character sets for use on the Internet. Becausemuchworkoninternational communications falls under the domain of the ISO,and not the Internet community, the IANA listings are not exhaustive.http://www.ietf.org/rfc/rfc3066.txt
RFC 3066, “Tags for the Identification of Languages,” describes language tags,their values, and how to construct them.|
“Codes for the representation of names of languages”
ISO 639:1988 (E/F), The International Organization for Standardization, firstedition.“Codes for the representation of names of languages—Part 2: Alpha-3 code”
ISO 639-2:1998, Joint Working Group of ISO TC46/SC4 and ISO TC37/SC2,first edition.“Codes for the representation of names of countries”
ISO 3166:1988 (E/F), The International Organization for Standardization, thirdedition.|

CHAPTER 17
Content Negotiation and Transcoding
Often, a single URL may need to correspond to different resources. Take the case ofa web site that wants to offer its content in multiple languages. If a site such as Joe’s
Hardware has both French- and English-speaking users, it might want to offer itswebsite in both languages. However, if this is the case, when one of Joe’s customersrequests “http://www.joes-hardware.com,” which version should the server send?
French or English?
Ideally, the server will send the English version to an English speaker and the Frenchversion to a French speaker—a user could go to Joe’s Hardware’s home page and getcontent in the language he speaks. Fortunately, HTTP provides content-negotiationmethodsthat allow clients and servers to make just such determinations. Using thesemethods, a single URL can correspond to different resources (e.g., a French and
English version of the same web page). These different versions are called variants.
Servers also can make other types of decisions about what content is best to send to aclient for a particular URL. In some cases, servers even can automatically generatecustomized pages—for instance, a server can convert an HTML page into a WMLpage for your handheld device. These kinds of dynamic content transformations arecalled transcodings. They are done in response to content negotiation between HTTPclients and servers.
In this chapter, we will discuss content negotiation and how web applications goabout their content-negotiation duties.
Content-Negotiation Techniques
There are three distinct methods for deciding which page at a server is the right onefor a client: present the choice to the client, decide automatically at the server, or askan intermediary to select. These three techniques are called client-driven negotiation,server-driven negotiation, and transparent negotiation, respectively (see Table 17-1).395
In this chapter, we will look at the mechanics of each technique as well as theiradvantages and disadvantages.
Table 17-1. Summary of content-negotiation techniques
Technique           How it works                      Advantages           Drawbacks
Client-driven       Client makes a request,           Easiesttoimplementatserverside.Clientcan              Adds latency: at least twoserver sends list of choices      make best choice.    requests are needed toto client, client chooses.                             get the correct content.
Server-driven       Server examines client’s          Quicker than client-driven negotiation. HTTP          If the decision is not obvi-request headers and               provides a q-value mechanism to allow serv-           ous (headers don’t matchdecides what version to           ers to make approximate matches and a Vary            up), the server mustserve.                            headerforserverstotelldownstreamdevices               guess.how to evaluate requests.
Transparent         An intermediate device            Offloadsthenegotiationfromthewebserver.                No formal specifications(usually a proxy cache)           Quicker than client-driven negotiation.               for howtodotransparentdoes the request negotia-                              negotiation.tion on the client’s behalf.
Client-Driven Negotiation
The easiest thing for a server to do when it receives a client request is to send back aresponse listing the available pages and let the client decide which one it wants tosee. This, of course, is the easiest to implement at the server and is likely to result inthe best copy being selected (provided that the list has enough information to allowthe client to pick the right copy). The disadvantage is that two requests are neededfor each page—one to get the list and a second to get the selected copy. This is aslow and tedious process, and it’s likely to become annoying to the client.
Mechanically, there are actually two ways for servers to present the choices to the cli-ent for selection: by sending back an HTML document with links to the different ver-sions of the page and descriptions of each of the versions, or by sending back an
HTTP/1.1 response with the 300 Multiple Choices response code. The clientbrowser may receive this response and display a page with the links, as in the firstmethod, or it may pop up a dialog window asking the user to make a selection. Inany case, the decision is made manually at the client side by the browser user.
In addition to the increased latency and annoyance of multiple requests per page,this method has another drawback: it requires multiple URLs—one for the mainpage and one for each specific page. So, if the original request was for www.joes-hardware.com, Joe’s server may respond with a page that has links to www.joes-hardware.com/english and www.joes-hardware.com/french. Should clients now book-mark the original main page or the selected ones? Should they tell their friendsabout the great web site at www.joes-hardware.com or tell only their English-speak-ing friends about the web site at www.joes-hardware.com/english?|

Server-Driven Negotiation
Client-driven negotiation has several drawbacks, as discussed in the previous sec-tion. Most of these drawbacks center around the increased communication betweenthe client and server to decide on the best page in response to a request. One way toreduce this extra communication is to let the server decide which page to sendback—but to do this, the client must send enough information about its preferencesto allow the server to make an informed decision. The server gets this informationfrom the client’s request headers.
There are two mechanisms that HTTP servers use to evaluate the proper response tosend to a client:• Examining the set of content-negotiation headers. The server looks at the client’s
Accept headers and tries to match them with corresponding response headers.• Varying on other (non–content-negotiation) headers. For example, the servercould send responses based on the client’s User-Agent header.
These two mechanisms are explained in more detail in the following sections.
Content-Negotiation Headers
Clients may send their preference information using the set of HTTP headers listedin Table 17-2.
Table 17-2. Accept headers
Header  Description
Accept  Used to tell the server what media types are okay to send
Accept-Language                          Used to tell the server what languages are okay to send
Accept-Charset                           Used to tell the server what charsets are okay to send
Accept-Encoding                          Used to tell the server what encodings are okay to send
Notice how similar these headers are to the entity headers discussed in Chapter 15.
However, there is a clear distinction between the purposes of the two types of head-ers. As mentioned in Chapter 15, entity headers are like shipping labels—they spec-ify attributes of the message body that are necessary during the transfer of messagesfrom the server to the client. Content-negotiation headers, on the other hand, areused by clients and servers to exchange preference information and to help choosebetween different versions of a document, so that the one most closely matching theclient’s preferences is served.
Servers match clients’ Accept headers with the corresponding entity headers, listed in
Table 17-3.|

Table 17-3. Accept and matching document headers
Accept header                Entity header
Accept                       Content-Type
Accept-Language              Content-Language
Accept-Charset               Content-Type
Accept-Encoding              Content-Encoding
Note that because HTTP is a stateless protocol (meaning that servers do not keeptrack of client preferences across requests), clients must send their preference infor-mation with every request.
If both clients sent Accept-Language header information specifying the language inwhich they were interested, the server could decide which copy of www.joes-hard-ware.com to send back to each client. Letting the server automatically pick whichdocument to send back reduces the latency associated with the back-and-forth com-munication required by the client-driven model.
However, say that one of the clients prefers Spanish. Which version of the pageshould the server send back? English or French? The server has just two choices:either guess, or fall back on the client-driven model and ask the client to choose.
However, if the Spaniard happens to understand some English, he might choose the
English page—it wouldn’t be ideal, but it would do. In this case, the Spaniard needsthe ability to pass on more information about his preferences, conveying that he doeshave minimal knowledge of English and that, in a pinch, English will suffice.
Fortunately, HTTP does provide a mechanism for letting clients like our Spaniardgive richer descriptions of their preferences, using quality values (“q values” for short).
Content-Negotiation Header Quality Values
The HTTPprotocol defines quality values to allow clients to list multiple choices foreach category of preference and associate an order of preference with each choice.
For example, clients can send an Accept-Language header of the form:
Accept-Language: en;q=0.5, fr;q=0.0, nl;q=1.0, tr;q=0.0
Where the q values can range from 0.0 to 1.0 (with 0.0 being the lowest preferenceand 1.0 being the highest). The header above, then, says that the client prefers toreceive a Dutch (nl) version of the document, but an English (en) version will do.
Under no circumstances does the client want a French (fr) or Turkish (tr) version,though. Note that the order in which the preferences are listed is not important; onlythe q values associated with them are.
Occasionally, the server may not have any documents that match any of the client’spreferences. In this case, the server may change or transcode the document to matchthe client’s preferences. This mechanism is discussed later in this chapter.|

Varying on Other Headers
Servers also can attempt to match up responses with other client request headers,such as User-Agent. Servers may know that old versions of a browser do not support
JavaScript, for example, and may therefore send back a version of the page that doesnot contain JavaScript.
In this case, there is no q-value mechanism to look for approximate “best” matches.
The server either looks for an exact match or simply serves whatever it has (depend-ing on the implementation of the server).
Because caches must attempt to serve correct “best” versions of cached documents,the HTTPprotocol defines a Vary header that the server sends in responses; the Varyheader tells caches (and clients, and any downstream proxies) which headers theserver is using to determine the best version of the response to send. The Vary headeris discussed in more detail later in this chapter.
Content Negotiation on Apache
Here is an overview of how the Apache web server supports content negotiation. It isuptothewebsite content provider—Joe, for example—to provide different versionsof Joe’s index page. Joe must put all his index page files in the appropriate directoryon the Apache server corresponding to his web site. There are two ways to enablecontent negotiation:• In the web site directory, create a type-map file for each URI in the web site thathas variants. The type-map file lists all the variants and the content-negotiationheaders to which they correspond.• Enable the MultiViews directive, which causes Apache to create type-map filesfor the directory automatically.
Using type-map ﬁles
The Apache server needs to know what type-map files look like. To configure this,set a handler in the server configuration file that specifies the file suffix for type-mapfiles. For example:
AddHandler type-map .var
This line indicates that files with the extension .var are type-map files.
Here is a sample type-map file:
URI: joes-hardware.html
URI: joes-hardware.en.html
Content-type: text/html
Content-language: en|

URI: joes-hardware.fr.de.html
Content-type: text/html;charset=iso-8859-2
Content-language: fr, de
From this type-map file, the Apache server knows to send joes-hardware.en.html toclients requesting English and joes-hardware.fr.de.html to clients requesting French.
Quality values also are supported; see the Apache server documentation.
Using MultiViews
TouseMultiViews,youmustenableitforthedirectorycontainingthewebsite,usingan Options directive in the appropriate section of the access.conf file (<Directory>,<Location>, or <Files>).
If MultiViews is enabled and a browser requests a resource named joes-hardware, theserver looks for all files with “joes-hardware” in the name and creates a type-map filefor them. Based on the names, the server guesses the appropriate content-negotiationheaders to which the files correspond. For example, a French-language version ofjoes-hardware should contain .fr.
Server-Side Extensions
Another way to implement content negotiation at the server is by server-side exten-sions, such as Microsoft’s Active Server Pages (ASP). See Chapter 8 for an overviewof server-side extensions.
Transparent Negotiation
Transparent negotiation seeks to move the load of server-driven negotiation awayfrom the server, while minimizing message exchanges with the client by having anintermediary proxy negotiate on behalf of the client. The proxy is assumed to haveknowledge of the client’s expectations and be capable of performing the negotia-tions on its behalf (the proxy has received the client’s expectations in the request forcontent). To support transparent content negotiation, the server must be able to tellproxies what request headers the server examines to determine the best match for theclient’s request. The HTTP/1.1 specification does not define any mechanisms fortransparent negotiation, but it does define the Vary header. Servers send Vary head-ers in their responses to tell intermediaries what request headers they use for contentnegotiation.
Caching proxies can store different copies of documents accessed via a single URL. Ifservers communicate their decision-making processes to caches, the caches can nego-tiate with clients on behalf of the servers. Caches also are great places to transcodecontent, because a general-purpose transcoder deployed in a cache can transcodecontent from any server, not just one. Transcoding of content at a cache is illus-trated in Figure 17-3 and discussed in more detail later in the chapter.|

Caching and Alternates
Caching of content assumes that the content can be reused later. However, cachesmust employ much of the decision-making logic that servers do when sending back aresponse, to ensure that they send back the correct cached response to a client request.
Theprevious section described the Accept headers sent by clients and the correspond-ing entity headers that servers match them up against in order to choose the bestresponse to each request. Caches must use these same headers to decide which cachedresponse to send back.
Figure 17-1 illustrates both a correct and incorrect sequence of operations involvinga cache. The first request results in the cache forwarding the request to the serverand storing the response. The second response is looked up by the cache, and a doc-ument matching the URL is found. This document, however, is in French, and therequestor wants a Spanish document. If the cache just sends back the French docu-ment to the requestor, it will be behaving incorrectly.
GET / HTTP/1.1                  Hi! Welcome to
Host: www.joes-hardware.com     Joe's Hardware
User-agent: spiffy multimedia browser                            Store.
Accept-language: fr;q=1.0
Hola! Bienvenidoa Joe's Hardware
Store.
Bonjour
French-speaking               Web server           Bonjour!user        Bienvenue a Joe's
Hardware Store
Cache
GET / HTTP/1.1
Host: www.joes-hardware.com
User-agent: spiffy multimedia browser
Accept-language: es;q=1.0
Hola! Bienvenidoa Joe's Hardware
BonjourStore.
Spanish-speaking              Web serveruser
Bienvenido
Cache
Figure 17-1.  Caches use content-negotiation headers to send back correct responses to clients
The cache must therefore forward the second request to the server as well, and storeboth the response and an “alternate” response for that URL. The cache now has two|
different documents for the same URL, just as the server does. These different ver-sions are called variants or alternates. Content negotiation can be thought of as theprocess of selecting, from the variants, the best match for a client request.
The Vary Header
Here’s a typical set of request and response headers from a browser and server:
GET http://www.joes-hardware.com/ HTTP/1.0
Proxy-Connection: Keep-Alive
User-Agent: Mozilla/4.73 [en] (WinNT; U)
Host: www.joes-hardware.com
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*
Accept-Encoding: gzip
Accept-Language: en, pdf
Accept-Charset: iso-8859-1, *, utf-8
HTTP/1.1 200 OK
Date: Sun, 10 Dec 2000 22:13:40 GMT
Server: Apache/1.3.12 OpenSSL/0.9.5a (Unix) FrontPage/4.0.4.3
Last-Modified: Fri, 05 May 2000 04:42:52 GMT
Etag: "1b7ddf-48-3912514c"
Accept-Ranges: Bytes
Content-Length: 72
Connection: close
Content-Type: text/html
Whathappens,however, if the server’s decision was based on headers other than the
Accept headers, such as the User-Agent header? This is not as radical as it maysound. Servers may know that old versions of a browser do not support JavaScript,for example, and may therefore send back a version of the page that does not have
JavaScript in it. If servers are using other headers to make their decisions aboutwhich pages to send back, caches must know what those headers are, so that theycan perform parallel logic in choosing which cached page to send back.
The HTTP Vary response header lists all of the client request headers that the serverconsiders to select the document or generate custom content (in addition to the regu-lar content-negotiation headers). For example, if the served document depends on the
User-Agent header, the Vary header must include “User-Agent”.
Whenanewrequestarrives,thecachefindsthebest match using the content-negoti-ation headers. Before it can serve this document to the client, however, it must seewhether the server sent a Vary header in the cached response. If a Vary header ispresent, the header values for the headers in the new request must match the headervalues in the old, cached request. Because servers may vary their responses based onclient request headers, caches must store both the client request headers and the cor-responding server response headers with each cached varaint, in order to implementtransparent negotiation. This is illustrated in Figure 17-2.|

GET / HTTP/1.1     I need to send her a French document.
Host: www.joes-hardware.com                         Since she has such a cool browser, I'll
User-agent: spiffy multimedia browser               send her a media-rich version of
Accept-language: fr;q=1.0                           the page.
Bonjour
HTTP/1.1 200 OK
French-speaking          Content-language: fr                 Web serveruser 1              Vary: User-agent
Bonjour
Cache            [...media-rich content]
GET / HTTP/1.1                               He wants a French copy of the document
Host: www.joes-hardware.com                  and I have it in my cache, but I’d better
User-agent: wimpy wireless device            not send it to him. The server said my
Accept-language: fr;q=1.0                    cached copy was for a spiffy browser. Thisguy has a wimpy wireless one. I hadbetter ask the server for a French versionfor the wireless browser.
Bonjour
HTTP/1.1 200 OK
Content-language: fr
French-speaking                      Bonjour              Vary: User-agent                     Web serveruser 2
Cache            Bonjour[...simple text content]
Figure 17-2.  If servers vary on specific request headers, caches must match those request headersin addition to the regular content-negotiation headers before sending back cached responses
If a server’s Vary header looked like this, the huge number of different User-Agentand Cookie values could generate many variants:
Vary: User-Agent, Cookie
Acache would have to store each document version corresponding to each variant.
Whenthecachedoesalookup,itfirst does content matching with the content-nego-tiation headers, then matches the request’s variant with cached variants. If there is nomatch, the cache fetches the document from the origin server.
Transcoding
Wehave discussed in some detail the mechanism by which clients and servers canchoose between a set of documents for a URL and send the one that best matches the|
client’s needs. These mechanisms rely on the presence of documents that match theclient’s needs—whether they match the needs perfectly or not so well.
What happens, however, when a server does not have a document that matches theclient’s needs at all? The server may have to respond with an error, but theoretically,the server may be able to transform one of its existing documents into somethingthat the client can use. This option is called transcoding.
Table 17-4 lists some hypothetical transcodings.
Table 17-4. Hypothetical transcodings
Before                       After
HTML document                WML document
High-resolution image        Low-resolution image
Image in 64K colors          Black-and-white image
Complex page with frames     Simple text page without frames or images
HTML page with Java applets  HTML page without Java applets
Page with ads                Page with ads removed
There are three categories of transcoding: format conversion, information synthesis,and content injection.
Format Conversion
Formatconversion is the transformation of data from one format to another to make itviewable by a client. A wireless device seeking to access a document typically viewedby a desktop client may be able do so with an HTML-to-WML conversion. A clientaccessing a web page over a slow link that is not very interested in high-resolutionimages may be able to view an image-rich page more easily if the images are reducedin size and resolution by converting them from color to black and white and shrink-ing them.
Format conversion is driven by the content-negotiation headers listed in Table 17-2,although it may also be driven by the User-Agent header. Note that content transfor-mation or transcoding is different from content encoding or transfer encoding, inthat the latter two typically are used for more efficient or safe transport of content,whereas the former is used to make content viewable on the access device.
Information Synthesis
The extraction of key pieces of information from a document—known as informa-tion synthesis—can be a useful transcoding process. A simple example of this is thegeneration of an outline of a document based on section headings, or the removal ofadvertisements and logos from a page.|

More sophisticated technologies that categorize pages based on keywords in contentalso are useful in summarizing the essence of a document. This technology often isused by automatic web page–classification systems, such as web-page directories atportal sites.
Content Injection
The two categories of transcodings described so far typically reduce the amount ofcontent in web documents, but there is another category of transformations thatincreases the amount of content: content-injection transcodings. Examples of content-injection transcodings are automatic ad generators and user-tracking systems.
Imagine the appeal (and offence) of an ad-insertion transcoder that automaticallyadds advertisements to each HTML page as it goes by. Transcoding of this type has tobe dynamic—itmustbedoneontheflyinordertobeeffectiveinaddingadsthatcur-rently are relevant or somehow have been targeted for a particular user. User-trackingsystems also can be built to add content to pages dynamically, for the purpose of col-lecting statistics about how the page is viewed and how clients surf the Web.
Transcoding Versus Static Pregeneration
An alternative to transcodings is to build different copies of web pages at the webserver—for example, one with HTML, one with WML, one with high-resolutionimages, one with low-resolution images, one with multimedia content, and one with-out. This, however, is not a very practical technique, for many reasons: any smallchange in a page requires multiple pages to be modified, more space is necessary tostore all the different versions of each page, and it’s harder to catalog pages and pro-gram web servers to serve the right ones. Some transcodings, such as ad insertion(especially targeted ad insertion), cannot be done statically—the ad inserted willdepend upon the user requesting the page.
Anon-the-fly transformation of a single root page can be an easier solution than staticpregeneration. It can come, however, at the cost of increased latency in serving thecontent. Some of this computation can, however, be done by a third party, thereby off-loading the computation from the web server—the transformation can be done by anexternal agent at a proxy or cache. Figure 17-3 illustrates transcoding at a proxy cache.
Next Steps
The story of content negotiation does not end with the Accept and Content headers,for a couple of reasons:• Contentnegotiation in HTTP incurs some performance limits. Searching throughmany variants for appropriate content, or trying to “guess” the best match, can|

GET / HTTP/1.1
Host: www.joes-hardware.com
User-agent: wimpy wireless device
Accept-language: fr;q=1.0
I have a French copy of the documentthat he wants, but my copy is very media-rich and he has a wimpy wireless browser.
I will strip out all of the multimedia content
Bonjour                       and send it to him.
Web server
French-speaking   Bonjour                               Transmogrifieruser
Cache
Since I have transformed this        HTTP/1.1 200 OKdocument for a wireless device,      Content-language: fr
I will store the transformed         Vary: User-agentcopy as an alternate in casesomeone else wants it as well.       Bonjour[...simple text content]
Figure 17-3.  Content transformation or transcoding at a proxy cachebe costly. Are there ways to streamline and focus the content-negotiation proto-col? RFCs 2295 and 2296 attempt to address this question for transparent HTTPcontent negotiation.• HTTP is not the only protocol that needs to do content negotiation. Streamingmedia and fax are two other examples where client and server need to discussthe best answer to the client’s request. Can a general content-negotiation proto-col be developed on top of TCP/IP application protocols? The Content Negotia-tion Working Group was formed to tackle this question. The group is nowclosed, but it contributed several RFCs. See the next section for a link to thegroup’s web site.
For More Information
The following Internet drafts and online documentation can give you more detailsabout content negotiation:http://www.ietf.org/rfc/rfc2616.txt
RFC 2616, “Hypertext Transfer Protocol—HTTP/1.1,” is the official specifica-tion for HTTP/1.1, the current version of the HTTP protocol. The specificationis a well-written, well-organized, detailed reference for HTTP, but it isn’t idealfor readers who want to learn the underlying concepts and motivations of HTTPor the differences between theory and practice. We hope that this book fills inthe underlying concepts, so you can make better use of the specification.|
http://search.ietf.org/rfc/rfc2295.txt
RFC2295,“TransparentContentNegotiationinHTTP,”isamemodescribingatransparent content-negotiation protocol on top of HTTP. The status of thismemo remains experimental.http://search.ietf.org/rfc/rfc2296.txt
RFC2296,“HTTPRemoteVariantSelectionAlgorithm—RVSA1.0,”isamemodescribing an algorithm for the transparent selection of the “best” content for aparticular HTTP request. The status of this memo remains experimental.http://search.ietf.org/rfc/rfc2936.txt
RFC 2936, “HTTP MIME Type Handler Detection,” is a memo describing anapproach for determining the actual MIME type handlers that a browser sup-ports. This approach can help if the Accept header is not specific enough.http://www.imc.org/ietf-medfree/index.htm
This is a link to the Content Negotiation (CONNEG) Working Group, whichlooked into transparent content negotiation for HTTP, fax, and print. Thisgroup is now closed.|

PART V
Content Publishingand Distribution
Part V talks all about the technology for publishing and disseminating web content:• Chapter18, Web Hosting, discusses the ways people deploy servers in modernweb hosting environments, HTTP support for virtual web hosting, and how toreplicate content across geographically distant servers.• Chapter19, Publishing Systems, discusses the technologies for creating web con-tent and installing it onto web servers.• Chapter20,Redirection and Load Balancing, surveys the tools and techniques fordistributing incoming web traffic among a collection of servers.• Chapter21, Logging and Usage Tracking, covers log formats and commonquestions.
CHAPTER 18
Web Hosting
When you place resources on a public web server, you make them available to the
Internet community. These resources can be as simple as text files or images, or ascomplicated as real-time driving maps or e-commerce shopping gateways. It’s criti-cal that this rich variety of resources, owned by different organizations, can be conve-niently published to web sites and placed on web servers that offer good performanceat a fair price.
The collective duties of storing, brokering, and administering content resources iscalled web hosting. Hosting is one of the primary functions of a web server. You needa server to hold, serve, log access to, and administer your content. If you don’t wantto manage the required hardware and software yourself, you need a hosting service,or hoster. Hosters rent you serving and web-site administration services and providevarious degrees of security, reporting, and ease of use. Hosters typically pool websites on heavy-duty web servers for cost-efficiency, reliability, and performance.
This chapter explains some of the most important features of web hosting servicesand how they interact with HTTP applications. In particular, this chapter covers:• How different web sites can be “virtually hosted” on the same server, and howthis affects HTTP• How to make web sites more reliable under heavy traffic• How to make web sites load faster
Hosting Services
In the early days of the World Wide Web, individual organizations purchased theirown computer hardware, built their own computer rooms, acquired their own net-work connections, and managed their own web server software.
As the Web quickly became mainstream, everyone wanted a web site, but few peo-ple had the skills or time to build air-conditioned server rooms, register domain411names, or purchase network bandwidth. To save the day, many new businessesemerged, offering professionally managed web hosting services. Many levels of ser-vice are available, from physical facilities management (providing space, air condi-tioning, and wiring) to full-service web hosting, where all the customer does isprovide the content.
This chapter focuses on what the hosting web server provides. Much of what makesa web site work—as well as, for example, its ability to support different languagesand its ability to do secure e-commerce transactions—depends on what capabilitiesthe hosting web server supports.
A Simple Example: Dedicated Hosting
Suppose that Joe’s Hardware Online and Mary’s Antique Auction both want fairlyhigh-volume web sites. Irene’s ISP has racks and racks full of identical, high-performance web servers that it can lease to Joe and Mary, instead of having Joe and
Mary purchase their own servers and maintain the server software.
In Figure 18-1, both Joe and Mary sign up for the dedicated web hosting serviceoffered by Irene’s ISP. Joe leases a dedicated web server that is purchased andmaintained by Irene’s ISP. Mary gets a different dedicated server from Irene’s ISP.
Irene’s ISP gets to buy server hardware in volume and can select hardware that isreliable, time-tested, and low-cost. If either Joe’s Hardware Online or Mary’s
Antique Auction grows in popularity, Irene’s ISP can offer Joe or Mary additionalservers immediately.
Irene’s ISPwww.joes-hardware.com             Contentwww.cajun-gifts.com                         Joe
Client                 Internetwww.marys-antiques.com              Content
Client                       Marywww.irenes-isp.com
Figure 18-1. Outsourced dedicated hosting
In this example, browsers send HTTP requests for www.joes-hardware.com to the IPaddress of Joe’s server and requests for www.marys-antiques.com to the (different) IPaddress of Mary’s server.|

Virtual Hosting
Many folks want to have a web presence but don’t have high-traffic web sites. Forthese people, providing a dedicated web server may be a waste, because they’re pay-ing many hundreds of dollars a month to lease a server that is mostly idle!
Many web hosters offer lower-cost web hosting services by sharing one computerbetween several customers. This is called shared hosting or virtual hosting. Each website appears to be hosted by a different server, but they really are hosted on the samephysical server. From the end user’s perspective, virtually hosted web sites should beindistinguishable from sites hosted on separate dedicated servers.
For cost efficiency, space, and management reasons, a virtual hosting companywants to host tens, hundreds, or thousands of web sites on the same server—but thisdoes not necessarily mean that 1,000 web sites are served from only one PC. Hosterscan create banks of replicated servers (called server farms) and spread the load acrossthe farm of servers. Because each server in the farm is a clone of the others, and hostsmany virtual web sites, administration is much easier. (We’ll talk more about serverfarms in Chapter 20.)
WhenJoeandMarystarted their businesses, they might have chosen virtual hostingto save money until their traffic levels made a dedicated server worthwhile (see
Figure 18-2).
Content
Irene’s ISPwww.joes-hardware.com                            Joewww.marys-antiques.com
Contentwww.cajun-gifts.com
Client                         Mary
Internet
Clientwww.irenes-isp.com
Figure 18-2. Outsourced virtual hosting
Virtual Server Request Lacks Host Information
Unfortunately, there is a design flaw in HTTP/1.0 that makes virtual hosters pulltheir hair out. The HTTP/1.0 specification didn’t give any means for shared webservers to identify which of the virtual web sites they’re hosting is being accessed.|

Recall that HTTP/1.0 requests send only the path component of the URL in therequest message. If you try to get http://www.joes-hardware.com/index.html, thebrowser connects to the server www.joes-hardware.com, but the HTTP/1.0 requestsays “GET /index.html”, with no further mention of the hostname. If the server isvirtually hosting multiple sites, this isn’t enough information to figure out what vir-tual web site is being accessed. For example, in Figure 18-3:• If client A tries to access http://www.joes-hardware.com/index.html, the request“GET /index.html” will be sent to the shared web server.• If client B tries to access http://www.marys-antiques.com/index.html, the identi-cal request “GET /index.html” will be sent to the shared web server.(A getting http://www.joes-hardware.com/index.html)
GET /index.html HTTP/1.0           www.voting-info.gov
User-agent: SuperBrowser v1.3    www.joes-hardware.comwww.marys-antiques.com
Client A                              Internet/voting    /mary     /joe
Client B         GET /index.html HTTP/1.0
User-agent: WebSurfer 2000                     HTTP/1.0 requests do not contain hostname information, sothey do not support web servers that host multiple web sites.(B getting http://www.marys-antiques.com/index.html)               (HTTP/1.1 supports a Host header to fix this problem.)
Figure 18-3. HTTP/1.0 server requests don’t contain hostname information
As far as the web server is concerned, there is not enough information to determinewhich web site is being accessed! The two requests look the same, even though theyare for totally different documents (from different web sites). The problem is that theweb site host information has been stripped from the request.
As we saw in Chapter 6, HTTP surrogates (reverse proxies) and intercepting proxiesalso need site-specifying information.
Making Virtual Hosting Work
The missing host information was an oversight in the original HTTP specification,which mistakenly assumed that each web server would host exactly one web site.
HTTP’sdesigners didn’t provide support for virtually hosted, shared servers. For thisreason, the hostname information in the URL was viewed as redundant and strippedaway; only the path component was required to be sent.
Because the early specifications did not make provisions for virtual hosting, webhosters needed to develop workarounds and conventions to support shared virtualhosting. The problem could have been solved simply by requiring all HTTP request|
messages to send the full URL instead of just the path component. HTTP/1.1 doesrequire servers to handle full URLs in the request lines of HTTP messages, but it willbe a long time before all legacy applications are upgraded to this specification. In themeantime, four techniques have emerged:
Virtual hosting by URL path
Adding a special path component to the URL so the server can determine the site.
Virtual hosting by port number
Assigning a different port number to each site, so requests are handled by sepa-rate instances of the web server.
Virtual hosting by IP address
Dedicating different IP addresses for different virtual sites and binding all the IPaddresses to a single machine. This allows the web server to identify the sitename by IP address.
Virtual hosting by Host header
Many web hosters pressured the HTTP designers to solve this problem.
Enhanced versions of HTTP/1.0 and the official version of HTTP/1.1 define a
Host request header that carries the site name. The web server can identify thevirtual site from the Host header.
Let’s take a closer look at each technique.
Virtual hosting by URL path
You can use brute force to isolate virtual sites on a shared server by assigning themdifferent URL paths. For example, you could give each logical web site a special pathprefix:• Joe’s Hardware store could be http://www.joes-hardware.com/joe/index.html.• Mary’s Antiques store could be http://www.marys-antiques.com/mary/index.html.
When the requests arrive at the server, the hostname information is not present inthe request, but the server can tell them apart based on the path:• The request for Joe’s hardware is “GET /joe/index.html”.• The request for Mary’s antiques is “GET /mary/index.html”.
This is not a good solution. The “/joe” and “/mary” prefixes are redundant and con-fusing (we already mentioned “joe” in the hostname). Worse, the common conven-tion of specifying http://www.joes-hardware.com or http://www.joes-hardware.com/index.html for the home page won’t work.
In general, URL-based virtual hosting is a poor solution and seldom is used.
Virtual hosting by port number
Instead of changing the pathname, Joe and Mary could each be assigned a differentport number on the web server. Instead of port 80, for example, Joe could get 82and|

Mary could have 83. But this solution has the same problem: an end user wouldexpect to find the resources without having to specify a nonstandard port in the URL.
Virtual hosting by IP address
Amuchbetter approach (in common use) is virtual IP addressing. Here, each virtualwebsite gets one or more unique IP addresses. The IP addresses for all of the virtualwebsites are attached to the same shared server. The server can look up the destina-tion IP address of the HTTP connection and use that to determine what web site theclient thinks it is connected to.
Say a hoster assigned the IP address 209.172.34.3 to www.joes-hardware.com,assigned 209.172.34.4 to www.marys-antiques.com, and tied both IP addresses to thesame physical server machine. The web server could then use the destination IPaddress to identify which virtual site is being requested, as shown in Figure 18-4:• Client A fetches http://www.joes-hardware.com/index.html.• Client A finds the IP address for www.joes-hardware.com, getting 209.172.34.3.• Client A opens a TCP connection to the shared web server at 209.172.34.3.• Client A sends the request “GET /index.html HTTP/1.0”.• Before the web server serves a response, it notes the actual destination IP address(209.172.34.3), determines that this is a virtual IP address for Joe’s web site, andfulfills the request from the /joe subdirectory. The page /joe/index.html is returned.www.voting-info.gov= 209.172.34.2                  Dest IP address Directorywww.joes-hardware.com= 209.172.34.3                209.172.34.2      /votingwwwmarys-antiques.com= 209.172.34.4                209.172.34.3      /joe209.172.34.3       209.172.34.4      /mary
Client A                         Internet/voting   /mary     /joe209.172.34.4
Client B
Figure 18-4. Virtual IP hosting
Similarly, if client B asks for http://www.marys-antiques.com/index.html:• Client B finds the IP address for www.marys-antiques.com, getting 209.172.34.4.• Client B opens a TCP connection to the web server at 209.172.34.4.• Client B sends the request “GET /index.html HTTP/1.0”.• The web server determines that 209.172.34.4 is Mary’s web site and fulfills therequest from the /mary subdirectory, returning the document /mary/index.html.|

Virtual IP hosting works, but it causes some difficulties, especially for large hosters:• Computer systems usually have a limit on how many virtual IP addresses can beboundtoamachine.Hosters that want hundreds or thousands of virtual sites tobe hosted on a shared server may be out of luck.• IP addresses are a scarce commodity. Hosters with many virtual sites might notbe able to obtain enough virtual IP addresses for the hosted web sites.• The IP address shortage is made worse when hosters replicate their servers foradditional capacity. Different virtual IP addresses may be needed on each repli-cated server, depending on the load-balancing architecture, so the number of IPaddresses needed can multiply by the number of replicated servers.
Despite the address consumption problems with virtual IP hosting, it is used widely.
Virtual hosting by Host header
To avoid excessive address consumption and virtual IP limits, we’d like to share thesame IP address among virtual sites, but still be able to tell the sites apart. But aswe’ve seen, because most browsers send just the path component of the URL to serv-ers, the critical virtual hostname information is lost.
Tosolve this problem, browser and server implementors extended HTTP to providethe original hostname to servers. But browsers couldn’t just send a full URL,because that would break many servers that expected to receive only a path compo-nent. Instead, the hostname (and port) is passed in a Host extension header in allrequests.
In Figure 18-5, client A and client B both send Host headers that carry the originalhostname being accessed. When the server gets the request for /index.html, it can usethe Host header to decide which resources to use.(A getting http://www.joes-hardware.com/index.html)
GET /index.html HTTP/1.1           www.voting-info.gov
User-agent: SuperBrowser v1.3    www.joes-hardware.com
Host: www.joes-hardware.com     www.marys-antiques.com
Client A                              Internet/voting    /mary     /joe
Client B         GET /index.html HTTP/1.1
User-agent: WebSurfer 2000                     The HTTP Host header carries the hostname information that would
Host: marys-antiques.com                       otherwise be lost in normal server requests, allowing name-basedvirtual hosting.(B getting http://www.marys-antiques.com/index.html)
Figure 18-5. Host headers distinguish virtual host requests|

Host headers were first introduced with HTTP/1.0+, a vendor-extended superset of
HTTP/1.0. Host headers are required for HTTP/1.1 compliance. Host headers aresupported by most modern browsers and servers, but there are still a few clients andservers (and robots) that don’t support them.
HTTP/1.1 Host Headers
The Host header is an HTTP/1.1 request header, defined in RFC 2068. Virtual serv-ers are so common that most HTTP clients, even if they are not HTTP/1.1-compliant,implement the Host header.
Syntax and usage
The Host header specifies the Internet host and port number for the resource beingrequested, as obtained from the original URL:
Host = "Host" ":" host [ ":" port ]
In particular:• If the Host header does not contain a port, the default port for the scheme isassumed.• If the URL contains an IP address, the Host header should contain the sameaddress.• If the URL contains a hostname, the Host header must contain the same name.• If the URL contains a hostname, the Host header should not contain the IPaddress equivalent to the URL’s hostname, because this will break virtuallyhosted servers, which layer multiple virtual sites over a single IP address.• If the URL contains a hostname, the Host header should not contain anotheralias for this hostname, because this also will break virtually hosted servers.• If the client is using an explicit proxy server, the client must include the nameandportoftheorigin server in the Host header, not the proxy server. In the past,several web clients had bugs where the outgoing Host header was set to the host-name of the proxy, when the client’s proxy setting was enabled. This incorrectbehavior causes proxies and origin servers to misbehave.• Web clients must include a Host header field in all request messages.• Web proxies must add Host headers to request messages before forwarding them.• HTTP/1.1 web servers must respond with a 400 status code to any HTTP/1.1request message that lacks a Host header field.
Here is a sample HTTP request message used to fetch the home page of www.joes-hardware.com, along with the required Host header field:
GET http://www.joes-hardware.com/index.html HTTP/1.0
Connection: Keep-Alive
User-Agent: Mozilla/4.51 [en] (X11; U; IRIX 6.2 IP22)|

Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*
Accept-Encoding: gzip
Accept-Language: en
Host: www.joes-hardware.com
Missing Host headers
Asmallpercentage of old browsers in use do not send Host headers. If a virtual host-ing server is using Host headers to determine which web site to serve, and no Hostheader is present, it probably will either direct the user to a default web page (such asthe web page of the ISP) or return an error page suggesting that the user upgrade herbrowser.
Interpreting Host headers
An origin server that isn’t virtually hosted, and doesn’t allow resources to differ bythe requested host, may ignore the Host header field value. But any origin server thatdoes differentiate resources based on the host must use the following rules for deter-mining the requested resource on an HTTP/1.1 request:1. If the URL in the HTTP request message is absolute (i.e., contains a scheme andhost component), the value in the Host header is ignored in favor of the URL.2. If the URL in the HTTP request message doesn’t have a host, and the request con-tains a Host header, the value of the host/port is obtained from the Host header.3. If no valid host can be determined through Steps 1 or 2, a 400 Bad Responseresponse is returned to the client.
Host headers and proxies
Some browser versions send incorrect Host headers, especially when configured touse proxies. For example, when configured to use a proxy, some older versions of
Apple and PointCast clients mistakenly sent the name of the proxy instead of the ori-gin server in the Host header.
Making Web Sites Reliable
There are several times during which web sites commonly break:• Server downtime• Traffic spikes: suddenly everyone wants to see a particular news broadcast orrush to a sale. Sudden spikes can overload a web server, slowing it down or stop-ping it completely.• Network outages or losses
This section presents some ways of anticipating and dealing with these commonproblems.|

Mirrored Server Farms
Aserver farm is a bank of identically configured web servers that can cover for eachother. The content on each server in the farm can be mirrored, so that if one has aproblem, another can fill in.
Often, mirrored servers follow a hierarchical relationship. One server might act asthe “content authority”—the server that contains the original content (perhaps aserver to which the content authors post). This server is called the master originserver. The mirrored servers that receive content from the master origin server arecalled replica origin servers. One simple way to deploy a server farm is to use a net-work switch to distribute requests to the servers. The IP address for each of the websites hosted on the servers is the IP address of the switch.
In the mirrored server farm shown in Figure 18-6, the master origin server is respon-sible for sending content to the replica origin servers. To the outside world, the IPaddress for this content is the IP address of the switch. The switch is responsible forsending requests to the servers.
Client      Client
Replica origin server
Client
Internet
Switch
Client Master origin server
Client
Replica origin servers
Figure 18-6. Mirrored server farm
Mirrored web servers can contain copies of the exact same content at different loca-tions. Figure 18-7 illustrates four mirrored servers, with a master server in Chicagoand replicas in New York, Miami, and Little Rock. The master server serves clientsin the Chicago area and also has the job of propagating its content to the replicaservers.
In the Figure 18-7 scenario, there are a couple of ways that client requests would bedirected to a particular server:
HTTP redirection
The URL for the content could resolve to the IP address of the master server,which could then send redirects to replica servers.|

Chicago (HQ)                      New York
Master origin server            Replica origin server
Internet
Little Rock                        Miami
Replica origin server           Replica origin server
Figure 18-7. Dispersed mirrored servers
DNS redirection
The URL for the content could resolve to four IP addresses, and the DNS servercould choose the IP address that it sends to clients.
See Chapter 20 for more details.
Content Distribution Networks
Acontent distribution network (CDN) is simply a network whose purpose is the dis-tribution of specific content. The nodes of the network can be web servers, surro-gates, or proxy caches.
Surrogate Caches in CDNs
Surrogate caches can be used in place of replica origin servers in Figures 18-6 and18-7. Surrogates, also known as reverse proxies, receive server requests for contentjust as mirrored web servers do. They receive server requests on behalf of a specificset of origin servers (this is possible because of the way IP addresses for content areadvertised; there usually is a working relationship between origin server and surro-gate, and surrogates expect to receive requests aimed at specific origin servers).
The difference between a surrogate and a mirrored server is that surrogates typicallyare demand-driven. They do not store entire copies of the origin server content; theystore whatever content their clients request. The way content is distributed in theircaches depends on the requests that they receive; the origin server does not have theresponsibility to update their content. For easy access to “hot” content (content thatis in high demand), some surrogates have “prefetching” features that enable them topull content in advance of user requests.
An added complexity in CDNs with surrogates is the possibility of cache hierarchies.|

Proxy Caches in CDNs
Proxy caches also can be deployed in configurations similar to those in Figures 18-6and 18-7. Unlike surrogates, traditional proxy caches can receive requests aimed atany web servers (there need not be any working relationship or IP address agree-ment between a proxy cache and an origin server). As with surrogates, however,proxy cache content typically is demand-driven and is not expected to be an exactduplicate of the origin server content. Some proxy caches also can be preloaded withhot content.
Demand-driven proxy caches can be deployed in other kinds of configurations—inparticular, interception configurations, where a layer-2or -3 device (switch or router)intercepts web traffic and sends it to a proxy cache (see Figure 18-8).
Client  Caching proxy
Client           Internet and lots
Switch                      of origin servers
Client
Client
Figure 18-8. Client requests intercepted by a switch and sent to a proxy
Aninterception configuration depends on being able to set up the network betweenclients and servers so that all of the appropriate HTTP requests are physically chan-neled to the cache. (See Chapter 20). The content is distributed in the cache accord-ing to the requests it receives.
Making Web Sites Fast
Manyofthetechnologies mentioned in the previous section also help web sites loadfaster. Server farms and distributed proxy caches or surrogate servers distribute net-work traffic, avoiding congestion. Distributing the content brings it closer to endusers, so that the travel time from server to client is lower. The key to speed ofresource access is how requests and responses are directed from client to server andback across the Internet. See Chapter 20 for details on redirection methods.
Another approach to speeding up web sites is encoding the content for fast transpor-tation. This can mean, for example, compressing the content, assuming that thereceiving client can uncompress it. See Chapter 15 for details.|

For More Information
See Part III, Identification, Authorization, and Security, for details on how to makewebsites secure. The following Internet drafts and documentation can give you moredetails about web hosting and content distribution:http://www.ietf.org/rfc/rfc3040.txt
RFC 3040, “Internet Web Replication and Caching Taxonomy,” is a referencefor the vocabulary of web replication and caching applications.http://search.ietf.org/internet-drafts/draft-ietf-cdi-request-routing-reqs-00.txt“Request-Routing Requirements for Content Internetworking.”
Apache: The Definitive Guide
Ben Laurie and Peter Laurie, O’Reilly & Associates, Inc. This book describeshow to run the open source Apache web server.|

CHAPTER 19
Publishing Systems
Howdoyoucreate web pages and get them onto a web server? In the dark ages ofthe Web (let’s say, 1995), you might have hand-crafted your HTML in a text editorandmanuallyuploadedthecontent to the web server using FTP. This procedure waspainful, difficult to coordinate with coworkers, and not particularly secure.
Modern-day publishing tools make it much more convenient to create, publish, andmanage web content. Today, you can interactively edit web content as you’ll see itonthescreenandpublishthatcontenttoserverswithasingleclick, while being noti-fied of any files that have changed.
Many of the tools that support remote publishing of content use extensions to the
HTTP protocol. In this chapter, we explain two important technologies for web-content publishing based on HTTP: FrontPage and DAV.
FrontPage Server Extensionsfor Publishing Support
FrontPage (commonly referred to as FP) is a versatile web authoring and publishingtoolkit provided by Microsoft Corp. The original idea for FrontPage (FrontPage 1.0)was conceived in 1994, at Vermeer Technologies, Inc., and was dubbed the firstproduct to combine web site management and creation into a single, unified tool.
Microsoft purchased Vermeer and shipped FrontPage 1.1 in 1996. The latest ver-sion, FrontPage Version 2002, is the sixth version in the line and a core part of the
Microsoft Office suite.
FrontPage Server Extensions
Aspartofthe“publishanywhere”strategy, Microsoft released a set of server-side soft-ware called FrontPage Server Extensions (FPSE). These server-side components inte-grate with the web server and provide the necessary translation between the web siteand the client running FrontPage (and other clients that support these extensions).424
Ourprimaryinterest lies in the publishing protocol between the FP clients and FPSE.
This protocol provides an example of designing extensions to the core services avail-able in HTTP without changing HTTP semantics.
The FrontPage publishing protocol implements an RPC layer on top of the HTTP
POST request. This allows the FrontPage client to send commands to the server toupdate documents on the web site, perform searches, collaborate amongst the webauthors, etc. Figure 19-1 gives an overview of the communication.
HTTP request message contains                         www.joes-hardware.comthe command and the URL
HTTP
Internet
FrontPage clients:                             HTTP
FrontPage,               CGI  ISAPI
MS Word, Excel, etc.
FrontPage Server
Extensions (FPSE)
Figure 19-1. FrontPage publishing architecture
The web server sees POST requests addressed to the FPSE (implemented as a set of
CGI programs, in the case of a non-Microsoft IIS server) and directs those requestsaccordingly. As long as intervening firewalls and proxy servers are configured toallow the POST method, FrontPage can continue communicating with the server.
FrontPage Vocabulary
Before we dive deeper into the RPC layer defined by FPSE, it may help to establishthe common vocabulary:
Virtual server
One of the multiple web sites running on the same server, each with a uniquedomain name and IP address. In essence, a virtual server allows a single webserver to host multiple web sites, each of which appears to a browser as beinghosted by its own web server. A web server that supports virtual servers is calleda multi-hosting web server. A machine that is configured with multiple IPaddresses is called a multi-homed server (for more details, please refer to “Vir-tual Hosting” in Chapter 18).
Root web
The default, top-level content directory of a web server, or, in a multi-hostingenvironment, the top-level content directory of a virtual web server. To accessthe root web, it is enough to specify the URL of the server without specifying apage name. There can be only one root web per web server.|

Subweb
A named subdirectory of the root web or another subweb that is a complete
FPSE extended web. A subweb can be a complete independent entity with theability to specify its own administration and authoring permissions. In addition,subwebs may provide scoping for methods such as searches.
The FrontPage RPC Protocol
TheFrontPage client and FPSE communicate using a proprietary RPC protocol. Thisprotocol is layered on top of HTTP POST by embedding the RPC methods and theirassociated variables in the body of the POST request.
To start the process, the client needs to determine the location and the name of thetarget programs on the server (the part of the FPSE package that can execute the
POST request). It then issues a special GET request (see Figure 19-2).
HTTP request message containsthe command and the URL
GET /_vti_inf.html HTTP/1.1
Date: Sat, 12 Aug 2000 20:31:24 GMT
User-agent: Mozilla/2.0 (compatible;MS FrontPage 4.0)
Host: taskserver:80
Accept: auth/sicily www.joes-hardware.com
Content-length: 0
Internet
FrontPage clients
CGI  ISAPI
FrontPage Server
Extensions (FPSE)
Figure 19-2. Initial request
Whenthe file is returned, the FrontPage client reads the response and finds the val-ues associated with FPShtmlScriptUrl, FPAuthorScriptUrl, and FPAdminScriptUrl.
Typically, this may look like:
FPShtmlScriptUrl="_vti_bin/_vti_rpc/shtml.dll"
FPAuthorScriptUrl="_vti_bin/_vti_aut/author.dll"
FPAdminScriptUrl="_vti_bin/_vti_adm/admin.dll"
FPShtmlScriptUrl tells the client where to POST requests for “browse time” com-mands (e.g., getting the version of FPSE) to be executed.
FPAuthorScriptUrl tells the client where to POST requests for “authoring time” com-mands to be executed. Similarly, FPAdminScriptUrl tells FrontPage where to POSTrequests for administrative actions.|

Nowthat we know where the various programs are located, we are ready to send arequest.
Request
The body of the POST request contains the RPC command, in the form of“method=<command>” and any required parameters. For example, consider the
RPC message requesting a list of documents, as follows:
POST /_vti_bin/_vti_aut/author.dll HTTP/1.1
Date:  Sat, 12 Aug 2000 20:32:54 GMT
User-Agent: MSFrontPage/4.0..........................................<BODY>method=list+documents%3a4%2e0%2e2%2e3717&service%5fname=&listHiddenDocs=false&listExplorerDocs=false&listRecurse=false&listFiles=true&listFolders=true&listLinkInfo=true&listIncludeParent=true&listDerived=false&listBorders=false&listChildWebs=true&initialUrl=&folderList=%5b%3bTW%7c12+Aug+2000+20%3a33%3a04+%2d0000%5d
The body of the POST command contains the RPC command being sent to the
FPSE. As with CGI programs, the spaces in the method are encoded as plus sign (+)characters. All other nonalphanumeric characters in the method are encoded using%XX format, where the XX stands for the ASCII representation of the character. Usingthis notation, a more readable version of the body would look like the following:method=list+documents:4.0.1.3717&service_name=&listHiddenDocs=false&listExplorerDocs=false.....
Some of the elements listed are:service_name
The URL of the web site on which the method should act. Must be an existingfolder or one level below an existing folder.listHiddenDocs
Shows the hidden documents in a web if its value is “true”. The “hidden” docu-ments are designated by URLs with path components starting with “_”.listExploreDocs
If the value is “true”, lists the task lists.
Response
Most RPC protocol methods have return values. Most common return values are forsuccessful methods and errors. Some methods also have a third subsection, “Sample
Return Code.” FrontPage properly interprets the codes to provide accurate feedbackto the user.|

Continuing with our example, the FPSE processes the “list+documents” request andreturns the necessary information. A sample response follows:
HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
Date: Sat, 12 Aug 2000 22:49:50 GMT
Content-type: application/x-vermeer-rpc
X-FrontPage-User-Name: IUSER_MINSTAR<html><head><title>RPC packet</title></head><body><p>method=list documents: 4.0.2.3717<p>document_list=<ul><li>document_name=help.gif<\ul>
Asyoucanseefromtheresponse,aformattedlistofdocumentsavailable on the webserver is returned to the FP client. You can find the complete list of commands andresponses at the Microsoft web site.
FrontPage Security Model
Any publishing system directly accessing web server content needs to be very con-scious of the security implications of its actions. For the most part, FPSE depends onthe web server to provide the security.
The FPSE security model defines three kinds of users: administrators, authors, andbrowsers, with administrators having complete control. All permissions are cumula-tive; i.e., all administrators may author and browse the FrontPage web. Similarly, allauthors have browsing permissions.
The list of administrators, authors, and browsers is defined for a given FPSEextended web. All of the subwebs may inherit the permissions from the root web orset their own. For non-IIS web servers, all the FPSE programs are required to bestored in directories marked “executable” (the same restriction as for any other CGIprogram). Fpsrvadm, the FrontPage server administrator utility, may be used for thispurpose. On IIS servers, the integrated Windows security model prevails.
Onnon-IIS servers, web server access-control mechanisms specify the users who areallowed to access a given program. On Apache and NCSA web servers, the file isnamed .htaccess; on Netscape servers, it is named .nsconfig. The access file associ-ates users, groups, and IP addresses with various levels of permissions: GET (read),
POST (execute), etc. For example, for a user to be an author on an Apache webserver, the .htaccess file should permit that user to POST to author.exe. These access-specification files often are defined on a per-directory basis, providing greater flexi-bility in defining the permissions.|

OnIISservers, the permissions are checked against the ACLs for a given root or sub-root. When IIS gets a request, it first logs on and impersonates the user, then sendsthe request to one of the three extension dynamic link libraries (DLLs). The DLLchecks the impersonation credentials against the ACL defined for the destinationfolder. If the check is successful, the requested operation is executed by the exten-sion DLL. Otherwise, a “permission denied” message is sent back to the client.
Given the tight integration of Windows security with IIS, the User Manager may beused to define fine-grained control.
In spite of this elaborate security model, enabling FPSE has gained notoriety as anontrivial security risk. In most cases, this is due to sloppy practices adopted by website administrators. However, the earlier versions of FPSE did have severe securityloopholes and thus contributed to the general perception of security risk. This prob-lem also was exacerbated by the arcane practices needed to fully implement a tightsecurity model.
WebDAV and Collaborative Authoring
WebDistributed Authoring and Versioning (WebDAV) adds an extra dimension toweb publishing—collaboration. Currently, the most common practice of collabora-tion is decidedly low-tech: predominantly email, sometimes combined with distrib-uted fileshares. This practice has proven to be very inconvenient and error-prone,with little or no control over the process. Consider an example of launching a multi-national, multilingual web site for an automobile manufacturer. It’s easy to see theneed for a robust system with secure, reliable publishing primitives, along with col-laboration primitives such as locking and versioning.
WebDAV(published as RFC 2518) is focused on extending HTTP to provide a suit-able platform for collaborative authoring. It currently is an IETF effort with supportfrom various vendors, including Adobe, Apple, IBM, Microsoft, Netscape, Novell,
Oracle, and Xerox.
WebDAV Methods
WebDAVdefinesasetofnewHTTPmethodsandmodifiestheoperational scope ofa few other HTTP methods. The new methods added by WebDAV are:
PROPFIND
Retrieves the properties of a resource.
PROPPATCH
Sets one or more properties on one or many resources.
MKCOL
Creates collections.|

COPY
Copies a resource or a collection of resources from a given source to a given des-tination. The destination need not be on the same machine.
MOVE
Movesaresource or a collection of resources from a given source to a given des-tination. The destination need not be on the same machine.
LOCK
Locks a resource or multiple resources.
UNLOCK
Unlocks a previously locked resource.
HTTPmethods modified by WebDAV are DELETE, PUT, and OPTIONS. Both thenew and the modified methods are discussed in detail later in this chapter.
WebDAV and XML
WebDAV’s methods generally require a great deal of information to be associatedwith both requests and responses. HTTP usually communicates this information inmessage headers. However, transporting necessary information in headers aloneimposes some limitations, including the difficulties of selective application of headerinformation to multiple resources in a request, to represent hierarchy, etc.
Tosolve this problem, WebDAV embraces the Extensible Markup Language (XML),a meta-markup language that provides a format for describing structured data. XMLprovides WebDAV with:• A method of formatting instructions describing how data is to be handled• A method of formatting complex responses from the server• A method of communicating customized information about the collections andresources handled• A flexible vehicle for the data itself• A robust solution for most of the internationalization issues
Traditionally, the schema definition for XML documents is kept in a Document Type
Definition (DTD) file that is referenced within the XML document itself. Therefore,when trying to interpret an XML document, the DOCTYPE definition entity givesthe name of the DTD file associated with the XML document in question.
WebDAV defines an explicit XML namespace, “DAV:”. Without going into manydetails, an XML namespace is a collection of names of elements or attributes. Thenamespace qualifies the embedded names uniquely across the domain, thus avoid-ing any name collisions.
The complete XML schema is defined in the WebDAV specification, RFC 2518. Thepresence of a predefined schema allows the parsing software to make assumptions onthe XML schema without having to read in DTD files and interpret them correctly.|

WebDAV Headers
WebDAVdoes introduce several HTTP headers to augment the functionality of thenew methods. This section provides a brief overview; see RFC 2518 for more infor-mation. The new headers are:
DAV
Used to communicate the WebDAV capabilities of the server. All resources sup-ported by WebDAV are required to return this header in the response to the
OPTIONS request. See “The OPTIONS method” for more details.
DAV = "DAV" ":" "1" ["," "2"] ["," 1#extend]
Depth
The crucial element for extending WebDAV to grouped resources with multiplelevels of hierarchy (for more detailed explanation about collections, please referto “Collections and Namespace Management”).
Depth = "Depth" ":" ("0" | "1" | "infinity")
Let’s look at a simple example. Consider a directory DIR_A with files file_1.htmlandfile_2.html. If a method uses Depth: 0, the method applies to the DIR_A direc-tory alone, and Depth: 1 applies to the DIR_A directory and its files, file_1.htmlandfile_2.html.
The Depth header modifies many WebDAV-defined methods. Some of themethods that use the Depth header are LOCK, COPY, and MOVE.
Destination
Defined to assist the COPY or MOVE methods in identifying the destination
URI.
Destination = "Destination" ":" absoluteURI
If
The only defined state token is a lock token (see “The LOCK Method”). The Ifheader defines a set of conditionals; if they all evaluate to false, the request willfail. Methods such as COPY and PUT conditionalize the applicability by specify-ing preconditions in the If header. In practice, the most common precondition tobe satisfied is the prior acquisition of a lock.
If = "If" ":" (1*No-tag-list | 1*Tagged-list)
No-tag-list = List
Tagged-list = Resource 1*List
Resource = Coded-URL
List = "(" 1*(["Not"](State-token | "[" entity-tag "]")) ")"
State-token = Coded-URL
Coded-URL = "<" absoluteURI ">"
Lock-Token
Used by the UNLOCK method to specify the lock that needs to be removed. Aresponse to a LOCK method also has a Lock-Token header, carrying the neces-sary information about the lock taken.
Lock-Token = "Lock-Token" ":" Coded-URL|

Overwrite
Used by the COPY and MOVE methods to designate whether the destinationshould be overwritten. See the discussion of the COPY and MOVE methodslater in this chapter for more details.
Overwrite = "Overwrite" ":" ("T" | "F")
Timeout
A request header used by a client to specify a desired lock timeout value. Formore information, refer to the section “Lock refreshes and the Timeout header.”
TimeOut = "Timeout" ":" 1#TimeType
TimeType = ("Second-" DAVTimeOutVal | "Infinite" | Other)
DAVTimeOutVal = 1*digit
Other = "Extend" field-value
Now that we have sketched the intent and implementation of WebDAV, let’s lookmore closely at the functions provided.
WebDAV Locking and Overwrite Prevention
By definition, collaboration requires more than one person working on a given docu-ment.TheinherentproblemassociatedwithcollaborationisillustratedinFigure 19-3.
A’s copy                            B’s copy
Author A                              Shared file repositoryAuthor B“A” publishes. . .                   B’s copy
Author A                              Shared file repositoryAuthor B“B” also publishes andoverwrites “A”’s changes
Author A                              Shared file repositoryAuthor B
Figure 19-3. Lost update problem
In this example, authors A and B are jointly writing a specification. A and B indepen-dently make a set of changes to the document. A pushes the updated document tothe repository, and at a later point, B posts her own version of the document into therepository. Unfortunately, because B never knew about A’s changes, she nevermerged her version with A’s version, resulting in A’s work being lost.|

To ameliorate the problem, WebDAV supports the concept of locking. Lockingalone will not fully solve the problem. Versioning and messaging support are neededto complete the solution.
WebDAV supports two types of locks:• Exclusive write locking of a resource or a collection• Shared write locking of a resource or a collection
Anexclusive write lock guarantees write privileges only to the lock owner. This typeof locking completely eliminates potential conflicts. A shared write lock allows agroup of people to work on a given document. This type of locking works well in anenvironment where all the authors are aware of each other’s activities. WebDAV pro-vides a property discovery mechanism, via PROPFIND, to determine the support forlocking and the types of locks supported.
WebDAV has two new methods to support locking: LOCK and UNLOCK.
To accomplish locking, there needs to be a mechanism for identifying the author.
WebDAV requires digest authentication (discussed in Chapter 13).
Whenalock is granted, the server returns a token that is unique across the domainto the client. The specification refers to this as the opaquelocktoken lock token URIscheme. When the client subsequently wants to perform a write, it connects to theserver and completes the digest authentication sequence. Once the authentication iscomplete, the WebDAV client presents the lock token, along with the PUT request.
Thus, the combination of the correct user and the lock token is required to completethe write.
The LOCK Method
Apowerful feature of WebDAV is its ability to lock multiple resources with a single
LOCKrequest.WebDAVlockingdoesnotrequiretheclienttostayconnectedtotheserver.
For example, here’s a simple LOCK request:
LOCK /ch-publish.fm HTTP/1.1
Host: minstar
Content-Type: text/xml
User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT)
Content-Length: 201<?xml version="1.0"?><a:lockinfo xmlns:a="DAV:"><a:lockscope><a:exclusive/></a:lockscope><a:locktype><a:write/></a:locktype><a:owner><a:href>AuthorA</a:href></a:owner></a:lockinfo>|

The XML being submitted has the <lockinfo> element as its base element. Withinthe <lockinfo> structure, there are three subelements:<locktype>
Indicates the type of lock. Currently there is only one, “write.”<lockscope>
Indicates whether this is an exclusive lock or a shared lock.<owner>
Field is set with the person who holds the current lock.
Here’s a successful response to our LOCK request:
HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
Date: Fri, 10 May 2002 20:56:18 GMT
Content-Type: text/xml
Content-Length: 419<?xml version="1.0"?><a:prop xmlns:a="DAV:"><a:lockdiscovery><a:activelock><a:locktype><a:write/></a:locktype><a:lockscope><a:exclusive/></a:lockscope><a:owner xmlns:a="DAV:"><a:href>AutherA</a:href></a:owner><a:locktoken><a:href>opaquelocktoken:*****</a:href></a:locktoken><a:depth>0</a:depth><a:timeout>Second-180</a:timeout></a:activelock></a:lockdiscovery></a:prop>
The <lockdiscovery> element acts as a container for information about the lock.
Embeddedinthe<lockdiscovery> element is an <activelock> subelement that holdsthe information sent with the request (<locktype>, <lockscope>, and <owner>). Inaddition, <activelock> has the following subelements:<locktoken>
Uniquely identifies the lock in a URI scheme called opaquelocktoken. Given thestateless nature of HTTP, this token is used to identify the ownership of the lockin future requests.<depth>
Mirrors the value of the Depth header.<timeout>
Indicates the timeout associated with the lock. In the above response(Figure 19-3), the timeout value is 180 seconds.
The opaquelocktoken scheme
Theopaquelocktokenschemeisdesignedtoprovideauniquetokenacrossallresourcesfor all times. To guarantee uniqueness, the WebDAV specification mandates the use ofthe universal unique identifier (UUID) mechanism, as described in ISO-11578.|

When it comes to actual implementation, there is some leeway. The server has thechoice of generating a UUID for each LOCK request, or generating a single UUIDand maintaining the uniqueness by appending extra characters at the end. For per-formance considerations, the latter choice is better. However, if the server chooses toimplement the latter choice, it is required to guarantee that none of the added exten-sions will ever be reused.
The <lockdiscovery> XML element
The <lockdiscovery> XML element provides a mechanism for active lock discovery.
If others try to lock the file while a lock is in place, they will receive a <lockdiscov-ery> XML element that indicates the current owner. The <lockdiscovery> elementlists all outstanding locks along with their properties.
Lock refreshes and the Timeout header
Torefresh a lock, a client needs to resubmit a lock request with the lock token in the
If header. The timeout value returned may be different from the earlier timeout values.
Instead of accepting the timeout value given by the server, a client may indicate thetimeout value required in the LOCK request. This is done through the Timeoutheader. The syntax of the Timeout header allows the client to specify a few optionsin a comma-separated list. For example:
Timeout : Infinite, Second-86400
The server is not obligated to honor either of the options. However, it is required toprovide the lock expiration time in the <timeout> XML element. In all cases, locktimeout is only a guideline and is not necessarily binding on the server. The adminis-trator may do a manual reset, or some other extraordinary event may cause theserver to reset the lock. The clients should avoid taking lengthy locks.
In spite of these primitives, we may not completely solve the “lost update problem”illustrated in Figure 19-3. To completely solve it, a cooperative event system with aversioning control is needed.
The UNLOCK Method
The UNLOCK method removes a lock on a resource, as follows:
UNLOCK /ch-publish.fm HTTP/1.1
Host: minstar.inktomi.com
User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT)
Lock-Token:opaquelocktoken:*********
HTTP/1.1 204 OK
Server: Microsoft-IIS/5.0
Date: Fri, 10 May 2002 20:56:18 GMT|

As with most resource management requests, WebDAV has two requirements for
UNLOCK to succeed: prior completion of a successful digest authenticationsequence, and matching the lock token that is sent in the Lock-Token header.
If the unlock is successful, a 204 No Content status code is returned to client.
Table 19-1 summarizes the possible status codes with the LOCK and UNLOCKmethods.
Table 19-1. Status codes for LOCK and UNLOCK methods
Status code                  Defined by     Method      Effect200 OK                       HTTP           LOCK        Indicates successful locking.201 Created                  HTTP           LOCK        Indicatesthatalockonanonexistentresourcesucceededbycre-ating the resource.204 No Content               HTTP           UNLOCK      Indicates successful unlocking.207 Multi-Status             WebDAV         LOCK        The request was for locking multiple resources. Not all statuscodes returned were the same. Hence, they are all encapsulatedin a 207 response.403 Forbidden                HTTP           LOCK        Indicates that the client does not have permission to lock theresource.412 Precondition Failed      HTTP           LOCK        Either the XML sent with the LOCK command indicated a condi-tiontobesatisfiedandtheserverfailedtocompletetherequiredcondition, or the lock token could not be enforced.422 Unprocessable Property   WebDAV         LOCK        Inapplicable semantics—an example may be specifying a non-zero Depth for a resource that is not a collection.423 Locked                   WebDAV         LOCK        Already locked.424 Failed Dependency        WebDAV         UNLOCK      UNLOCK specifies other actions and their success as a conditionfortheunlocking.Thiserrorisreturnedifthedependencyfailstocomplete.
Properties and META Data
Properties describe information about the resource, including the author’s name,modification date, content rating, etc. META tags in HTML do provide a mecha-nism to embed this information as part of the content; however, many resources(such as any binary data) have no capability for embedding META data.
A distributed collaborative system such as WebDAV adds more complexity to theproperty requirement. For example, consider an author property: when a documentgets edited, this property needs to be updated to reflect the new authors. WebDAVterms such dynamically modifiable properties “live” properties. The more perma-nent, static properties, such as Content-Type, are termed “dead” properties.
To support discovery and modification of properties, WebDAV extends HTTP toinclude two new methods, PROPFIND and PROPPATCH. Examples and corre-sponding XML elements are described in the following sections.|

The PROPFIND Method
The PROPFIND (property find) method is used for retrieving the properties of agiven file or a group of files (also known as a “collection”). PROPFIND supportsthree types of operations:• Request all properties and their values.• Request a selected set of properties and values.• Request all property names.
Here’s the scenario where all the properties and their values are requested:
PROPFIND /ch-publish.fm HTTP/1.1
Host: minstar.inktomi.com
User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT)
Depth: 0
Cache-Control: no-cache
Connection: Keep-Alive
Content-Length: 0
The <propfind> request element specifies the properties to be returned from a
PROPFIND method. The following list summarizes a few XML elements that areused with PROPFIND requests:<allprop>
Requires all property names and values to be returned. To request all propertiesand their values, a WebDAV client may either send an <allprop> XML subele-ment as part of the <propfind> element, or submit a request with no body.<propname>
Specifies the set of property names to be returned.<prop>
A subelement of the <propfind> element. Specifies a specific property whosevalue is to be returned. For example: “<a:prop> <a:owner />..... </a:prop>”.
Here’s a response to a sample PROPFIND request:
HTTP/1.1 207 Multi-Status
Server: Microsoft-IIS/5.0...........<?xml version="1.0"?><a:multistatusxmlns:b="urn:uuid:********/" xmlns:c="xml:" xmlns:a="DAV:"><a:response><a:href>http://minstar/ch-publish.fm </a:href><a:propstat><a:status>HTTP/1.1 200OK</a:status><a:prop><a:getcontentlength b:dt="int">1155</a:getcontentlength>............................................|
<a:ishidden b:dt="boolean">0</a:ishidden><a:iscollection b:dt="boolean">0</a:iscollection></a:prop></a:propstat></a:response></a:multistatus>
In this example, the server responds with a 207 Multi-Status code. WebDAV uses the207 response for PROPFIND and a few other WebDAV methods that act simulta-neously on multiple resources and potentially have different responses for eachresource.
A few XML elements in the response need to be defined:<multistatus>
A container for multiple responses.<href>
Identifies the resource’s URI.<status>
Contains the HTTP status code for the particular request.<propstat>
Groups one <status> element and one <prop> element. The <prop> elementmay contain one or more property name/value pairs for the given resource.
In the sample response listed above, the response is for one URI, http://minstar/ch-publish.fm. The <propstat> element embeds one <status> element and one <prop>element. For this URI, the server returned a 200 OK response, as defined by the <sta-tus> element. The <prop> element has several subelements; only some are listed inthe example.
Oneinstant application of PROPFIND is the support for directory listing. Given theexpressability of a PROPFIND request, one single call can retrieve the entire hierar-chy of the collection with all the properties of individual entities.
The PROPPATCH Method
The PROPPATCHmethodprovidesanatomicmechanismtosetorremovemultipleproperties on a given resource. The atomicity will guarantee that either all of therequests are successful or none of them made it.
ThebaseXMLelementforthePROPPATCHmethodis<propertyupdate>.Itactsasa container for all the properties that need updating. The XML elements <set> and<remove> are used to specify the operation:<set>
Specifies the property values to be set. The <set> contains one or more <prop>subelements, which in turn contains the name/value pairs of the properties to beset for the resource. If the property already exists, the value is replaced.|
<remove>
Specifies the properties that are to be removed. Unlike with <set>, only thenames of the properties are listed in the <prop> container.
This trivial example sets and removes the “owner” property:<d:propertyupdate xmlns:d="DAV:" xmlns:o="http://name-space/scheme/"><d:set><d:prop><o:owner>Author A</o:owner></d:prop></d:set><d:remove><d:prop><o:owner/></d:prop></d:remove></d:propertyupdate>
The response to PROPPATCH requests is very similar to that for PROPFINDrequests. For more information, refer to RFC 2518.
Table 19-2summarizes the status codes for the PROPFIND and PROPPATCHmethods.
Table 19-2. Status codes for PROPFIND and PROPPATCH methods
Status code              Defined by     Methods        Effect200 OK                   HTTP           PROPFIND,      Command success.
PROPPATCH207 Multi-Status         WEBDAV         PROPFIND,      Whenactingononeormoreresources(oracollection),thestatus
PROPPATCH      for each object is encapsulated into one 207 response. This is atypical success response.401 Unauthorized         HTTP           PROPATCH       Requires authorization to complete the property modificationoperation.403 Forbidden            HTTP           PROPFIND,      ForPROPFIND,theclientisnotallowedtoaccesstheproperty.For
PROPPATCH      PROPPATCH, the client may not change the property.404 Not Found            HTTP           PROPFIND       No such property.409 Conflict             HTTP           PROPPATCH      Conflict of update semantics—for example, trying to update aread-only property.423 Locked               WebDAV         PROPPATCH      Destination resource is locked and there is no lock token or thelock token does not match.507 Insufficient Storage WebDAV         PROPPATCH      Not enough space for registering the modified property.
Collections and Namespace Management
Acollection refers to a logical or physical grouping of resources in a predefined hier-achy. A classic example of a collection is a directory. Like directories in a filesystem,|
collections act as containers of other resources, including other collections (equiva-lent to directories on the filesystem).
WebDAV uses the XML namespace mechanism. Unlike traditional namespaces,
XMLnamespace partitions allow for precise structural control while preventing anynamespace collisions.
WebDAV provides five methods for manipulating the namespace: DELETE,
MKCOL,COPY,MOVE,andPROPFIND.PROPFINDwasdiscussed previously inthis chapter, but let’s talk about the other methods.
The MKCOL Method
The MKCOL method allows clients to create a collection at the indicated URL onthe server. At first sight, it may seem rather redundant to define an entire newmethod just for creating a collection. Overlaying on top of a PUT or POST methodseems like a perfect alternative. The designers of the WebDAV protocol did considerthese alternatives and still chose to define a new method. Some of the reasons behindthat decision are:• TohaveaPUToraPOSTcreateacollection,theclientneedstosendsomeextra“semantic glue” along with the request. While this certainly is feasible, definingan ad hoc protocol may become tedious and error-prone.• Most of the access-control mechanisms are based on the type of methods—onlya few are allowed to create and delete resources in the repository. If we overloadother methods, these access-control mechanisms will not work.
For example, a request might be:
MKCOL /publishing HTTP/1.1
Host: minstar
Content-Length: 0
Connection: Keep-Alive
And the response might be:
HTTP/1.1 201 Created
Server: Microsoft-IIS/5.0
Date: Fri, 10 May 2002 23:20:36 GMT
Location: http://minstar/publishing/
Content-Length: 0
Let us examine a few pathological cases:• Suppose the collection already exists. If a MKCOL /colA request is made andcolA already exists (i.e., namespace conflict), the request will fail with a 405
Method Not Allowed status code.• If there are no write permissions, the MKCOL request will fail with a 403 For-bidden status code.|
• If a request such as MKCOL /colA/colB is made and colA does not exist, therequest will fail with a 409 Conflict status code.
Once the file or collection is created, we can delete it with the DELETE method.
The DELETE Method
Wealready saw the DELETE method in Chapter3. WebDAV extends the semanticsto cover collections.
If we need to delete a directory, the Depth header is needed. If the Depth header isnot specified, the DELETE method assumes the Depth header to be set to infinity—that is, all the files in the directory and any subdirectories thereof are deleted. Theresponse also has a Content-Location header identifying the collection that just gotdeleted. The request might read:
DELETE /publishing HTTP/1.0
Host: minstar
And the response might read:
HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
Date: Tue, 14 May 2002 16:41:44 GMT
Content-Location: http://minstar/publishing/
Content-Type: text/xml
Content-Length: 0
When removing collections, there always is a chance that a file in the collection islocked by someone else and can’t be deleted. In such a case, the collection itself can’tbe deleted, and the server replies with a 207 Multi-Status status code. The requestmight read:
DELETE /publishing HTTP/1.0
Host: minstar
And the response might read:
HTTP/1.1 207 Multi-Status
Server: Microsoft-IIS/5.0
Content-Location: http://minstar/publishing/..............<?xml version="1.0"?><a:multistatus xmlns:a="DAV:"><a:response><a:href>http://minstar/index3/ch-publish.fm</a:href><a:status> HTTP/1.1 423 Locked </a:status></a:response></a:multistatus>
In this transaction, the <status> XML element contains the status code 403 Locked,indicating that the resource ch-publish.fm is locked by another user.|

The COPY and MOVE Methods
As with MKCOL, there are alternatives to defining new methods for COPY and
MOVE operations. One such alternative for the COPY method is to do a GETrequest on the source, thus downloading the resource, and then to upload it back tothe server with a PUT request. A similar scenario could be envisioned for MOVE(with the additional DELETE operation). However, this process does not scalewell—consider all the issues involved in managing a COPY or MOVE operation on amultilevel collection.
Both the COPY and MOVE methods use the request URL as the source and the con-tents of the Destination HTTP header as the target. The MOVE method performssomeadditional work beyond that of the COPY method: it copies the source URL tothe destination, checks the integrity of the newly created URI, and then deletes thesource. The request might read:{COPY,MOVE} /publishing HTTP/1.1
Destination: http://minstar/pub-new
Depth: infinity
Overwrite: T
Host: minstar
And the response might read:
HTTP/1.1 201 Created
Server: Microsoft-IIS/5.0
Date: Wed, 15 May 2002 18:29:53 GMT
Location: http://minstar.inktomi.com/pub-new/
Content-Type: text/xml
Content-Length: 0
When acting on a collection, the behavior of COPY or MOVE is affected by the
Depth header. In the absence of the Depth header, infinity is assumed (i.e., bydefault, the entire structure of the source directory will be copied or moved). If the
Depthisset to zero, the method is applied just to the resource. If we are doing a copyor a move of a collection, only a collection with properties identical to those of thesource is created at the destination—no internal members of the collection are cop-ied or moved.
For obvious reasons, only a Depth value of infinity is allowed with the MOVEmethod.
Overwrite header effect
The COPY and MOVE methods also may use the Overwrite header. The Overwriteheader can be set to either T or F. If it’s set to T and the destination exists, a DELETEwith a Depth value of infinity is performed on the destination resource before a
COPY or MOVE operation. If the Overwrite flag is set to F and the destinationresource exists, the operation will fail.|

COPY/MOVE of properties
Whenacollection or an element is copied, all of its properties are copied by default.
However, a request may contain an optional XML body that supplies additionalinformation for the operation. You can specify that all properties must be copied suc-cessfully for the operation to succeed, or define which properties must be copied forthe operation to succeed.
A couple of pathological cases to consider are:• Suppose COPY or MOVE is applied to the output of a CGI program or otherscript that generates content. To preserve the semantics, if a file generated by a
CGI script is to be copied or moved, WebDAV provides “src” and “link” XMLelements that point to the location of the program that generated the page.• The COPY and MOVE methods may not be able to completely duplicate all ofthe live properties. For example, consider a CGI program. If it is copied awayfrom the cgi-bin directory, it may no longer be executed. The current specifica-tion of WebDAV makes COPY and MOVE a “best effort” solution, copying allthe static properties and the appropriate live properties.
Locked resources and COPY/MOVE
If a resource currently is locked, both COPY and MOVE are prohibited from mov-ing or duplicating the lock at the destination. In both cases, if the destination is to becreated under an existing collection with its own lock, the duplicated or movedresource is added to the lock. Consider the following example:
COPY /publishing HTTP/1.1
Destination: http://minstar/archived/publishing-old
Let’s assume that /publishing and /archived already are under two different locks,lock1 and lock2. When the COPY operation completes, /publishing continues to beunder the scope of lock1, while, by virtue of moving into a collection that’s alreadylocked by lock2, publishing-old gets added to lock2. If the operation was a MOVE,just publishing-old gets added to lock2.
Table 19-3 lists most of the possible status codes for the MKCOL, DELETE, COPY,and MOVE methods.
Table 19-3. Status codes for the MKCOL, DELETE, COPY, and MOVE methods
Status code                   Defined by     Methods     Effect102 Processing                WebDAV         MOVE,       If the request takes longer than 20 seconds, the server sends
COPY        this status code to keep clients from timing out. This usually isseen with a COPY or MOVE of a large collection.201 Created                   HTTP           MKCOL,      ForMKCOL,acollectionhasbeencreated.ForCOPYandMOVE,
COPY,       a resource/collection was copied or moved successfully.
MOVE|

Table 19-3. Status codes for the MKCOL, DELETE, COPY, and MOVE methods (continued)
Status code                   Defined by     Methods     Effect204 No Content                HTTP           DELETE,     For DELETE, a standard success response. For COPY and MOVE,
COPY,       the resource was copied over successfully or moved to replace
MOVE        an existing entity.207 Multi-Status              WebDAV         MKCOL,      For MKCOL, a typical success response. For COPY and MOVE, if
COPY,       an error is associated with a resource other than the request
MOVE        URI, the server returns a 207 response with the XML bodydetailing the error.403 Forbidden                 HTTP           MKCOL,      ForMKCOL,theserverdoesnotallowcreationofacollectionat
COPY,       the specified location. For COPY and MOVE, the source and
MOVE        destination are the same.409 Conflict                  HTTP           MKCOL,      In all cases, the methods are trying to create a collection or a
COPY,       resourcewhenanintermediatecollectiondoesnotexist—for
MOVE        example, trying to create colA/colB when colA does not exist.412 Precondition Failed       HTTP           COPY,       Either the Overwrite header is set to F and the destination
MOVE        exists, or the XML body specifies a certain requirement (suchas keeping the “liveness” property) and the COPY or MOVEmethods are not able to retain the property.415 Unsupported Media Type    HTTP           MKCOL       The server does not support or understand the creation of therequest entity type.422 Unprocessable Entity      WebDAV         MKCOL       The server does not understand the XML body sent with therequest.423 Locked                    WebDAV         DELETE,     The source or the destination resource is locked, or the lock
COPY,       token supplied with the method does not match.
MOVE502 Bad Gateway               HTTP           COPY,       The destination is on a different server and permissions are
MOVE        missing.507 Insufficient Storage      WebDAV         MKCOL       There is not enough free space to create the resource.
COPY
Enhanced HTTP/1.1 Methods
WebDAV modifies the semantics of the HTTP methods DELETE, PUT, and
OPTIONS. Semantics for the GET and HEAD methods remain unchanged. Opera-tions performed by POST always are defined by the specific server implementation,and WebDAV does not modify any of the POST semantics. We already covered the
DELETE method, in “Collections and Namespace Management.” We’ll discuss the
PUT and OPTIONS methods here.
The PUT method
Though PUT is not defined by WebDAV, it is the only way for an author to trans-port the content to a shared site. We discussed the general functionality of PUT in
Chapter 3. WebDAV modifies its behavior to support locking.|

Consider the following example:
PUT /ch-publish.fm HTTP/1.1
Accept: */*
If:<http://minstar/index.htm>(<opaquelocktoken:********>)
User-Agent: DAV Client (C)
Host: minstar.inktomi.com
Connection: Keep-Alive
Cache-Control: no-cache
Content-Length: 1155
To support locking, WebDAV adds an If header to the PUT request. In the abovetransaction, the semantics of the If header state that if the lock token specified withthe If header matches the lock on the resource (in this case, ch-publish.fm), the PUToperation should be performed. The If header also is used with a few other methods,such as PROPPATCH, DELETE, MOVE, LOCK, UNLOCK, etc.
The OPTIONS method
Wediscussed OPTIONS in Chapter3. This usually is the first request a WebDAV-enabled client makes. Using the OPTIONS method, the client tries to establish thecapability of the WebDAV server. Consider a transaction in which the request reads:
OPTIONS /ch-publish.fm HTTP/1.1
Accept: */*
Host: minstar.inktomi.com
And the response reads:
HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
MS-Author-Via: DAV
DASL: <DAV:sql>
DAV: 1, 2
Public: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL,PROPFIND,
PROPPATCH, LOCK, UNLOCK, SEARCH
Allow: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, COPY, MOVE, PROPFIND,PROPPATCH,
SEARCH, LOCK, UNLOCK
There are several interesting headers in the response to the OPTIONS method. Aslightly out-of-order examination follows:• The DAV header carries the information about DAV compliance classes. Thereare two classes of compliance:
Class 1 compliance
Requires the server to comply with all MUST requirements in all sections of
RFC 2518. If the resource complies only at the Class 1 level, it will send 1with the DAV header.
Class 2 compliance
Meets all the Class 1 requirements and adds support for the LOCK method.
AlongwithLOCK,Class2compliancerequiressupportfortheTimeoutand|

Lock-Token headers and the <supportedlock> and <lockdiscovery> XMLelements. A value of 2 in the DAV header indicates Class 2 compliance.
In the above example, the DAV header indicates both Class 1 and Class 2compliance.• The Public header lists all methods supported by this particular server.• TheAllowheaderusually contains a subset of the Public header methods. It listsonly those methods that are allowed on this particular resource (ch-publish.fm).• The DASL header provides the type of query grammar used in the SEARCHmethod. In this case, it is sql. More details about the DASL header are providedat http://www.webdav.org.
Version Management in WebDAV
It may be ironic, given the “V” in “DAV,” but versioning is a feature that did notmake the first cut. In a multi-author, collaborative environment, version manage-ment is critical. In fact, to completely fix the lost update problem (illustrated in
Figure 19-3), locking and versioning are essential. Some of the common featuresassociated with versioning are the ability to store and access previous document ver-sions and the ability to manage the change history and any associated annotationsdetailing the changes.
Versioning was added to WebDAV in RFC 3253.
Future of WebDAV
WebDAViswellsupported today. Working implementations of clients include IE 5.x and above, Windows Explorer, and Microsoft Office. On the server side, imple-mentations include IIS5.x and above, Apache with mod_dav, and many others. Both
Windows XP and Mac OS 10.x provide support for WebDAV out of the box; thus,any applications written to run on these operating systems are WebDAV-enablednatively.
For More Information
For more information, refer to:http://officeupdate.microsoft.com/frontpage/wpp/serk/
Microsoft FrontPage 2000 Server Extensions Resource Kit.http://www.ietf.org/rfc/rfc2518.txt?number=2518“HTTP Extensions for Distributed Authoring—WEBDAV,” by Y. Goland, J.
Whitehead, A. Faizi, S. Carter, and D. Jensen.|
http://www.ietf.org/rfc/rfc3253.txt?number=3253“Versioning Extensions to WebDAV,” by G. Clemm, J. Amsden, T. Ellison, C.
Kaler, and J. Whitehead.http://www.ics.uci.edu/pub/ietf/webdav/intro/webdav_intro.pdf“WEBDAV: IETF Standard for Collaborative Authoring on the Web,” by J.
Whitehead and M. Wiggins.http://www.ics.uci.edu/~ejw/http-future/whitehead/http_pos_paper.html“Lessons from WebDAV for the Next Generation Web Infrastructure,” by J.
Whitehead.http://www.microsoft.com/msj/0699/dav/davtop.htm“Distributed Authoring and Versioning Extensions for HTTP Enable Team
Authoring,” by L. Braginski and M. Powell.http://www.webdav.org/dasl/protocol/draft-dasl-protocol-00.html“DAVSearching & Locating,” by S. Reddy, D. Lowry, S. Reddy, R. Henderson,
J. Davis, and A. Babich.|

CHAPTER 20
Redirection and Load Balancing
HTTP does not walk the Web alone. The data in an HTTP message is governed bymanyprotocolsonitsjourney.HTTPcaresonlyabouttheendpointsofthejourney—the sender and the receiver—but in a world with mirrored servers, web proxies, andcaches, the destination of an HTTP message is not necessarily straightforward.
This chapter is about redirection technologies—network tools, techniques, and pro-tocols that determine the final destination of an HTTP message. Redirection technol-ogies usually determine whether the message ends up at a proxy, a cache, or aparticular web server in a server farm. Redirection technologies may send your mes-sages to places a client didn’t explicitly request.
In this chapter, we’ll take a look at the following redirection techniques, how theywork, and what their load-balancing capabilities are (if any):• HTTP redirection• DNS redirection• Anycast routing• Policy routing• IP MAC forwarding• IP address forwarding• The Web Cache Coordination Protocol (WCCP)• The Intercache Communication Protocol (ICP)• The Hyper Text Caching Protocol (HTCP)• The Network Element Control Protocol (NECP)• The Cache Array Routing Protocol (CARP)• The Web Proxy Autodiscovery Protocol (WPAD)448
Why Redirect?
Redirection is a fact of life in the modern Web because HTTP applications alwayswant to do three things:• Perform HTTP transactions reliably• Minimize delay• Conserve network bandwidth
For these reasons, web content often is distributed in multiple locations. This is donefor reliability, so that if one location fails, another is available; it is done to lowerresponse times, because if clients can access a nearer resource, they receive theirrequested content faster; and it’s done to lower network congestion, by spreadingout target servers. You can think of redirection as a set of techniques that help to findthe “best” distributed content.
The subject of load balancing is included because redirection and load balancingcoexist. Most redirection deployments include some form of load balancing; that is,they are capable of spreading incoming message load among a set of servers. Con-versely, any form of load balancing involves redirection, because incoming messagesmust somehow be somehow among the servers sharing the load.
Where to Redirect
Servers, proxies, caches, and gateways all appear to clients as servers, in the sensethat a client sends them an HTTP request, and they process it. Many redirectiontechniques work for servers, proxies, caches, and gateways because of their com-mon, server-like traits. Other redirection techniques are specially designed for a par-ticular class of endpoint and are not generally applicable. We’ll see generaltechniques and specialized techniques in later sections of this chapter.
Web servers handle requests on a per-IP basis. Distributing requests to duplicateservers means that each request for a specific URL should be sent to an optimal webserver (the one nearest to the client, or the least-loaded one, or some other optimiza-tion). Redirecting to a server is like sending all drivers in search of gasoline to thenearest gas station.
Proxies tend to handle requests on a per-protocol basis. Ideally, all HTTP traffic in theneighborhood of a proxy should go through the proxy. For instance, if a proxy cacheis near various clients, all requests ideally will flow through the proxy cache, becausethe cache will store popular documents and serve them directly, avoiding longer andmore expensive trips to the origin servers. Redirecting to a proxy is like siphoning offtraffic on a main access road (no matter where it is headed) to a local shortcut.|

Overview of Redirection Protocols
Thegoal of redirection is to send HTTP messages to available web servers as quicklyas possible. The direction that an HTTP message takes on its way through the Inter-net is affected by the HTTP applications and routing devices it passes from, through,and toward. For example:• The browser application that creates the client’s message could be configured tosend it to a proxy server.• DNS resolvers choose the IP address that is used for addressing the message.
This IP address can be different for different clients in different geographicallocations.• As the message passes through networks, it is divided into addressed packets;switches and routers examine the TCP/IP addressing on the packets and makedecisions about routing the packets on that basis.• Web servers can bounce requests back to different web servers with HTTPredirects.
Browser configuration, DNS, TCP/IP routing, and HTTP all provide mechanisms forredirecting messages. Notice that some methods, such as browser configuration,make sense only for redirecting traffic to proxies, while others, such as DNS redirec-tion, can be used to send traffic to any server.
Table 20-1 summarizes the redirection methods used to redirect messages to servers,each of which is discussed later in this chapter.
Table 20-1. General redirection methods
Mechanism                How it works Basis for rerouting            Limitations
HTTP redirection         Initial HTTP request goes to a first web      Many options, from             Can be slow—every trans-server that chooses a “best” web server       round-robin load               action involves the extrato serve the content. The first web           balancing,tominimizing         redirect step. Also, the firstserver sends the client an HTTP redirect      latency, to choosing the       server must be able to han-to the chosen server. The client resends      shortest path.                 dle the request load.the request to the chosen server.
DNS redirection          DNS server decides which IP address,          Many options, from             Need to configure DNSamong several, to return for the host-        round-robin load               server.name in the URL.                              balancing,tominimizinglatency, to choosing theshortest path.
Anycast addressing       Several servers use the same IP address.      Routers use built-in           Need to own/configure
Each server masquerades as a backbone         shortest-path routing          routers. Risks address con-router. The other routers send packets        capabilities.                  flicts. Established TCP con-addressed to the shared IP to the near-     nectionscanbreakifroutingest server (believing they are sending      changes and packets associ-packets to the nearest router).             ated with a connection getsent to different servers.|

Table 20-1. General redirection methods (continued)
Mechanism               How it works                                Basis for rerouting           Limitations
IP MAC forwarding       A network element such as a switch or       Save bandwidth and            Serverorproxymustbeonerouter reads a packet’s destination         improve QOS. Load             hop away.address; if the packet should be redi-      balance.rected, the switch gives the packet thedestination MAC address of a server orproxy.
IP address              Layer-4 switch evaluates a packet’s des-    Save bandwidth and            IP address of the client canforwarding              tinationportandchangestheIPaddress          improve QOS. Load             be lost to the server/proxy.of a redirect packet to that of a proxy or  balance.mirrored server.
Table 20-2 summarizes the redirection methods used to redirect messages to proxyservers.
Table 20-2. Proxy and cache redirection techniques
Mechanism               How it works                                Basis for rerouting           Limitations
Explicit browser        WebbrowserisconfiguredtosendHTTP            Save bandwidth and            Depends on ability to con-configuration           messages to a nearby proxy, usually a       improve QOS. Load             figure the browser.cache.Theconfigurationcanbedoneby           balance.the end user or by a service that man-ages the browser.
Proxy auto-             Web browser retrieves a PAC file from a     Save bandwidth and            Browser must be config-configuration(PAC)      configurationserver.ThePACfiletellsthe      improve QOS. Load             ured to query the configura-browser what proxy to use for each URL.     balance.                      tion server.
Web Proxy               Webbrowserasksaconfigurationserver          The configuration server      Onlyafewbrowserssupport
Autodiscovery           for the URL of a PAC file. Unlike PAC       bases the URL on infor-       WPAD.
Protocol (WPAD)         alone, the browser does not have to be      mation in client HTTPconfigured with a specific configuration    request headers. Loadserver.    balance.
Web Cache               Router evaluates a packet’s destination     Save bandwidth and            Must use routers that sup-
Coordination            address and encapsulates redirect pack-     improve QOS. Load             port WCCP. Some topologi-
Protocol (WCCP)         ets with the IP address of a proxy or mir-  balance.                      cal limitations.rored server. Works with many existingrouters. Packet can be encapsulated, sothe client’s IP address is not lost.
Internet Cache          A proxy cache can query a group of sib-     Obtaining content from        False cache hits can arise
Protocol (ICP)          ling caches for requested content. Also     a sibling or parent cache     becauseonlytheURLisusedsupports cache hierarchies.                 is faster thanapplyingto      to request content.the origin server.
Cache Array Rout-       Aproxycachehashingprotocol.Allowsa          Obtaining content from        CARP cannot support sib-ing Protocol (CARP)     cache to forward a request to a parent      a nearby peer cache is        ling relationships. All CARPcache. Unlike with ICP, the content on      faster than applying to       clients must agree on thethe caches is disjoint, and the group of    the origin server.            configuration; otherwise,caches acts as a single large cache.     different clients will sendthe same URI to differentparents, reducing hit ratios.|

Table 20-2. Proxy and cache redirection techniques (continued)
Mechanism               How it worksBasis for rerouting          Limitations
HyperTextCaching        Participating proxy caches can query a       Obtaining content from
Protocol (HTCP)         group of sibling caches for requested        a sibling or parent cachecontent. Supports HTTP 1.0 and 1.1           is faster thanapplyingtoheaders to fine-tune cache queries.          the origin server.
General Redirection Methods
In this section, we will delve deeper into the various redirection methods that arecommonly used for both servers and proxies. These techniques can be used to redi-rect traffic to a different (presumably more optimal) server or to vector trafficthrough a proxy. Specifically, we’ll cover HTTP redirection, DNS redirection, any-cast addressing, IP MAC forwarding, and IP address forwarding.
HTTP Redirection
Web servers can send short redirect messages back to clients, telling them to trysomeplace else. Some web sites use HTTP redirection as a simple form of load bal-ancing; the server that handles the redirect (the redirecting server) finds the least-loaded content server available and redirects the browser to that server. For widelydistributed web sites, determining the “best” available server gets more complicated,taking into account not only the servers’ load but the Internet distance between thebrowser and the server. One advantage of HTTP redirection over some other formsof redirection is that the redirecting server knows the client’s IP address; in theory, itmay be able to make a more informed choice.
Here’s how HTTP redirection works. In Figure 20-1a, Alice sends a request towww.joes-hardware.com:
GET /hammers.html HTTP/1.0
Host: www.joes-hardware.com
User-Agent: Mozilla/4.51 [en] (X11; U; IRIX 6.2 IP22)
In Figure 20-1b, instead of sending back a web page body with HTTP status code200, the server sends back a redirect message with status code 302:
HTTP/1.0 302 Redirect
Server: Stronghold/2.4.2 Apache/1.3.6
Location: http://161.58.228.45/hammers.html
Now,inFigure20-1c, the browser resends the request using the redirected URL, thistime to host 161.58.228.45:
GET /hammers.html HTTP/1.0
Host: 161.58.228.45
User-Agent: Mozilla/4.51 [en] (X11; U; IRIX 6.2 IP22)
Another client could get redirected to a different server. In Figure 20-1d–f, Bob’srequest gets redirected to 161.58.228.46.|

Internet(a) Alice sends HTTP request to www.joes.hardware.com(b) Server returns 302 redirect to 161.58.228.45(c) B            161.58.228.45 161.58.228.46 161.58.228.47rowser resendsH
TT
Prequ
Alice  est, t              www.joes-hardware.comhis timeto161.58.228.45
Bob
Internet
Alice(d) Bob sends HTTP request to www.joes-hardware.com(e) Server returns 302 redirect to 161.58.228.46                         161.58.228.45 161.58.228.46 161.58.228.47(f) BrowserresendsH                             www.joes-hardware.com
Bob                             TT
Prequest, this timeto161.58.228.46
Figure 20-1. HTTP redirection
HTTP redirection can vector requests across servers, but it has several disadvantages:• A significant amount of processing power is required from the original server todetermine which server to redirect to. Sometimes almost as much server horse-power is required to issue the redirect as would be to serve up the page itself.• User delays are increased, because two round trips are required to access pages.• If the redirecting server is broken, the site will be broken.
Because of these weaknesses, HTTP redirection usually is used in combination withsome of the other redirection technique.
DNS Redirection
Every time a client tries to access Joe’s Hardware’s web site, the domain namewww.joes-hardware.com must be resolved to an IP address. The DNS resolver maybe the client’s own operating system, a DNS server in the client’s network, or amore remote DNS server. DNS allows several IP addresses to be associated to a sin-gle domain, and DNS resolvers can be configured or programmed to return varying
IP addresses. The basis on which the resolver returns the IP address can run fromthe simple (round robin) to the complex (such as checking the load on several serv-ers and returning the IP address of the least-loaded server).|

In Figure 20-2, Joe runs four servers for www.joes-hardware.com. The DNS serverhas to decide which of four IP addresses to return for www.joes-hardware.com. Theeasiest DNS decision algorithm is a simple round robin.www.joes-hardware.com
DNS server
Decides whetherto resolve to10.10.10.1,10.10.10.2,                       10.10.10.4www.joes-hardware.com10.10.10.3,                        Server 410.10.10.4
Backbone network10.10.10.1
Client                             Server 1
Switch                        Routerwww.joes-hardware.com
Client
Edge network                   www.joes-hardware.com10.10.10.2
Server 210.10.10.3
Server 3
Figure 20-2. DNS-based redirection
For a run-through of the DNS resolution process, see the DNS reference listed at theend of this chapter.
DNS round robin
One of the most common redirection techniques also is one of the simplest. DNSroundrobinusesafeature of DNS hostname resolution to balance load across a farmof web servers. It is a pure load-balancing strategy, and it does not take into accountany factors about the location of the client relative to the server or the current stresson the server.
Let’s look at what CNN.com really does. In early May of 2000, we used the nslookup
Unix tool to find the IP addresses associated with CNN.com. Example 20-1 showsthe results.*
Example20-1.IP addresses for www.cnn.com% nslookup www.cnn.com
Name:    cnn.com* DNS results as of May 7, 2000 and resolved from Northern California. The particular values likely willchange over time, and some DNS systems return different values based on client location.|

Example20-1.IP addresses for www.cnn.com (continued)
Addresses:  207.25.71.5, 207.25.71.6, 207.25.71.7, 207.25.71.8207.25.71.9, 207.25.71.12, 207.25.71.20, 207.25.71.22, 207.25.71.23207.25.71.24, 207.25.71.25, 207.25.71.26, 207.25.71.27, 207.25.71.28207.25.71.29, 207.25.71.30, 207.25.71.82, 207.25.71.199, 207.25.71.245207.25.71.246
Aliases:  www.cnn.com
The web site www.cnn.com actually is a farm of 20 distinct IP addresses! Each IPaddress might typically translate to a different physical server.
Multiple addresses and round-robin address rotation
Most DNSclients just use the first address of the multi-address set. To balance load,mostDNSserversrotate the addresses each time a lookup is done. This address rota-tion often is called DNS round robin.
For example, three consecutive DNS lookups of www.cnn.com might return rotatedlists of IP addresses like those shown in Example 20-2.
Example20-2.Rotating DNS address lists% nslookup www.cnn.com
Name:    cnn.com
Addresses:  207.25.71.5, 207.25.71.6, 207.25.71.7, 207.25.71.8207.25.71.9, 207.25.71.12, 207.25.71.20, 207.25.71.22, 207.25.71.23207.25.71.24, 207.25.71.25, 207.25.71.26, 207.25.71.27, 207.25.71.28207.25.71.29, 207.25.71.30, 207.25.71.82, 207.25.71.199, 207.25.71.245207.25.71.246% nslookup www.cnn.com
Name:    cnn.com
Addresses:  207.25.71.6, 207.25.71.7, 207.25.71.8, 207.25.71.9207.25.71.12, 207.25.71.20, 207.25.71.22, 207.25.71.23, 207.25.71.24207.25.71.25, 207.25.71.26, 207.25.71.27, 207.25.71.28, 207.25.71.29207.25.71.30, 207.25.71.82, 207.25.71.199, 207.25.71.245, 207.25.71.246207.25.71.5% nslookup www.cnn.com
Name:    cnn.com
Addresses:  207.25.71.7, 207.25.71.8, 207.25.71.9, 207.25.71.12207.25.71.20, 207.25.71.22, 207.25.71.23, 207.25.71.24, 207.25.71.25207.25.71.26, 207.25.71.27, 207.25.71.28, 207.25.71.29, 207.25.71.30207.25.71.82, 207.25.71.199, 207.25.71.245, 207.25.71.246, 207.25.71.5207.25.71.6
In Example 20-2:• The first address of the first DNS lookup is 207.25.71.5.• The first address of the second DNS lookup is 207.25.71.6.• The first address of the third DNS lookup is 207.25.71.7.|

DNS round robin for load balancing
Because most DNS clients just use the first address, the DNS rotation serves to bal-ance load among servers. If DNS did not rotate the addresses, most clients wouldalways send load to the first client.
Figure 20-3 shows how DNS round-robin rotation acts to balance load:• WhenAlice tries to connect to www.cnn.com, she looks up the IP address using
DNSandgetsback207.25.71.5 as the first IP address. Alice connects to the webserver 207.25.71.5 in Figure 20-3c.• When Bob subsequently tries to connect to www.cnn.com, he also looks up the
IP address using DNS, but he gets back a different result because the address listhas been rotated one position, based on Alice’s previous request. Bob gets back207.25.71.6 as the first IP address, and he connects to this server in Figure 20-3f.(a) Alice asks DNS for IP address of www.cnn.com(b) DNS replies with 207.25.71.5(c) A    207.25.71.5    207.25.71.6    207.25.71.7licesendsH
TTPrequestt
Alice                              o207.25.71.5              DNS server
Internet
Bob
Internet
Alice(d) Bob asks DNS for IP address of www.cnn.com(e) DNS replies with 207.25.71.6                    207.25.71.5    207.25.71.6    207.25.71.7(f) BobsendsHTTPr DNS servere
Bob                        quest to207.25.71.6
Figure 20-3. DNS round robin load balances across servers in a server farm
The impact of DNS caching
DNSaddress rotation spreads the load around, because each DNS lookup to a servergets a different ordering of server addresses. However, this load balancing isn’t per-fect, because the results of the DNS lookup may be memorized and reused by applica-tions, operating systems, and some primitive child DNS servers. Many web browsers|
perform a DNS lookup for a host but then use the same address over and over again,to eliminate the cost of DNS lookups and because some servers prefer to keep talkingto the same client. Furthermore, many operating systems perform the DNS lookupautomatically, and cache the result, but don’t rotate the addresses. Consequently,
DNSroundrobingenerallydoesn’t balance the load of a single client—one client typ-ically will be stuck to one server for a long period of time.
But, even though DNS doesn’t deal out the transactions of a single client acrossserver replicas, it does a decent job of spreading the aggregate load of multiple cli-ents. As long as there is a modestly large number of clients with similar demand, theload will be relatively well distributed across servers.
Other DNS-based redirection algorithms
We’ve already discussed how DNS rotates address lists with each request. However,some enhanced DNS servers use other techniques for choosing the order of theaddresses:
Load-balancing algorithms
SomeDNSservers keep track of the load on the web servers and place the least-loaded web servers at the front of the list.
Proximity-routing algorithms
DNSservers can attempt to direct users to nearby web servers, when the farm ofweb servers is geographically dispersed.
Fault-masking algorithms
DNS servers can monitor the health of the network and route requests awayfrom service interruptions or other faults.
Typically, the DNS server that runs sophisticated server-tracking algorithms is anauthoritative server that is under the control of the content provider (see Figure 20-4).
Several distributed hosting services use this DNS redirection model. One drawbackof the model for services that look for nearby servers is that the only information thatthe authoritative DNS server uses to make its decision is the IP address of the local
DNS server, not the IP address of the client.
Anycast Addressing
In anycast addressing, several geographically dispersed web servers have the exactsame IP address and rely on the “shortest-path” routing capabilities of backbonerouters to send client requests to the server nearest to the client. One way thismethod can work is for each web server to advertise itself as a router to a neighbor-ing backbone router. The web server talks to its neighboring backbone router using arouter communication protocol. When the backbone router receives packets aimedat the anycast address, it looks (as it usually would) for the nearest “router” that|
erv                eroot ser           e servom ress fr                        Root DNS serveress of authoritivequest IP addr
R(b)              Sends IP addr(c) om.cnn.c                    (d) Request IP addressess for www             (e) Returns IP address 207.25.71.5equest IP addr                       Local DNS server                Authoritative DNS server
R(a)       monitors cnn servers(f) SendH
TT
Preq
Alice                          uest toserver at 207.25.71.5www.cnn.com            www.cnn.com           www.cnn.com(207.25.71.5)         (207.25.71.6)         (207.25.71.7)
Figure 20-4. DNS request involving authoritative serveraccepts that IP address. Because the server will have advertised itself as a router forthat address, the backbone router will send the server the packet.
In Figure 20-5, three servers front the same IP address, 10.10.10.1. The Los Angeles(LA) server advertises this address to the LA router, the New York (NY) server adver-tises the same address to the NY router, and so on. The servers communicate withthe routers using a router protocol. The routers automatically route client requestsaimed at 10.10.10.1 to the nearest server that advertises the address. In Figure 20-5,a request for the IP address 10.10.10.1 will be routed to server 3.www.joes-hardware.com
Backbone network
Router                   10.10.10.1
Client                   Server 1
Switch                                Router
Router            www.joes-hardware.com
Client
Edge network                         www.joes-hardware.com10.10.10.1
Server 210.10.10.1
Server 3
Figure 20-5. Distributed anycast addressing|

Anycast addressing is still an experimental technique. For distributed anycast towork, the servers must “speak router language” and the routers must be able to han-dle possible address conflicts, because Internet addressing basically assumes oneserver for one address. (If done improperly, this can lead to serious problems knownas “route leaks.”) Distributed anycast is an emerging technology and might be a solu-tion for content providers who control their own backbone networks.
IP MAC Forwarding
In Ethernet networks, HTTP messages are sent in the form of addressed data pack-ets. Each packet has a layer-4 address, consisting of the source and destination IPaddress and TCP port numbers; this is the address to which layer 4–aware devicespay attention. Each packet also has a layer-2address, the Media Access Control(MAC) address, to which layer-2devices (commonly switches and hubs) pay atten-tion. The job of layer-2devices is to receive packets with particular incoming MACaddresses and forward them to particular outgoing MAC addresses.
In Figure 20-6, for example, the switch is programmed to send all traffic from MACaddress “MAC3” to MAC address “MAC4.”
Client MAC1
To Internet
Hub MAC3              Switch MAC4
Gateway MAC5
Client MAC2
Figure 20-6. Layer-2 switch sending client requests to a gateway
A layer 4–aware switch is able to examine the layer-4 addressing (IP addresses and
TCP port numbers) and make routing decisions based on this information. Forexample, a layer-4 switch could send all port 80–destined web traffic to a proxy. In
Figure 20-7, the switch is programmed to send all port 80 traffic from MAC3 to
MAC6 (a proxy cache). All other MAC3 traffic goes to MAC5.
Typically, if the requested HTTP content is in the cache and is fresh, the proxy cacheserves it; otherwise, the proxy cache sends an HTTP request to the origin server forthe content, on the client’s behalf. The switch sends port 80 requests from the proxy(MAC6) to the Internet gateway (MAC5).
Layer-4 switches that support MAC forwarding usually can forward requests to sev-eral proxy caches and balance the load among them. Likewise, HTTP traffic also canbe forwarded to alternate HTTP servers.|

Client MAC1
To Internet
Hub MAC3            Switch MAC4
Gateway MAC5
Client MAC2                 Port 80 traffic
Caching proxy MAC6
Figure 20-7. MAC forwarding using a layer-4 switch
Because MAC address forwarding is point-to-point only, the server or proxy has tobe located one hop away from the switch.
IP Address Forwarding
In IP address forwarding, a switch or other layer 4–aware device examines TCP/IPaddressing on incoming packets and routes packets accordingly by changing the des-tination IP address, instead of the destination MAC address. An advantage over
MAC forwarding is that the destination server need not be one hop away; it justneeds to be located upstream from the switch, and the usual layer-3 end-to-end
Internet routing gets the packet to the right place. This type of forwarding also iscalled Network Address Translation (NAT).
There is a catch, however: routing symmetry. The switch that accepts the incoming
TCP connection from the client is managing that connection; the switch must sendthe response back to the client on that TCP connection. Therefore, any responsefrom the destination server or proxy must return to the switch (see Figure 20-8).
Destinationproxy               Backbone network
Joe's server
Client
Router  Joe's edge
Switch                          network
Client
Client edgenetwork
Figure 20-8. A switch doing IP forwarding to a caching proxy or mirrored web server|

Two ways to control the return path of the response are:• Change the source IP address of the packet to the IP address of the switch. Thatway, regardless of the network configuration between the switch and server, theresponse packet goes to the switch. This is called full NAT, where the IP for-warding device translates both destination and source IP addresses. Figure 20-9shows the effect of full NAT on a TCP/IP datagram. The consequence is that theclient IP address is unknown to the web server, which might want it for authenti-cation or billing purposes, for example.• If the source IP address remains the client’s IP address, make sure (from a hard-ware perspective) that no routes exist directly from server to client (bypassingthe switch). This sometimes is called half NAT. The advantage here is that theserver obtains the client IP address, but the disadvantage is the requirement ofsome control of the entire network between client and server.
From:Client:                               From:NAT device:1.1.1.1  Passes through network address    3.3.3.380                To:Joe’s Server:        translation (NAT) device          80                To:Proxy:2.2.2.2   4.4.4.480        80ta       ta
HTTP da   HTTP da
Figure 20-9. Full NAT of a TCP/IP datagram
Network Element Control Protocol
The Network Element Control Protocol (NECP) allows network elements (NEs)—devices such as routers and switches that forward IP packets—to talk with server ele-ments (SEs)—devices such as web servers and proxy caches that serve applicationlayer requests. NECP does not explicitly support load balancing; it only offers a wayfor an SE to send an NE load-balancing information so that the NE can load balanceas it sees fit. Like WCCP, NECP offers several ways to forward packets: MAC for-warding, GRE encapsulation, and NAT.
NECPsupports the idea of exceptions. The SE can decide that it cannot service par-ticular source IP addresses, and send those addresses to the NE. The NE can thenforward requests from those IP addresses to the origin server.
Messages
The NECP messages are described in Table 20-3.|

Table 20-3. NECP messages
Message                        Who sends it    Meaning
NECP_NOOP     No operation—do nothing.
NECP_INIT                      SE              SE initiates communication with NE. SE sends this message to NE afteropening TCP connection with NE. SE must know which NE port to con-nect to.
NECP_INIT_ACK                  NE              Acknowledges NECP_INIT.
NECP_KEEPALIVE                 NE or SE        Asks if peer is alive.
NECP_KEEPALIVE_ACK             NE or SE        Answers keep-alive message.
NECP_START                     SE              SE says “I am here and ready to accept network traffic.” Can specify aport.
NECP_START_ACK                 NE              Acknowledges NECP_START.
NECP_STOP                      SE              SE tells NE “stop sending me traffic.”
NECP_STOP_ACK                  NE              NE acknowledges stop.
NECP_EXCEPTION_ADD             SE              SE says to add one or more exceptions to NE’s list. Exceptions can bebased on source IP, destination IP, protocol (above IP), or port.
NECP_EXCEPTION_ADD_ACK         NE              Confirms EXCEPTION_ADD.
NECP_EXCEPTION_DEL             SE              Asks NE to delete one or more exceptions from its list.
NECP_EXCEPTION_DEL_ACK         NE              Confirms EXCEPTION_DEL.
NECP_EXCEPTION_RESET           SE              Asks NE to delete entire exception list.
NECP_EXCEPTION_RESET_ACK       NE              Confirms EXCEPTION_RESET.
NECP_EXCEPTION_QUERY           SE              Queries NE’s entire exception list.
NECP_EXCEPTION_RESP            NE              Responds to exception query.
Proxy Redirection Methods
So far, we have talked about general redirection methods. Content also may need tobe accessed through various proxies (potentially for security reasons), or there mightbe a proxy cache in the network that a client should take advantage of (because itlikely will be much faster to retrieve the cached content than it would be to godirectly to the origin server).
But how do clients such as web browsers know to go to a proxy? There are threeways to determine this: by explicit browser configuration, by dynamic automaticconfiguration, and by transparent interception. We will discuss these three tech-niques in this section.
Aproxycan,inturn,redirect client requests to a different proxy. For example, a proxycache that does not have the content in its cache may choose to redirect the client toanother cache. As this results in the response coming from a location different fromthe one from which the client requested the resource, we also will discuss several pro-tocols used for peer proxy-cache redirection: the Internet Cache Protocol (ICP), the
Cache Array Routing Protocol (CARP), and the Hyper Text Caching Protocol (HTCP).|

Explicit Browser Conﬁguration
Most browsers can be configured to contact a proxy server for content—there is apull-down menu where the user can enter the proxy’s name or IP address and portnumber. The browser then contacts the proxy for all requests. Rather than relying onusers to correctly configure their browsers to use proxies, some service providersrequire users to download preconfigured browsers. These browsers know the addressof the proxy to contact.
Explicit browser configuration has two main disadvantages:• Browsers configured to use proxies do not contact the origin server even if theproxy is not responding. If the proxy is down or if the browser is incorrectly con-figured, the user experiences connectivity problems.• It is difficult to make changes in network architecture and propagate thosechanges to all end users. If a service provider wants to add more proxies or takesome out of service, browser users have to change their proxy settings.
Proxy Auto-conﬁguration
Explicit configuration of browsers to contact specific proxies can restrict changes innetwork architecture, because it depends on users to intervene and reconfigure theirbrowsers. An automatic configuration methodology that allows browsers to dynami-cally configure themselves to contact the correct proxy server solves this problem.
Such a methodology exists; it is called the Proxy Auto-configuration (PAC) protocol.
PAC was defined by Netscape and is supported by the Netscape Navigator and
Microsoft Internet Explorer browsers.
The basic idea behind PAC is to have browsers retrieve a special file, called the PACfile, which specifies the proxy to contact for each URL. The browser must be config-ured to contact a specific server for the PAC file. The browser then fetches the PACfile every time it is restarted.
The PAC file is a JavaScript file, which must define the function:function FindProxyForURL(url, host)
Browsers call this function for every requested URL, as follows:return_value = FindProxyForURL(url_of_request, host_in_url);where the return value is a string specifying where the browser should request this
URL. The return value can be a list of the names of proxies to contact (for example,“PROXY proxy1.domain.com; PROXY proxy2.domain.com”) or the string“DIRECT”, which means that the browser should go directly to the origin server,bypassing any proxies.
Thesequenceofoperations that illustrate the request for and response to a browser’srequest for the PAC file are illustrated in Figure 20-10. In this example, the server|
sends back a PAC file with a JavaScript program. The JavaScript program has a func-tion called “FindProxyForURL” that tells the browser to contact the origin serverdirectly if the host in the requested URL is in the “netscape.com” domain, and to goto “proxy1.joes-cache.com” for all other requests. The browser calls this function foreach URL it requests and connects according to the results returned by the function.
Hi, I’ve been configured toask you for the PAC file.
Please send it to me.                     PAC server
HTTP/1.0 200 OK
Content-type: application/x-ns-proxy-autoconfig
Content-length: 176function FindProxyForURL(url,host){if (dnsDomain(host,".netscape.com")return "DIRECT";
Browser                   elsereturn "PROXY proxy1.joes-cache.com:8080; DIRECT";}
Requests to netscape.com domain are                         Go to the proxy1 if it is availablesent directly to the serveror go directly to the origin serverif proxy1 is not reachable
Internet
Origin server
Requests to all other domains aresent to proxy1.cache1.com                Proxy1
Figure 20-10. Proxy auto-configuration
The PAC protocol is quite powerful: the JavaScript program can ask the browser tochoose a proxy based on any of a number of parameters related to the hostname, suchas the DNS address and subnet, and even the day of week or time of day. PAC allowsbrowsers automatically to contact the right proxy with changes in network architec-ture, as long as the PAC file is updated at the server to reflect changes to the proxylocations. The main drawback with PAC is that the browser must be configured toknowwhichservertofetchthePACfilefrom,soitisnotacompletelyautomaticcon-figuration system. WPAD, discussed in the next section, addresses this problem.
PAC, like preconfigured browsers, is used by some major ISPs today.
Web Proxy Autodiscovery Protocol
The Web Proxy Autodiscovery Protocol (WPAD) aims to provide a way for webbrowsers to find and use nearby proxies, without requiring the end user to manually|
configure a proxy setting and without relying on transparent traffic interception. Thegeneral problem of defining a web proxy autodiscovery protocol is complicated bythe existence of many discovery protocols to choose from and the differences inproxy-use configurations in different browsers.
This section contains an abbreviated and slightly reorganized version of the WPAD
Internet draft. The draft currently is being developed as part of the Web Intermediar-ies Working Group of the IETF.
PAC ﬁle autodiscovery
WPADenablesHTTPclientstolocateaPACfileandusethePACfiletodiscoverthenameofanappropriateproxyserver.WPADdoesnotdirectlydeterminethenameofthe proxy server, because that would circumvent the additional capabilities providedby PAC files (load balancing, request routing to an array of servers, automatedfailover to backup proxy servers, and so on).
As shown in Figure20-11, the WPAD protocol discovers a PAC file URL, alsoknown as a configuration URL (CURL). The PAC file executes a JavaScript programthat returns the address of an appropriate proxy server.(b) Get PAC file
Internet
PAC server                              Proxy          Origin server(a) WPAD      (c) Access serverdiscovery      through proxy
HTTP client
Figure 20-11. WPAD determines the PAC URL, which determines the proxy server
An HTTP client that implements the WPAD protocol:• Uses WPAD to find the PAC file CURL• Fetches the PAC file (a.k.a. configuration file, or CFILE) corresponding to the
CURL• Executes the PAC file to determine the proxy server• Sends HTTP requests to the proxy server returned by the PAC file
WPAD algorithm
WPADuses a series of resource-discovery techniques to determine the proper PACfile CURL. Multiple discovery techniques are specified, because not all organizations|
can use all techniques. WPAD clients attempt each technique, one by one, until theysucceed in obtaining a CURL.
The current WPAD specification defines the following techniques, in order:• DHCP (Dynamic Host Discovery Protocol)• SLP (Service Location Protocol)• DNS well-known hostnames• DNS SRV records• DNS service URLs in TXT records
Of these five mechanisms, only the DHCP and DNS well-known hostname tech-niques are required for WPAD clients. We present more details in subsequentsections.
The WPAD client sends a series of resource-discovery requests, using the discoverymechanisms mentioned above, in order. Clients attempt only mechanisms that theysupport. Whenever a discovery attempt succeeds, the client uses the informationobtained to construct a PAC CURL.
If a PAC file is retrieved successfully at that CURL, the process completes. If not, theclient resumes where it left off in the predefined series of resource-discovery requests.
If, after trying all discovery mechanisms, no PAC file is retrieved, the WPAD proto-col fails and the client is configured to use no proxy server.
The client tries DHCP first, followed by SLP. If no PAC file is retrieved, the clientmoves on to the DNS-based mechanisms.
The client cycles through the DNS SRV, well-known hostnames, and DNS TXTrecord methods multiple times. Each time, the DNS query QNAME is made less andless specific. In this manner, the client can locate the most specific configurationinformation possible, but still can fall back on less specific information. Every DNSlookup has the QNAME prefixed with “wpad” to indicate the resource type beingrequested.
Consider a client with hostname johns-desktop.development.foo.com. This is thesequence of discovery attempts a complete WPAD client would perform:• DHCP• SLP• DNS A lookup on “QNAME=wpad.development.foo.com”• DNS SRV lookup on “QNAME=wpad.development.foo.com”• DNS TXT lookup on “QNAME=wpad.development.foo.com”• DNS A lookup on “QNAME=wpad.foo.com”• DNS SRV lookup on “QNAME=wpad.foo.com”• DNS TXT lookup on “QNAME=wpad.foo.com”|

Refer to the WPAD specification to get detailed pseudocode that addresses the entiresequence of operations. The following sections discuss the two required mecha-nisms, DHCP and DNS A lookup. For more details about the reminder of the CURLdiscovery methods, refer to the WPAD specification.
CURL discovery using DHCP
For this mechanism to work, the CURLs must be stored on DHCP servers that
WPADclients can query. The WPAD client obtains the CURL by sending a DHCPquery to a DHCP server. The CURL is contained in DHCP option code 252 (if the
DHCP server is configured with this information). All WPAD client implementa-tions are required to support DHCP. The DHCP protocol is detailed in RFC 2131.
See RFC 2132 for a list of existing DHCP options.
If the WPAD client already has conducted DHCP queries during its initialization, the
DHCP server might already have supplied that value. If the value is not availablethrough a client OS API, the client sends a DHCPINFORM message to query the
DHCP server to obtain the value.
The DHCP option code 252 for WPAD is of type STRING and is of arbitrary size.
This string contains a URL that points to an appropriate PAC file. For example:"http://server.domain/proxyconfig.pac"
DNS A record lookup
For this mechanism to work, the IP addresses of suitable proxy servers must bestored on DNS servers that the WPAD clients can query. The WPAD client obtainsthe CURL by sending an A record lookup to a DNS server. The result of a successfullookup contains an IP address for an appropriate proxy server.
WPADclient implementations are required to support this mechanism. This shouldbe straightforward, as only basic DNS lookup of A records is required. See RFC 2219for a description of using well-known DNS aliases for resource discovery. For WPAD,the specification uses “well known alias” of “wpad” for web proxy autodiscovery.
The client performs the following DNS lookup:
QNAME=wpad.TGTDOM., QCLASS=IN, QTYPE=A
Asuccessful lookup contains an IP address from which the WPAD client constructsthe CURL.
Retrieving the PAC ﬁle
Once a candidate CURL is created, the WPAD client usually makes a GET requestto the CURL. When making requests, WPAD clients are required to send Acceptheaders with appropriate CFILE format information that they are capable of han-dling. For example:
Accept: application/x-ns-proxy-autoconfig|

In addition, if the CURL results in a redirect, the clients are required to follow theredirect to its final destination.
When to execute WPAD
The web proxy autodiscovery process is required to occur at least as frequently asone of the following:• Upon startup of the web client—WPAD is performed only for the start of thefirst instance. Subsequent instances inherit the settings.• Wheneverthereis an indication from the networking stack that the IP address ofthe client host has changed.
A web client can use either option, depending on what makes sense in its environ-ment. In addition, the client must attempt a discovery cycle upon expiration of a pre-viously downloaded PAC file in accordance with HTTP expiration. It’s important thatthe client obey the timeouts and rerun the WPAD process when the PAC file expires.
Optionally, the client also may implement rerunning the WPAD process on failure ofthe currently configured proxy if the PAC file does not provide an alternative.
Whenever the client decides to invalidate the current PAC file, it must rerun theentire WPAD protocol to ensure it discovers the currently correct CURL. Specifi-cally, there is no provision in the protocol to do an If-Modified-Since conditionalfetch of the PAC file.
A number of network round trips might be required during the WPAD protocolbroadcast and/or multicast communications. The WPAD protocol should not beinvoked at a more frequent rate than specified above (such as per-URL retrieval).
WPAD spooﬁng
The IE 5 implementation of WPAD enabled web clients to detect proxy settingsautomatically, without user intervention. The algorithm used by WPAD prependsthe hostname “wpad” to the fully qualified domain name and progressively removessubdomains until it either finds a WPAD server answering the hostname or reachesthe third-level domain. For instance, web clients in the domain a.b.microsoft.comwould query wpad.a.b.microsoft, wpad.b.microsoft.com, then wpad.microsoft.com.
This exposed a security hole, because in international usage (and certain other con-figurations), the third-level domain may not be trusted. A malicious user could set upa WPADserver and serve proxy configuration commands of her choice. Subsequentversions of IE (5.01 and later) rectified the problem.
Timeouts
WPADgoesthrough multiple levels of discovery, and clients must make sure thateach phase is time-bound. When possible, limiting each phase to 10 seconds is|
considered reasonable, but implementors may choose a different value that is moreappropriate to their network properties. For example, a device implementation,operating over a wireless network, might use a much larger timeout to account forlow bandwidth or high latency.
Administrator considerations
Administrators should configure at least one of the DHCP or DNS A record lookupmethods in their environments, as those are the only two that all compatible clientsare required to implement. Beyond that, configuring to support mechanisms earlierin the search order will improve client startup time.
One of the major motivations for this protocol structure was to support client loca-tion of nearby proxy servers. In many environments, there are several proxy servers(workgroup, corporate gateway, ISP, backbone).
There are a number of possible points at which “nearness” decisions can be made inthe WPAD framework:• DHCP servers for different subnets can return different answers. They also canbase decisions on the client cipaddr field or the client identifier option.• DNS servers can be configured to return different SRV/A/TXT resource records(RRs) for different domain suffixes (for example, QNAMEs wpad.marketing.big-corp.com and wpad.development.bigcorp.com).• The web server handling the CURL request can make decisions based on the
User-Agent header, Accept header, client IP address/subnet/hostname, topologi-cal distribution of nearby proxy servers, etc. This can occur inside a CGI execut-able created to handle the CURL. As mentioned earlier, it even can be a proxyserver handling the CURL requests and making these decisions.• The PAC file may be expressive enough to select from a set of alternatives atruntime on the client. CARP is based on this premise for an array of caches. It isnot inconceivable that the PAC file could compute some network distance or fit-ness metrics to a set of candidate proxy servers and then select the “closest” or“most responsive” server.
Cache Redirection Methods
We’ve discussed techniques to redirect traffic to general servers and specialized tech-niques to vector traffic to proxies and gateways. This final section will explain someof the more sophisticated redirection techniques used for caching proxy servers.
These techniques are more complex than the previously discussed protocols becausethey try to be reliable, high-performance, and content-aware—dispatching requeststo locations likely to have particular pieces of content.|

WCCP Redirection
Cisco Systems developed the Web Cache Coordination Protocol (WCCP) to enablerouters to redirect web traffic to proxy caches. WCCP governs communicationbetween routers and caches so that routers can verify caches (make sure they are upand running), load balance among caches, and send specific types of traffic to specificcaches. WCCP Version 2 (WCCP2) is an open protocol. We’ll discuss WCCP2 here.
How WCCP redirection works
Here’s a brief overview of how WCCP redirection works for HTTP (WCCP redirectsother protocols similarly):• Start with a network containing WCCP-enabled routers and caches that cancommunicate with one another.• Aset of routers and their target caches form a WCCP service group. The config-uration of the service group specifies what traffic is sent where, how traffic issent, and how load should be balanced among the caches in the service group.• If the service group is configured to redirect HTTP traffic, routers in the servicegroup send HTTP requests to caches in the service group.• WhenanHTTPrequestarrivesatarouterintheservice group, the router choosesone of the caches in the service group to serve the request (based on either a hashon the request’s IP address or a mask/value set pairing scheme).• The router sends the request packets to the cache, either by encapsulating thepackets with the cache’s IP address or by IP MAC forwarding.• If the cache cannot serve the request, the packets are returned to the router fornormal forwarding.• The members of the service group exchange heartbeat messages with oneanother, continually verifying one another’s availability.
WCCP2 messages
There are four WCCP2 messages, described in Table 20-4.
Table 20-4. WCCP2 messages
Message name            Who sends it            Information carried
WCCP2_HERE_I_AM         Cache to router         These messages tell routers that caches are available to receivetraffic. The messages contain all of the cache’s service groupinformation. As soon as a cache joins a service group, it sendsthese messages to all routers in the group. These messagesnegotiatewithrouterssendingWCCP2_I_SEE_YOUmessages.
WCCP2_I_SEE_YOU         Router to cache         These messages respond to WCCP2_HERE_I_AM messages.
They are used to negotiate the packet forwarding method,assignment method (who is the designated cache), packetreturn method, and security.|

Table 20-4. WCCP2 messages (continued)
Message name                     Who sends it                  Information carried
WCCP2_REDIRECT_ASSIGN            Designated cache to           These messages make assignments for load balancing; theyrouter                        sendbucketinformationforhashtableloadbalancingormask/value set pair information for mask/value load balancing.
WCCP2_REMOVAL_QUERY              Router to cache that has      If a router does not receive WCCP2_HERE_I_AMmessagesreg-not sent WCCP2_HERE_          ularly, the router sends this message to see if the cache should
I_AM messages for 2.5×        beremovedfromtheservicegroup.Theproperresponsefroma
HERE_I_AM_T seconds           cache is three identical WCCP2_HERE_I_AM messages, sepa-rated by HERE_I_AM_T/10 seconds.
The WCCP2_HERE_I_AM message format is:
WCCP Message Header
Security Info Component
Service Info Component
Web-cache Identity Info Component
Web-cache View Info Component
Capability Info Component (optional)
Command Extension Component (optional)
The WCCP2_I_SEE_YOU message format is:
WCCP Message Header
Security Info Component
Service Info Component
Router Identity Info Component
Router View Info Component
Capability Info Component (optional)
Command Extension Component (optional)
The WCCP2_REDIRECT_ASSIGN message format is:
WCCP Message Header
Security Info Component
Service Info Component
Assignment Info Component, or Alternate Assignment Component
The WCCP2_REMOVAL_QUERY message format is:
WCCP Message Header
Security Info Component
Service Info Component
Router Query Info Component
Message components
EachWCCP2messageconsistsofaheaderandcomponents.TheWCCPheaderinfor-mation contains the message type (Here I Am, I See You, Assignment, or Removal
Query), WCCP version, and message length (not including the length of the header).
The components each begin with a four-octet header describing the component typeand length. The component length does not include the length of the componentheader. The message components are described in Table 20-5.|

Table 20-5. WCCP2 message components
Component                             Description
Security Info                         Contains the security option and security implementation. The security option can be:
WCCP2_NO_SECURITY (0)
WCCP2_MD5_SECURITY (1)
If the option is no security, the security implementation field does not exist. If the option is
MD5, the security implementation field is a 16-octet field containing the message check-sum and Service Group password. The password can be no more than eight octets.
Service Info                          Describes the service group. The service type ID can have two values:
WCCP2_SERVICE_STANDARD (0)
WCCP2_SERVICE_DYNAMIC (1)
If the service type is standard, the service is a well-known service, defined entirely by ser-vice ID. HTTP is an example of a well-known service. If the service type is dynamic, the fol-lowing settings define the service: priority, protocol, service flags (which determinehashing), and port.
Router Identity Info                  Contains the router IP address and ID, and lists (by IP address) all of the web caches withwhich the router intends to communicate.
Web Cache Identity Info               Contains the web cache IP address and redirection hash table mapping.
Router View Info                      Contains the router’s view of the service group (identities of the routers and caches).
Web Cache View Info                   Contains the web cache’s view of the service group.
Assignment Info                       Shows the assignment of a web cache to a particular hashing bucket.
Router Query Info                     Containstherouter’sIPaddress,addressofthewebcachebeingqueried,andIDofthelastrouter in the service group that received a Here I Am message from the web cache.
Capabilities Info                     Usedbyrouterstoadvertisesupportedpacketforwarding,loadbalancing,andpacketreturnmethods; used by web caches to let routers know what method the web cache prefers.
Alternate Assignment                  Contains hash table assignment information for load balancing.
Assignment Map                        Contains mask/value set elements for service group.
Command Extension                     Usedbywebcachestotellrouterstheyareshuttingdown;usedbyrouterstoacknowledgea cache shutdown.
Service groups
Aservice group consists of a set of WCCP-enabled routers and caches that exchange
WCCPmessages.Therouterssendwebtraffictothecachesintheservicegroup.Theconfiguration of the service group determines how traffic is distributed to caches inthe service group. The routers and caches exchange service group configurationinformation in Here I Am and I See You messages.
GRE packet encapsulation
Routers that support WCCP redirect HTTP packets to a particular server by encap-sulating them with the server’s IP address. The packet encapsulation also contains an
IP header proto field that indicates Generic Router Encapsulation (GRE). The exist-ence of the proto field tells the receiving proxy that it has an encapsulated packet.|

Because the packet is encapsulated, the client IP address is not lost. Figure 20-12illustrates GRE packet encapsulation.
To Proxy:              Proto:GRE3.3.3.38080
From:Client:                            From:Client:1.1.1.11.1.1.180               To:Joe’s Server:      Passes through WCCP router        80               To:Joe’s Server:2.2.2.22.2.2.280     80tata                              HTTP da
HTTP da
Figure 20-12. How a WCCP router changes an HTTP packet’s destination IP address
WCCP load balancing
In addition to routing, WCCP routers can balance load among several receiving serv-ers. WCCP routers and their receiving servers exchange heartbeat messages to let oneanother know they are up and running. If a particular receiving server stops sendingheartbeat messages, the WCCP router sends request traffic directly to the Internet,instead of redirecting it to that node. When the node returns to service, the WCCProuter begins receiving heartbeat messages again and resumes sending request trafficto the node.
Internet Cache Protocol
The Internet Cache Protocol (ICP) allows caches to look for content hits in siblingcaches. If a cache does not have the content requested in an HTTP message, it canfind out if the content is in a nearby sibling cache and, if so, retrieve the content fromthere, hopefully avoiding a more costly query to an origin server. ICP can be thoughtof as a cache clustering protocol. It is a redirection protocol in the sense that the finaldestination of an HTTP request message can be determined by a series of ICP queries.
ICP is an object discovery protocol. It asks nearby caches, all at the same time, if anyof them have a particular URL in their caches. The nearby caches send back a shortmessage saying “HIT” if they have that URL or “MISS” if they don’t. The cache isthen free to open an HTTP connection to a neighbor cache that has the object.
ICP is simple and lightweight. ICP messages are 32-bit packed structures in net-work byte order, making them easy to parse. They are carried in UDP datagrams for|
efficiency. UDP is an unreliable Internet protocol, which means that the data can getdestroyed in transit, so programs that speak ICP need to have timeouts to detect lostdatagrams.
Here is a brief description of the parts of an ICP message:
Opcode
The opcode is an 8-bit value that describes the meaning of the ICP message.
Basic opcodes are ICP_OP_QUERY request messages and ICP_OP_HIT and
ICP_OP_MISS response messages.
Version
The8-bit version number describes the version number of the ICP protocol. Theversion of ICP used by Squid, documented in Internet RFC 2186, is Version 2.
Message length
Thetotal size in bytes of the ICP message. Because there are only 16 bits, the ICPmessage size cannot be larger than 16,383 bytes. URLs usually are shorter than16 KB; if they’re longer than that, many web applications will not process them.
Request number
ICP-enabled caches use the request number to keep track of multiple simulta-neous requests and replies. An ICP reply message always must contain the samerequest number as the ICP request message that triggered the reply.
Options
The 32-bit ICP options field is a bit vector containing flags that modify ICPbehavior. ICPv2defines two flags, both of which modify ICP_OP_QUERYrequests. The ICP_FLAG_HIT_OBJflag enables and disables the return of docu-ment data in ICP responses. The ICP_FLAG_SRC_RTT flag requests an esti-mate of the round-trip time to the origin server, as measured by a sibling cache.
Option data
The 32-bit option data is reserved for optional features. ICPv2 uses the low 16bits of the option data to hold an optional round-trip time estimate from the sib-ling to the origin server.
Sender host address
A historic field carrying the 32-bit IP address of the message sender; not used inpractice.
Payload
The contents of the payload vary depending on the message type. For ICP_OP_
QUERY, the payload is a 4-byte original requester host address followed by a
NUL-terminated URL. For ICP_OP_HIT_OBJ, the payload is a NUL-terminated
URL followed by a 16 bit object size, followed by the object data.
For more information about ICP, refer to informational RFCs 2186 and 2187. Excel-lent ICP and peering references also are available from the U.S. National Laboratoryfor Applied Network Research (http://www.nlanr.net/Squid/).|

Cache Array Routing Protocol
Proxy servers greatly reduce traffic to the Internet by intercepting requests from indi-vidual users and serving cached copies of the requested web objects. However, asthe number of users grows, a high volume of traffic can overload the proxy serversthemselves.
Onesolution to this problem is to use multiple proxy servers to distribute the load toa collection of servers. The Cache Array Routing Protocol (CARP) is a standard pro-posed by Microsoft Corporation and Netscape Communication Corporation toadminister a collection of proxy servers such that an array of proxy servers appears toclients as one logical cache.
CARPis an alternative to ICP. Both CARP and ICP allow administrators to improveperformance by using multiple proxy servers. This section discusses how CARP dif-fers from ICP, the advantages and disadvantages of using CARP over ICP, and thetechnical details of how the CARP protocol is implemented.
Uponacachemissin ICP, the proxy server queries neighboring caches using an ICPmessage format to determine the availability of the web object. The neighboringcaches respond with either a “HIT” or a “MISS,” and the requesting proxy serveruses these responses to select the most appropriate location from which to retrievethe object. If the ICP proxy servers were arranged in a hierarchical fashion, a misswould be elevated to the parent. Figure 20-13 diagrammatically shows how hits andmisses are resolved using ICP.
Hit or miss reply(time n+1)
Sibling)noll (time      Parent of proxy is polled if the
P              siblings return a MISS
Client request                    Request (time n+2)
Internet
Browser                     Caching proxy                     Parent
Poll (time n)
Hit or miss reply(time n+1)
Sibling
Figure 20-13. ICP queries|

Note that each of the proxy servers, connected together using the ICP protocol, is astandalone cache server with redundant mirrors of content, meaning that duplicateentries of web objects across proxy servers is possible. In contrast, the collection ofservers connected using CARP operates as a single, large server with each compo-nent server containing only a fraction of the total cached documents. By applying ahash function to the URL of a web object, CARP maps web objects to a specificproxy server. Because each web object has a unique home, we can determine thelocation of the object by a single lookup, rather than polling each of the proxy serv-ers configured in the collection. Figure 20-14 summarizes the CARP approach.
Sibling
Client request                               Request (time n+2)
Internet
Browser                              Caching proxyParent( Time 
Hash function used to decidewhich sibling proxy cache                      n)to contact
Response(time n+1)
Sibling
Figure 20-14. CARP redirection
Although Figure 20-14 shows the caching proxy as being the intermediary betweenclients and proxy servers that distributes the load to the various proxy servers, it ispossible for this function to be served by the clients themselves. Commercial brows-ers such as Internet Explorer and Netscape Navigator can be configured to computethe hash function in the form of a plug-in that determines the proxy server to whichthe request should be sent.
Deterministic resolution of the proxy server in CARP means that it isn’t necessary tosend queries to all the neighbors, which means that this method requires fewer inter-cache messages to be sent out. As more proxy servers are added to the configura-tion, the collective cache system will scale fairly well. However, a disadvantage of
CARP is that if one of the proxy servers becomes unavailable, the hash functionneeds to be modified to reflect this change, and the contents of the proxy serversmust be reshuffled across the existing proxy servers. This can be expensive if theproxy server crashes often. In contrast, redundant content in ICP proxy servers|
means that reshuffling is not required. Another potential problem is that, because
CARP is a new protocol, existing proxy servers running only the ICP protocol maynot be included readily in a CARP collection.
Having described the difference between CARP and ICP, let us now describe CARPin a little more detail. The CARP redirection method involves the following tasks:• Keep a table of participating proxy servers. These proxy servers are polled peri-odically to see which ones are still active.• For each participating proxy server, compute a hash function. The valuereturned by the hash function takes into account the amount of load this proxycan handle.• Define a separate hash function that returns a number based on the URL of therequested web object.• Take the sum of the hash function of the URL and the hash function of theproxy servers to get an array of numbers. The maximum value of these numbersdetermines the proxy server to use for the URL. Because the computed values aredeterministic, subsequent requests for the same web object will be forwarded tothe same proxy server.
These four chores can either be carried out on the browser, in a plug-in, or be com-puted on an intermediate server.
For each collection of proxy servers, create a table listing all of the servers in the col-lection. Each entry in the table should contain information about load factors, time-to-live (TTL) countdown values, and global parameters such as how often membersshould be polled. The load factor indicates how much load that machine can han-dle, which depends on the CPU speed and hard drive capacity of that machine. Thetable can be maintained remotely via an RPC interface. Once the fields in the tableshave been updated by RPC, they can be made available or published to downstreamclients and proxies. This publication is done in HTTP, allowing any client or proxyserver to consume the table information without introducing another inter-proxyprotocol. Clients and proxy servers simply use a well-known URL to retrieve thetable.
The hash function used must ensure that the web objects are statistically distributedacross the participating proxy servers. The load factor of the proxy server should beused to determine the statistic probability of a web object being assigned to thatproxy.
In summary, the CARP protocol allows a group of proxy servers to be viewed as sin-gle collective cache, instead of a group of cooperating but separate caches (as in ICP).
A deterministic request resolution path finds the home of a specific web objectwithin a single hop. This eliminates the inter-proxy traffic that often is generated to|
find the web object in a group of proxy servers in ICP. CARP also avoids duplicatecopies of web objects being stored on different proxy servers, which has the advan-tage that the cache system collectively has a larger capacity for storing web objectsbut also has the disadvantage that a failure in any one proxy requires reshufflingsome of the cache contents to existing proxies.
Hyper Text Caching Protocol
Earlier, we discussed ICP, a protocol that allows proxy caches to query siblingsabout the presence of documents. ICP, however, was designed with HTTP/0.9 inmind and therefore allows caches to send just the URL when querying a siblingabout the presence of a resource. Versions 1.0 and 1.1 of HTTP introduced manynew request headers that, along with the URL, are used to make decisions aboutdocument matching, so simply sending the URL in a request may not result in accu-rate responses.
The Hyper Text Caching Protocol (HTCP) reduces the probability of false hits byallowing siblings to query each other for the presence of documents using the URLand all of the request and response headers. Further, HTCP allows sibling caches tomonitor and request the addition and deletion of selected documents in eachother’s caches and to make changes in the caching policies of each other’s cacheddocuments.
Figure 20-13, which illustrates an ICP transaction, also can be used to illustrate an
HTCP transaction—HTCP is just another object discovery protocol. If a nearbycache has the document, the requesting cache can open an HTTP connection to thecache to get a copy of the document. The difference between an ICP and an HTCPtransaction is in the level of detail in the requests and responses.
The structure of HTCP messages is illustrated in Figure 20-15. The Header portionincludes the message length and message versions. The Data portion starts with thedata length and includes opcodes, response codes, and some flags and IDs, and it ter-minates with the actual data. An optional Authentication section may follow the
Data section.
Details of the message fields are as follows:
Header
The Header section consists of a 32-bit message length, an 8-bit major protocolversion, and an 8-bit minor protocol version. The message length includes all ofthe header, data, and authentication sizes.
Data
TheDatasection contains the HTCP message and has the structure illustrated in
Figure 20-15. The data components are described in Table 20-6.|
031
Message length
Major version       Minor version               Data length
Opcode          Response code             Reserved           F1 RR
Transaction ID
Opcode data
Auth length                            Sig time
Sig time                            Sig expire
Sig expire                           Key name
Key name
Signature
Figure 20-15. HTCP message format
Table 20-6. HTCP data components
Component                     Description
Data length                   A 16-bit value of the number of bytes in the Data section including the length of the Length fielditself.
Opcode                        The 4-bit operation code for the HTCP transaction. The full list of opcodes is provided in
Table20-7.
Response code                 A 4-bit key indicating the success or failure of the transaction. The possible values are:• 0—Authentication was not used, but is needed• 1—Authentication was used, but is not satisfactory• 2—Unimplemented opcode• 3—Major version not supported• 4—Minor version not supported• 5—Inappropriate, disallowed, or undesirable opcode
F1                            F1isoverloaded—ifthemessageisarequest,F1isa1-bitflagsetbytherequestorindicatingthatitneeds a response (F1=1); if the message is a response, F1 is a 1-bit flag indicating whether theresponse is to be interpreted as a response to the overall message (F1=1) or just as a response tothe Opcode data fields (F1=0).
RR                            A 1-bit flag indicating that the message is a request (RR=0) or a response (RR=1).
Transaction ID                A 32-bit value that, combined with the requestor’s network address, uniquely identifies the HTCPtransaction.
Opcode data                   Opcode data is opcode-dependent. See Table20-7.|

Table 20-7 lists the HTCP opcodes and their corresponding data types.
Table 20-7. HTCP opcodes
Opcode           Value         Description      Response codes                          Opcode data
NOP              0             Essentially a “ping” operation.                   Always 0                                None
TST              1                              0 if entity is present, 1 if            Contains the URL andentity is not present                   request headers in therequest and justresponse headers inthe response
MON              2                              0 if accepted, 1 if refused
SET              3             The SET message allows caches to                  0 if accepted, 1 if ignoredrequest changes in caching policies.
SeeTable20-9foralistoftheheadersthat can be used in SET messages.
CLR              4                              0ifIhadit,butit’snowgone;1 if I had it, but I am keepingit; and 2 if I didn’t have it
HTCP Authentication
The authentication portion of the HTCP message is optional. Its structure is illus-trated in Figure 20-15, and its components are described inTable 20-8.
Table 20-8. HTCP authentication components
Component                      Description
Auth length                    The 16-bit number of bytes in the Authentication section of the message, including the length ofthe Length field itself.
Sig time                       A 32-bit number representing the number of seconds since 00:00:00 Jan 1, 1970 GMT at the timethat the signature is generated.
Sig expire                     A32-bitnumberrepresentingthenumberofsecondssince00:00:00Jan1,1970GMTwhenthesig-nature will expire.
Key name                       Astringthatspecifiesthenameofthesharedsecret.TheKeysectionhastwoparts:the16-bitlengthin bytes of the string that follows, followed by the stream of uninterrupted bytes of the string.
Signature                      The HMAC-MD5 digest with a B value of 64 (representing the source and destination IP addressesand ports), the major and minor HTCP versions of the message, the Sig time and Sig expires values,the full HTCP data, and the key. The Signature also has two parts: the 16-bit length in bytes of thestring, followed by the string.
Setting Caching Policies
The SET message allows caches to request changes in the caching policies of cacheddocuments.TheheadersthatcanbeusedinSETmessagesaredescribedinTable20-9.|

Table 20-9. List of Cache headers for modifying caching policies
Header                  Description
Cache-Vary              The requestor has learned that the content varies on a set of headers different from the set in theresponse Vary header. This header overrides the response Vary header.
Cache-Location          The list of proxy caches that also may have copies of this object.
Cache-Policy            The requestor has learned the caching policies for this object in more detail than is specified in theresponse headers. Possible values are: “no-cache,” meaning that the response is not cacheable butmay be shareable among simultaneous requestors; “no-share,” meaning that the object is notshareable; and “no-cache-cookie,” meaning that the content may change as a result of cookies andcaching therefore is not advised.
Cache-Flags             The requestor has modified the object’s caching policies and the object may have to be treated spe-cially and not necessarily in accordance with the object’s actual policies.
Cache-Expiry            The actual expiration time for the document as learned by the requestor.
Cache-MD5               Therequestor-computedMD5checksumoftheobject,whichmaybedifferentfromthevalueinthe
Content-MD5 header, or may be supplied because the object does not have a Content-MD5 header.
Cache-to-Origin         Therequestor-measuredround-triptimetoanoriginserver.Theformatofthevaluesinthisheaderis <origin server name or ip> <average round-trip time in seconds> <number of samples> <num-ber of router hops between requestor and origin server>.
By allowing request and response headers to be sent in query messages to siblingcaches, HTCP can decrease the false-hit rate in cache queries. By further allowingsibling caches to exchange policy information with each other, HTCP can improvesibling caches’ ability to cooperate with each other.
For More Information
For more information, consult the following references:
DNS and Bind
Cricket Liu, Paul Albitz, and Mike Loukides, O’Reilly & Associates, Inc.http://www.wrec.org/Drafts/draft-cooper-webi-wpad-00.txt“Web Proxy Auto-Discovery Protocol.”http://home.netscape.com/eng/mozilla/2.0/relnotes/demo/proxy-live.html“Navigator Proxy Auto-Config File Format.”http://www.ietf.org/rfc/rfc2186.txt
IETF RFC 2186, “Intercache Communication Protocol (ICP) Version 2,” by D.
Wessels and K. Claffy.http://icp.ircache.net/carp.txt“Cache Array Routing Protocol v1.0.”http://www.ietf.org/rfc/rfc2756.txt
IETFRFC2756,“HyperTextCachingProtocol(HTCP/0.0),”byP.VixieandD.
Wessels.|
http://www.ietf.org/internet-drafts/draft-wilson-wrec-wccp-v2-00.txtdraft-wilson-wrec-wccp-v2-01.txt, “Web Cache Communication Protocol V2.0,”by M. Cieslak, D. Forster, G. Tiwana, and R. Wilson.http://www.ietf.org/rfc/rfc2131.txt?number=2131“Dynamic Host Configuration Protocol.”http://www.ietf.org/rfc/rfc2132.txt?number=2132“DHCP Options and BOOTP Vendor Extensions.”http://www.ietf.org/rfc/rfc2608.txt?number=2608“Service Location Protocol, Version 2.”http://www.ietf.org/rfc/rfc2219.txt?number=2219“Use of DNS Aliases for Network Services.”|

CHAPTER 21
Logging and Usage Tracking
Almost all servers and proxies log summaries of the HTTP transactions they process.
This is done for a variety of reasons: usage tracking, security, billing, error detection,and so on. In this chapter, we take a brief tour of logging, examining what informa-tion about HTTP transactions typically is logged and what some of the common logformats contain.
What to Log?
For the most part, logging is done for two reasons: to look for problems on the serveror proxy (e.g., which requests are failing), and to generate statistics about how websites are accessed. Statistics are useful for marketing, billing, and capacity planning(for instance, determining the need for additional servers or bandwidth).
Youcould log all of the headers in an HTTP transaction, but for servers and proxiesthat process millions of transactions per day, the sheer bulk of all of that data quicklywould get out of hand. You also would end up logging a lot of information that youdon’t really care about and may never even look at.
Typically, just the basics of a transaction are logged. A few examples of commonlylogged fields are:• HTTP method• HTTP version of client and server• URL of the requested resource• HTTP status code of the response• Size of the request and response messages (including any entity bodies)• Timestamp of when the transaction occurred• Referer and User-Agent header values483
The HTTP method and URL tell what the request was trying to do—for example,
GETting a resource or POSTing an order form. The URL can be used to track popu-larity of pages on the web site.
The version strings give hints about the client and server, which are useful in debug-ging strange or unexpected interactions between clients and servers. For example, ifrequests are failing at a higher-than-expected rate, the version information may pointto a new release of a browser that is unable to interact with the server.
The HTTP status code tells what happened to the request: whether it was success-ful, the authorization attempt failed, the resource was found, etc. (See “Status
Codes” in Chapter 3 for a list of HTTP status codes.)
The size of the request/response and the timestamp are used mainly for accountingpurposes; i.e., to track how many bytes flowed into, out of, or through the applica-tion. The timestamp also can be used to correlate observed problems with therequests that were being made at the time.
Log Formats
Several log formats have become standard, and we’ll discuss some of the most com-mon formats in this section. Most commercial and open source HTTP applicationssupport logging in one or more of these common formats. Many of these applica-tions also support the ability of administrators to configure log formats and createtheir own custom formats.
One of the main benefits of supporting (for applications) and using (for administra-tors) these more standard formats rests in the ability to leverage the tools that havebeen built to process and generate basic statistics from these logs. Many open sourceand commercial packages exist to crunch logs for reporting purposes, and by utilizingstandard formats, applications and their administrators can plug into these resources.
Common Log Format
One of the most common log formats in use today is called, appropriately, the
Common Log Format. Originally defined by NCSA, many servers use this log for-matasadefault. Most commercial and open source servers can be configured to usethis format, and many commercial and freeware tools exist to help parse commonlog files. Table 21-1 lists, in order, the fields of the Common Log Format.
Table 21-1. Common Log Format fields
Field              Descriptionremotehost         The hostname or IP address of the requestor’s machine (IP if the server was not configured to performreverse DNS or cannot look up the requestor’s hostname)ausername           If an ident lookup was performed, the requestor’s authenticated username|

Table 21-1. Common Log Format fields (continued)
Field              Descriptionauth-username      If authentication was performed, the username with which the requestor authenticatedtimestamp          The date and time of the requestrequest-line       The exact text of the HTTP request line, “GET /index.html HTTP/1.1”response-code      The HTTP status code that was returned in the responseresponse-size      The Content-Length of the response entity—if no entity was returned in the response, a zero is loggeda RFC 931 describes theident lookup used in this authentication. The ident protocol was discussed in Chapter 5.
Example21-1 lists a few examples of Common Log Format entries.
Example21-1.Common Log Format209.1.32.44 - - [03/Oct/1999:14:16:00 -0400] "GET / HTTP/1.0" 200 1024http-guide.com - dg [03/Oct/1999:14:16:32 -0400] "GET / HTTP/1.0" 200 477http-guide.com - dg [03/Oct/1999:14:16:32 -0400] "GET /foo HTTP/1.0" 404 0
In these examples, the fields are assigned as follows:
Field              Entry 1                       Entry 2                        Entry 2remotehost         209.1.32.44                   http-guide.com                 http-guide.comusername           <empty>                       <empty>                        <empty>auth-username      <empty>                       dg                             dgtimestamp          03/Oct/1999:14:16:00 -0400    03/Oct/1999:14:16:32 -0400     03/Oct/1999:14:16:32 -0400request-line       GET / HTTP/1.0                GET / HTTP/1.0                 GET /foo HTTP/1.0response-code      200                           200                            404response-size      1024                          477                            0
Note that the remotehost field can be either a hostname, as in http-guide.com,oran
IP address, such as 209.1.32.44.
The dashes in the second (username) and third (auth-username) fields indicate thatthe fields are empty. This indicates that either an ident lookup did not occur (secondfield empty) or authentication was not performed (third field empty).
Combined Log Format
Another commonly used log format is the Combined Log Format. This format issupported by servers such as Apache. The Combined Log Format is very similar tothe CommonLogFormat;infact,itmirrorsit exactly, with the addition of two fields(listed in Table 21-2). The User-Agent field is useful in noting which HTTP clientapplications are making the logged requests, while the Referer field provides moredetail about where the requestor found this URL.|

Table 21-2. Additional Combined Log Format fields
Field                      Description
Referer                    The contents of the Referer HTTP header
User-Agent                 The contents of the User-Agent HTTP header
Example21-2 gives an example of a Combined Log Format entry.
Example21-2.Combined Log Format209.1.32.44 - - [03/Oct/1999:14:16:00 -0400] "GET / HTTP/1.0" 200 1024 "http://www.joes-hardware.com/"  "5.0: Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)"
In Example 21-2, the Referer and User-Agent fields are assigned as follows:
Field                      Value
Referer                    http://www.joes-hardware.com/
User-Agent                 5.0: Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)
The first seven fields of the example Combined Log Format entry in Example 21-2are exactly as they would be in the Common Log Format (see the first entry in
Example21-1). The two new fields, Referer and User-Agent, are tacked onto the endof the log entry.
Netscape Extended Log Format
WhenNetscape entered into the commercial HTTP application space, it defined forits servers many log formats that have been adopted by other HTTP applicationdevelopers. Netscape’s formats derive from the NCSA Common Log Format, butthey extend that format to incorporate fields relevant to HTTP applications such asproxies and web caches.
The first seven fields in the Netscape Extended Log Format are identical to those inthe Common Log Format (see Table 21-1). Table 21-3 lists, in order, the new fieldsthat the Netscape Extended Log Format introduces.
Table 21-3. Additional Netscape Extended Log Format fields
Field                      Descriptionproxy-response-code        If the transaction went through a proxy, the HTTP response code from the server to the proxyproxy-response-size        If the transactionwentthroughaproxy,theContent-Lengthoftheserver’sresponseentitysentto the proxyclient-request-size        The Content-Length of any body or entity in the client’s request to the proxyproxy-request-size         If the transactionwentthroughaproxy,theContent-Lengthofanybodyorentityintheproxy’srequest to the serverclient-request-hdr-size    The length, in bytes, of the client’s request headers|

Table 21-3. Additional Netscape Extended Log Format fields (continued)
Field                        Descriptionproxy-response-hdr-size      If the transaction went through a proxy, the length, in bytes, of the proxy’s response headersthat were sent to the requestorproxy-request-hdr-size       If the transaction went through a proxy, the length, in bytes, of the proxy’s request headersthat were sent to the serverserver-response-hdr-size     The length, in bytes, of the server’s response headersproxy-timestamp              If the transactionwentthroughaproxy,theelapsedtimefortherequestandresponsetotravelthrough the proxy, in seconds
Example21-3 gives an example of a Netscape Extended Log Format entry.
Example21-3.Netscape Extended Log Format209.1.32.44 - - [03/Oct/1999:14:16:00-0400] "GET / HTTP/1.0" 200 1024 200 1024 0 0 215 260279 254 3
In this example, the extended fields are assigned as follows:
Field                        Valueproxy-response-code          200proxy-response-size          1024client-request-size          0proxy-request-size           0client-request-hdr-size      215proxy-response-hdr-size      260proxy-request-hdr-size       279server-response-hdr-size     254proxy-timestamp              3
The first seven fields of the example Netscape Extended Log Format entry in
Example21-3 mirror the entries in the Common Log Format example (see the firstentry in Example 21-1).
Netscape Extended 2 Log Format
Another Netscape log format, the Netscape Extended 2Log Format, takes the
ExtendedLogFormatandaddsfurtherinformationrelevanttoHTTPproxyandwebcaching applications. These extra fields help paint a better picture of the interactionsbetween an HTTP client and an HTTP proxy application.
The Netscape Extended 2Log Format derives from the Netscape Extended Log For-mat, and its initial fields are identical to those listed in Table 21-3 (it also extends the
Common Log Format fields listed in Table 21-1).|

Table 21-4 lists, in order, the additional fields of the Netscape Extended 2 Log Format.
Table 21-4. Additional Netscape Extended 2 Log Format fields
Field                            Descriptionroute                            The route that the proxy used to make the request for the client (see Table 21-5)client-finish-status-code        The client finish status code; specifies whether the client request to the proxy completed suc-cessfully (FIN) or was interrupted (INTR)proxy-finish-status-code         The proxy finish status code; specifies whether the proxy request to the server completed suc-cessfully (FIN) or was interrupted (INTR)acache-result-code                The cache result code; tells how the cache responded to the requesta Table21-7 lists the Netscape cache result codes.
Example21-4 gives an example of a Netscape Extended 2 Log Format entry.
Example21-4.Netscape Extended 2 Log Format209.1.32.44 - - [03/Oct/1999:14:16:00-0400] "GET / HTTP/1.0" 200 1024 200 1024 0 0 215 260279 254 3 DIRECT FIN FIN WRITTEN
The extended fields in this example are assigned as follows:
Field                            Valueroute                            DIRECTclient-finish-status-code        FINproxy-finish-status-code         FINcache-result-code                WRITTEN
Thefirst 16 fields in the Netscape Extended 2Log Format entry in Example 21-4 mir-ror the entries in the Netscape Extended Log Format example (see Example 21-3).
Table 21-5 lists the valid Netscape route codes.
Table 21-5. Netscape route codes
Value                            Description
DIRECT                           The resource was fetched directly from the server.
PROXY(host:port)                 The resource was fetched through the proxy “host.”
SOCKS(socks:port)                The resource was fetched through the SOCKS server “host.”
Table 21-6 lists the valid Netscape finish codes.
Table 21-6. Netscape finish status codes
Value                            Description-                                The request never even started.
FIN                              The request was completed successfully.|

Table 21-6. Netscape finish status codes (continued)
Value                     Description
INTR                      The request was interrupted by the client or ended by a proxy/server.
TIMEOUT                   The request was timed out by the proxy/server.
Table 21-7 lists the valid Netscape cache codes.*
Table 21-7. Netscape cache codes
Code                      Description-                         The resource was uncacheable.
WRITTEN                   The resource was written into the cache.
REFRESHED                 The resource was cached and it was refreshed.
NO-CHECK                  The cached resource was returned; no freshness check was done.
UP-TO-DATE                The cached resource was returned; a freshness check was done.
HOST-NOT-AVAILABLE        Thecachedresourcewasreturned;nofreshnesscheckwasdonebecausetheremoteserverwasnot available.
CL-MISMATCH               The resource was not written to the cache; the write was aborted because the Content-Lengthdid not match the resource size.
ERROR                     Theresourcewasnotwrittentothecacheduetosomeerror;forexample,atimeoutoccurredorthe client aborted the transaction.
Netscape applications, like many other HTTP applications, have other log formatstoo, including a Flexible Log Format and a means for administrators to output cus-tom log fields. These formats allow administrators greater control and the ability tocustomize their logs by choosing which parts of the HTTP transaction (headers, sta-tus, sizes, etc.) to report in their logs.
The ability for administrators to configure custom formats was added because it isdifficult to predict what information administrators will be interested in gettingfrom their logs. Many other proxies and servers also have the ability to emit customlogs.
Squid Proxy Log Format
TheSquidproxycache(http://www.squid-cache.org) is a venerable part of the Web. Itsroots trace back to one of the early web proxy cache projects (ftp://ftp.cs.colorado.edu/pub/techreports/schwartz/Harvest.Conf.ps.Z). Squid is an open source project that hasbeen extended and enhanced by the open source community over the years. Manytools have been written to help administer the Squid application, including tools tohelp process, audit, and mine its logs. Many subsequent proxy caches adopted the
Squid format for their own logs so that they could leverage these tools.* Chapter 7 discusses HTTP caching in detail.|

The format of a Squid log entry is fairly simple. Its fields are summarized in
Table 21-8.
Table 21-8. Squid Log Format fields
Field                            Descriptiontimestamp                        The timestamp when the request arrived, in seconds since January 1, 1970 GMT.time-elapsed                     The elapsed time for request and response to travel through the proxy, in milliseconds.host-ip                          The IP address of the client’s (requestor’s) host machine.aresult-code/status               The result field is a Squid-ism that tells what action the proxy took during this request ; thecode field is the HTTP response code that the proxy sent to the client.size                             The length of the proxy’s response to the client, including HTTP response headers and body,in bytes.method                           The HTTP method of the client’s request.burl                              The URL in the client’s request.c                       drfc931-ident                     The client’s authenticated username.hierarchy/from                   LiketheroutefieldinNetscapeformats,thehierarchyfieldtellswhatroutetheproxyusedtoemake the request for the client.  The from field tells the name of the server that the proxyused to make the request.content-type                     The Content-Type of the proxy response entity.a Table21-9 lists the various result codes and their meanings.b Recall from Chapter2 that proxies often log the entire requested URL, so if a username and password component are in the URL, a proxycan inadvertently record this information.c The rfc931-ident, hierarchy/from, and content-type fields were added in Squid 1.1. Previous versions did not have these fields.d RFC 931 describes theident lookup used in this authentication.e http://squid.nlanr.net/Doc/FAQ/FAQ-6.html#ss6.6 lists all of the valid Squid hierarchy codes.
Example21-5 gives an example of a Squid Log Format entry.
Example21-5.Squid Log Format99823414 3001 209.1.32.44 TCP_MISS/200 4087 GET http://www.joes-hardware.com - DIRECT/proxy.com text/html
The fields are assigned as follows:
Field                            Valuetimestamp                        99823414time-elapsed                     3001host-ip                          209.1.32.44action-code                      TCP_MISSstatus                           200size                             4087method                           GET
URL                              http://www.joes-hardware.com|

Field                      Value
RFC 931 ident              -hierarchy                  DIRECTafrom                       proxy.comcontent-type               text/htmla The DIRECT Squid hierarchy value is the same as the DIRECT route value in Netscape log formats.
Table 21-9 lists the various Squid result codes.*
Table 21-9. Squid result codes
Action                     Description
TCP_HIT                    A valid copy of the resource was served out of the cache.
TCP_MISS                   The resource was not in the cache.
TCP_REFRESH_HIT            The resource was in the cache but needed to be checked for freshness. The proxy revalidatedthe resource with the server and found that the in-cache copy was indeed still fresh.
TCP_REF_FAIL_HIT           Theresourcewasinthecachebutneededtobecheckedforfreshness.However,therevalida-tion failed (perhaps the proxy could not connect to the server), so the “stale” resource wasreturned.
TCP_REFRESH_MISS           The resource was in the cache but needed to be checked for freshness. Upon checking withthe server, the proxy learned that the resource in the cache was out of date and received anew version.
TCP_CLIENT_REFRESH_MISS    The requestor sent a Pragma: no-cache or similar Cache-Control directive, so the proxy wasforced to fetch the resource.
TCP_IMS_HIT                The requestor issued a conditional request, which was validated against the cached copy ofthe resource.
TCP_SWAPFAIL_MISS          The proxy thought the resource was in the cache but for some reason could not access it.
TCP_NEGATIVE_HIT           A cached response was returned, but the response was a negatively cached response. Squidsupports the notion of caching errors for resources—for example, caching a 404 Not Foundresponse—so if multiple requests go through the proxy-cache for an invalid resource, theerror is served from the proxy cache.
TCP_MEM_HIT                A valid copy of the resource was served out of the cache, and the resource was in the proxycache’s memory (as opposed to having to access the disk to retrieve the cached resource).
TCP_DENIED                 The request for this resource was denied, probably because the requestor does not have per-mission to make requests for this resource.
TCP_OFFLINE_HIT            The requested resource was retrieved from the cache during its offline mode. Resources arenot validated when Squid (or another proxy using this format) is in offline mode.
UDP_*                      The UDP_* codes indicate that requests were received through the UDP interface to theproxy. HTTP normally uses the TCP transport protocol, so these requests are not using thea
HTTP protocol.* Several of these action codes deal more with the internals of the Squid proxy cache, so not all of them areused by other proxies that implement the Squid Log Format.|

Table 21-9. Squid result codes (continued)
Action                   Description
UDP_HIT                  A valid copy of the resource was served out of the cache.
UDP_MISS                 The resource was not in the cache.
UDP_DENIED               The request for this resource was denied, probably because the requestor does not have per-mission to make requests for this resource.
UDP_INVALID              The request that the proxy received was invalid.
UDP_MISS_NOFETCH         Used by Squid during specific operation modes or in the cache of frequent failures. A cachemiss was returned and the resource was not fetched.
NONE                     Logged sometimes with errors.
TCP_CLIENT_REFRESH       See TCP_CLIENT_REFRESH_MISS.
TCP_SWAPFAIL             See TCP_SWAPFAIL_MISS.
UDP_RELOADING            See UDP_MISS_NOFETCH.a Squidhasitsownprotocolformakingtheserequests:ICP.Thisprotocolisusedforcache-to-cacherequests.Seehttp://www.squid-cache.orgfor more information.
Hit Metering
Origin servers often keep detailed logs for billing purposes. Content providers needto know how often URLs are accessed, advertisers want to know how often their adsare shown, and web authors want to know how popular their content is. Loggingworks well for tracking these things when clients visit web servers directly.
However, caches stand between clients and servers and prevent many accesses fromreaching servers (the very purpose of caches).* Because caches handle many HTTPrequests and satisfy them without visiting the origin server, the server has no recordthat a client accessed its content, creating omissions in log files.
Missing log data makes content providers resort to cache busting for their most impor-tant pages. Cache busting refers to a content producer intentionally making certain†content uncacheable, so all requests for this content must go to the origin server.
This allows the origin server to log the access. Defeating caching might yield betterlogs, but it slows down requests and increases load on the origin server and network.
Because proxy caches (and some clients) keep their own logs, if servers could getaccess to these logs—or at least have a crude way to determine how often their con-tent is served by a proxy cache—cache busting could be avoided. The proposed Hit
Metering protocol, an extension to HTTP, suggests a solution to this problem. The
Hit Metering protocol requires caches to periodically report cache access statistics toorigin servers.* Recall that virtually every browser has a cache.†Chapter7 describes how HTTP responses can be marked as uncacheable.|

RFC 2227 defines the Hit Metering protocol in detail. This section provides a brieftour of the proposal.
Overview
The Hit Metering protocol defines an extension to HTTP that provides a few basicfacilities that caches and servers can implement to share access information and toregulate how many times cached resources can be used.
Hit Metering is, by design, not a complete solution to the problem caches pose forlogging access, but it does provide a basic means for obtaining metrics that serverswant to track. The Hit Metering protocol has not been widely implemented ordeployed (and may never be). That said, a cooperative scheme like Hit Meteringholds some promise of providing accurate access statistics while retaining cachingperformance gains. Hopefully, that will be motivation to implement the Hit Meter-ing protocol instead of marking content uncacheable.
The Meter Header
The Hit Metering extension proposes the addition of a new header, Meter, thatcaches and servers can use to pass to each other directives about usage and report-ing, much like the Cache-Control header allows caching directives to be exchanged.
Table 21-10 defines the various directives and who can pass them in the Meter header.
Table 21-10. Hit Metering directives
Directive             Abbreviation    Who      Descriptionwill-report-and-limit w               Cache    The cache is capable of reporting usage and obeying any usage limitsthe server specifies.wont-report           x               Cache    The cache is able to obey usage limits but won’t report usage.wont-limit            y               Cache    The cache is able to report usage but won’t limit usage.count                 c               Cache    The reporting directive, specified as “uses/reuses” integers—foraexample, “:count=2/4”.max-uses              u               Server   Allows the server to specify the maximum number of times a responsecan be used by a cache—for example, “max-uses=100”.max-reuses            r               Server   Allows the server to specify the maximum number of times a responsecan be reused by a cache—for example, “max-reuses=100”.do-report             d               Server   The server requires proxies to send usage reports.dont-report           e               Server   The server does not want usage reports.timeout               t               Server   Allows the server to specify a timeout on the metering of a resource.
The cache should send a report at or before the specified timeout, plusor minus 1 minute. The timeout is specified in minutes—for example,“timeout=60”.wont-ask              n               Server   The server does not want any metering information.a Hit Metering defines a use as satisfying a request with the response, whereas a reuse is revalidating a client request.|

Figure 21-1 shows an example of Hit Metering in action. The first part of the transac-tion is just a normal HTTP transaction between a client and proxy cache, but in theproxy request, note the insertion of the Meter header and the response from theserver. Here, the proxy is informing the server that it is capable of doing Hit Meter-ing, and the server in turn is asking the proxy to report its hit counts.
Request message
GET http://joes-hardware.com/ HTTP/1.1             GET / HTTP/1.1
Host: www.joes-hardware.com                        Host: www.joes-hardware.com
Accept: *         Meter: will-report-and-limit
Client                         Connection: Meter
Proxywww.joes-hardware.com
Response message
HTTP/1.1 200 OK
Proxy  Date: Fri, 06 Dec 1996 18:44:29 GMT
Response sent to client, cached, and                Content-length: 3152
Client                           used for subsequent requests                        Content-type: text/html
Connection: Meter
HTTP/1.1 200 OK                  ETag: "v1.27"
Date: Fri, 06 Dec 1996 18:44:29 GMT                               Meter: do-report
Content-length: 3152             [...]
Content-type: text/html[...]
Later,  the cache revalidates the      Proxyresponse and at the same timereports the hit count              GET / HTTP/1.1
Host: www.joes-hardware.com
Meter: 12/4
If-None-Match: "v1.27"
Connection: Meter             www.joes-hardware.com
HTTP/1.1 304 Not Modified[...]
Figure 21-1. Hit Metering example
The request completes as it normally would, from the client’s perspective, and theproxy begins tracking hits to that resource on behalf of the server. Later, the proxytries to revalidate the resource with the server. The proxy embeds the metered infor-mation it has been tracking in the conditional request to the server.|

A Word on Privacy
Because logging really is an administrative function that servers and proxies per-form, the whole operation is transparent to users. Often, they may not even be awarethat their HTTP transactions are being logged—in fact, many users probably do noteven know that they are using the HTTP protocol when accessing content on the
Web.
Webapplication developers and administrators need to be aware of the implicationsof tracking a user’s HTTP transactions. Much can be gleaned about a user based onthe information he retrieves. This information obviously can be put to bad use—discrimination, harassment, blackmail, etc. Web servers and proxies that log must bevigilant in protecting the privacy of their end users.
Sometimes, such as in work environments, tracking a user’s usage to make sure he isnot goofing off may be appropriate, but administrators also should make public thefact that people’s transactions are being monitored.
In short, logging is a very useful tool for the administrator and developer—just beaware of the privacy infringements that logs can have without the permission orknowledge of the users whose actions are being logged.
For More Information
For more information on logging, refer to:http://httpd.apache.org/docs/logs.html“Apache HTTP Server: Log Files.” Apache HTTP Server Project web site.http://www.squid-cache.org/Doc/FAQ/FAQ-6.html“Squid Log Files.” Squid Proxy Cache web site.http://www.w3.org/Daemon/User/Config/Logging.html#common-logfile-format“Logging Control in W3C httpd.”http://www.w3.org/TR/WD-logfile.html“Extended Log File Format.”http://www.ietf.org/rfc/rfc2227.txt
RFC 2227, “Simple Hit-Metering and Usage-Limiting for HTTP,” by J. Moguland P. Leach.|

PART VI
Appendixes
This collection of appendixes contains useful reference tables, background informa-tion, and tutorials on a variety of topics relevant to HTTP architecture and imple-mentation:• AppendixA,URI Schemes• AppendixB,HTTP Status Codes• AppendixC,HTTP Header Reference• AppendixD,MIME Types• AppendixE,Base-64 Encoding• AppendixF,Digest Authentication• AppendixG,Language Tags• AppendixH,MIME Charset Registry
APPENDIX A
URI Schemes
ManyURIschemeshavebeendefined,butfewareincommonuse.Generallyspeak-ing, those URI schemes with associated RFCs are in more common use, though thereare a few schemes that have been developed by leading software corporations (nota-bly Netscape and Microsoft), but not formalized, that also are in wide use.
The W3C maintains a list of URI schemes, which you can view at:http://www.w3.org/Addressing/schemes.html
The IANA also maintains a list of URL schemes, at:http://www.iana.org/assignments/uri-schemes
Table A-1 informally describes some of the schemes that have been proposed andthose that are in active use. Note that many of the approximately 90 schemes in thetable are not widely used, and many are extinct.
Table A-1. URI schemes from the W3C registry
Scheme                  DescriptionRFCsabout                   Netscape scheme to explore aspects of the browser. For example: about by itself is the same aschoosing “About Communicator” from the Navigator Help menu, about:cache displays disk-cache statistics, and about:plugins displays information about configured plug-ins. Otherbrowsers, such as Microsoft Internet Explorer, also use this scheme.acap                    Application Configuration Access Protocol.  2244afp                     For file-sharing services using the Apple Filing Protocol (AFP) protocol, defined as part of theexpired IETF draft-ietf-svrloc-afp-service-01.txt.afs                     Reserved for future use by the Andrew File System.callto                  Initiates a Microsoft NetMeeting conference session, such as:callto: ws3.joes-hardware.com/joe@joes-hardware.comchttp                   The CHTTP caching protocol defined by Real Networks. RealPlayer does not cache all itemsstreamed by HTTP. Instead, you designate files to cache by using chttp:// instead of http:// inthefile’s URL. WhenRealPlayerreadsaCHTTPURLinaSMILfile,itfirstchecksitsdiskcacheforthe file. If the file isn’t present, it requests the file through HTTP, storing the file in its cache.499
Table A-1. URI schemes from the W3C registry (continued)
Scheme                Description                   RFCscid                   The use of [MIME] within email to convey web pages and their associated images requires a       2392
URL scheme to permit the HTML to refer to the images or other data included in the message.     2111
The Content-ID URL, “cid:”, serves that purpose.clsid                 Allows Microsoft OLE/COM (Component Object Model) classes to be referenced. Used to insertactive objects into web pages.data                  Allows inclusion of small, constant data items as “immediate” data. This URL encodes the text/  2397plain string “A brief note”:data:A%20brief%20notedate                  Proposal for scheme to support dates, as in date:1999-03-04T20:42:08.dav                   To ensure correct interoperation based on this specification, the IANA must reserve the URI     2518namespaces starting with “DAV:” and with “opaquelocktoken:” for use by this specification, itsrevisions, and related WebDAV specifications.dns                   Used by REBOL software.
Seehttp //www.rebol.com/users/valurl.html.eid                   The external ID (eid) scheme provides a mechanism by which the local application can refer-encedatathathasbeenobtainedbyother,non-URLschememeans.Theschemeisintendedtoprovideageneralescapemechanismtoallowaccesstoinformationforapplicationsthataretoospecialized to justify their own schemes. There is some controversy about this URI.
Seehttp //www.ics.uci.edu/pub/ietf/uri/draft-finseth-url-00.txt.fax                   The “fax” scheme describes a connection to a terminal that can handle telefaxes (facsimile      2806machines).file                  Designates files accessible on a particular host computer. A hostname can be included, but the  1738scheme is unusual in that it does not specify an Internet protocol or access method for suchfiles; as such, its utility in network protocols between hosts is limited.finger                The finger URL has the form:finger://host[:port][/<request>]
The <request> must conform with the RFC 1288 request format.
Seehttp //www.ics.uci.edu/pub/ietf/uri/draft-ietf-uri-url-finger-03.txt.freenet               URIs for information in the Freenet distributed information system.
Seehttp //freenet.sourceforge.net.ftp                   File Transfer Protocol scheme.1738gopher                The archaic gopher protocol.  1738gsm-sms               URIs for the GSM mobile phone short message service.h323, h324            Multimedia conferencing URI schemes.
Seehttp //www.ics.uci.edu/pub/ietf/uri/draft-cordell-sg16-conv-url-00.txt.hdl                   The Handle System is a comprehensive system for assigning, managing, and resolving persis-tent identifiers, known as “handles,” for digital objects and other resources on the Internet.
Handles can be used as URNs.
Seehttp //www.handle.net.hnews                 HNEWS is an HTTP-tunneling variant of the NNTP news protocol. The syntax of hnews URLs isdesigned to be compatible with the current common usage of the news URL scheme.
Seehttp //www.ics.uci.edu/pub/ietf/uri/draft-stockwell-hnews-url-00.txt.|

Table A-1. URI schemes from the W3C registry (continued)
Scheme               Description                 RFCshttp                 The HTTP protocol. Read this book for more information.      2616https                HTTP over SSL.
Seehttp //sitesearch.netscape.com/eng/ssl3/draft302.txt.iioploc              CORBA extensions. The Interoperable Name Service defines one URL-format object reference,iioploc, that can be typed into a program to reach defined services at remote locations, includ-ing the Naming Service. For example, this iioploc identifier:iioploc //www.omg.org/NameServicewould resolve to the CORBA Naming Service running on the machine whose IP address corre-sponded to the domain namewww.omg.org.
Seehttp //www.omg.org.ilu                  The Inter-Language Unification (ILU) system is a multilingual object interface system. Theobject interfaces provided by ILU hide implementation distinctions between different lan-guages,differentaddressspaces,anddifferentoperatingsystemtypes.ILUcanbeusedtobuildmultilingual object-oriented libraries (“class libraries”) with well-specified,language-independent interfaces. It also can be used to implement distributed systems.
Seeftp://parcftp.parc.xerox.com/pub/ilu/ilu.html.imap                 The IMAP URL scheme is used to designate IMAP servers, mailboxes, messages, MIME bodies       2192[MIME], and search programs on Internet hosts accessible using the IMAP protocol.
IOR                  CORBA interoperable object reference.
Seehttp //www.omg.org.irc                  The irc URL scheme is used to refer to either Internet Relay Chat (IRC) servers or individual enti-ties (channels or people) on IRC servers.
Seehttp //www.w3.org/Addressing/draft-mirashi-url-irc-01.txt.isbn                 Proposed scheme for ISBN book references.
Seehttp //lists.w3.org/Archives/Public/www-talk/1991NovDec/0008.html.java                 Identifies Java classes.javascript           The Netscape browser processes javascript URLs, evaluates the expression after the colon (:), ifthere is one, and loads a page containing the string value of the expression, unless it isundefined.jdbc                 Used in the Java SQL API.ldap                 Allows Internet clients direct access to the LDAP protocol.  2255lid                  The Local Identifier (lid:) scheme.
Seedraft-blackketter-lid-00.lifn                 A Location-Independent File Name (LIFN) for the Bulk File Distribution distributed storage sys-tem developed at UTK.livescript           Old name for JavaScript.lrq                  See h323.mailto               The mailto URL scheme is used to designate the Internet mailing address of an individual or   2368service.mailserver           Oldproposalfrom1994–1995toletanentiremessage beencodedinaURL,sothat(forexam-ple) the URL can automatically send email to a mail server for subscribing to a mailing list.|

Table A-1. URI schemes from the W3C registry (continued)
Scheme                Description                       RFCsmd5                   MD5 is a cryptographic checksum.mid                   The mid scheme uses (a part of) the message-id of an email message to refer to a specific           2392message.                          2111mocha                 See javascript.modem                 The modem scheme describes a connection to a terminal that can handle incoming data calls.          2806mms, mmst,            Scheme for Microsoft Media Server (MMS) to stream Active Streaming Format (ASF) files. Tommsu                  force UDP transport, use the mmsu scheme. To force TCP transport, use mmst.news                  The news URL scheme is used to refer to either news groups or individual articles of USENET         1738news. A news URL takes one of two forms:news:<newsgroup-name> ornews:<message-id>.                  1036nfs                   Used to refer to files and directories on NFS servers.             2224nntp                  An alternative method of referencing news articles, useful for specifying news articles from        1738
NNTP servers. An nntp URL looks like:                              977nntp //<host>:<port>/<newsgroup-name>/<article-num>
Note that while nntp URLs specify a unique location for the article resource, most NNTP serverscurrently on the Internet are configured to allow access only from local clients, and thus nntp
URLs do not designate globally accessible resources. Hence, the news form of URL is preferredas a way of identifying news articles.opaquelocktoken       A WebDAV lock token, represented as a URI, that identifies a particular lock. A lock token isreturnedbyeverysuccessfulLOCKoperationinthelockdiscoverypropertyintheresponsebodyand also can be found through lock discovery on a resource. See RFC 2518.path                  The path scheme defines a uniformly hierarchical namespace where a path URN is a sequenceof components and an optional opaque string.
Seehttp //www.hypernews.org/~liberte/www/path html.phone                 Used in “URLs for Telephony”; replaced with tel: in RFC 2806.pop                   The POP URL designates a POP email server, and optionally a port number, authentication             2384mechanism, authentication ID, and/or authorization ID.pnm                   Real Networks’s streaming protocol.pop3                  The POP3 URL scheme allows a URL to specify a POP3 server, allowing other protocols to use ageneral “URL to be used for mail access” in place of an explicit reference to POP3. Defined inexpireddraft-earhart-url-pop3-00.txt.printer               Abstract URLs for use with the Service Location standard.
Seedraft-ietf-srvloc-printer-scheme-02.txt.prospero              Names resources to be accessed via the Prospero Directory Service. 1738res                   Microsoftschemethatspecifiesaresourcetobeobtainedfromamodule.Consistsofastringornumerical resource type, and a string or numerical ID.rtsp                  Real-time streaming protocol that is the basis for Real Networks’s modern streaming control         2326protocols.rvp                   URLs for the RVP rendezvous protocol, used to notify the arrival of users on a computernetwork.
Seedraft-calsyn-rvp-01.|

Table A-1. URI schemes from the W3C registry (continued)
Scheme                Description                       RFCsrwhois                RWhoisisanInternetdirectoryaccessprotocol,definedinRFC1714andRFC2167.TheRWhois
URL gives clients direct access to rwhois.
Seehttp //www.rwhois.net/rwhois/docs/.rx                    An architecture to allow remote graphical applications to display data inside web pages.
Seehttp //www.w3.org/People/danield/papers/mobgui/.sdp                   Session Description Protocol (SDP) URLs. See RFC 2327.service               The service scheme is used to provide access information for arbitrary network services. These      2609
URLs provide an extensible framework for client-based network software to obtain configura-tion information required to make use of network services.sip                   The sip* family of schemes are used to establish multimedia conferences using the Session Ini-      2543tiation Protocol (SIP).shttp                 S-HTTPisasupersetofHTTPdesignedtosecureHTTPconnectionsandprovideawidevarietyofmechanismstoprovideforconfidentiality,authentication,andintegrity.Ithasnotbeenwidelydeployed, and it has mostly been supplanted with HTTPS SSL-encrypted HTTP.
Seehttp //www.homeport.org/~adam/shttp.html.snews                 SSL-encrypted news.
STANF                 Old proposal for stable network filenames. Related to URNs.
Seehttp //web3.w3.org/Addressing/#STANF.t120                  See h323.tel                   URL to place a call using the telephone network.                   2806telephone             Used in previous drafts of tel.telnet                Designates interactive services that may be accessed by the Telnet protocol. A telnet URL takes     1738the form:telnet //<user>:<password>@<host>:<port>/tip                   Supports TIP atomic Internet transactions.                         23712372tn3270                Reserved, as per ftp //ftp.isi.edu/in-notes/iana/assignments/url-schemes.tv                    The TV URL names a particular television broadcast channel.        2838uuid                  Universally unique identifiers (UUIDs) contain no information about location. They also areknownasgloballyuniqueidentifiers(GUIDs).Theyarepersistentovertime,likeURNs,andcon-sist of a 128-bit unique ID. UUID URIs are useful in situations where a unique identifier isrequired that cannot or should not be tied to a particular physical root namespace (such as a
DNS name).
Seedraft-kindel-uuid-uri-00.txt.urn                   Persistent, location-independent, URNs.                            2141vemmi                 Allowsversatilemultimediainterface(VEMMI)clientsoftwareandVEMMIterminalstoconnect                   2122to VEMMI-compliant services. VEMMI is an international standard for online multimediaservices.videotex              Allowsvideotexclientsoftwareorterminalstoconnecttovideotexservicescompliantwiththe
ITU-T and ETSI videotex standards.
Seehttp //www.ics.uci.edu/pub/ietf/uri/draft-mavrakis-videotex-url-spec-01.txt.|

Table A-1. URI schemes from the W3C registry (continued)
Scheme               Description                     RFCsview-source          Netscape Navigator source viewers. These view-source URLs display HTML that was generatedwith JavaScript.wais                 The wide area information service—an early form of search engine.1738whois++              URLs for the WHOIS++ simple Internet directory protocol.         1835
Seehttp //martinh.net/wip/whois-url.txt.whodp                The Widely Hosted Object Data Protocol (WhoDP) exists to communicate the current locationand state of large numbers of dynamic, relocatable objects. A WhoDP program “subscribes” tolocate and receive information about an object and “publishes” to control the location and visi-ble state of an object.
Seedraft-mohr-whodp-00.txt.z39.50r, z39.50s     Z39.50 session and retrieval URLs. Z39.50 is an information retrieval protocol that does not fit  2056neatly into a retrieval model designed primarily around the stateless fetch of data. Instead, itmodels a general user inquiry as a session-oriented, multi-step task, any step of which may besuspended temporarily while the server requests additional parameters from the client beforecontinuing.|

APPENDIX B
HTTP Status Codes
This appendix is a quick reference of HTTP status codes and their meanings.
Status Code Classiﬁcations
HTTP status codes are segmented into five classes, shown in Table B-1.
Table B-1. Status code classifications
Overall range           Defined range                            Category100–199                 100–101 Informational200–299                 200–206 Successful300–399                 300–305 Redirection400–499                 400–415 Client error500–599                 500–505 Server error
Status Codes
Table B-2is a quick reference for all the status codes defined in the HTTP/1.1 speci-fication, providing a brief summary of each. “Status Codes” in Chapter 3 goes intomore detailed descriptions of these status codes and their uses.
Table B-2. Status codes
Status code             Reason phrase                            Meaning100                     ContinueAn initial part of the request was received, and the client shouldcontinue.101                     Switching Protocols                      The server is changing protocols, as specified by the client, to onelisted in the Upgrade header.200                     OK      The request is okay.201                     Created The resource was created (for requests that create server objects).505
Table B-2. Status codes (continued)
Status code         Reason phrase                    Meaning202                 Accepted                         Therequestwasaccepted,buttheserverhasnotyetperformedanyaction with it.203                 Non-Authoritative Information    The transaction was okay, except the information contained in theentityheaderswasnotfromtheoriginserver,butfromacopyoftheresource.204                 No Content                       The response message contains headers and a status line, but noentity body.205                 Reset Content                    Another code primarily for browsers; basically means that thebrowser should clear any HTML form elements on the current page.206                 Partial Content                  A partial request was successful.300                 Multiple Choices                 A client has requested a URL that actually refers to multipleresources.Thiscodeisreturnedalongwithalistofoptions;theusercan then select which one he wants.301                 Moved Permanently                The requested URL has been moved. The response should contain a
Location URL indicating where the resource now resides.302                 Found                            Like the 301 status code, but the move is temporary. The clientshould use the URL given in the Location header to locate theresource temporarily.303                 See Other                       Tells the client that the resource should be fetched using a different
URL.ThisnewURLisintheLocationheaderoftheresponsemessage.304                 Not Modified                     Clients can make their requests conditional by the request headersthey include. This code indicates that the resource has not changed.305                 Use Proxy                        The resource must be accessed through a proxy, the location of theproxy is given in the Location header.306                 (Unused)                         This status code currently is not used.307                 Temporary Redirect               Like the 301 status code; however, the client should use the URLgiven in the Location header to locate the resource temporarily.400                 Bad Request                      Tells the client that it sent a malformed request.401                 Unauthorized                     Returned along with appropriate headers that ask the client toauthenticate itself before it can gain access to the resource.402                 Payment Required                 Currently this status code is not used, but it has been set aside forfuture use.403                 Forbidden                        The request was refused by the server.404                 Not Found                        The server cannot find the requested URL.405                 Method Not Allowed               A request was made with a method that is not supported for therequested URL. The Allow header should be included in theresponse to tell the client what methods are allowed on therequested resource.406                 Not Acceptable                   Clients can specify parametersaboutwhattypesofentitiestheyarewilling to accept. This code is used when the server has no resourcematching the URL that is acceptable for the client.407                 Proxy Authentication Required    Like the 401 status code, but used for proxy servers that requireauthentication for a resource.|

Table B-2. Status codes (continued)
Status code         Reason phrase                    Meaning408                 Request Timeout                  If a client takes too long to complete its request, a server can sendback this status code and close down the connection.409                 Conflict                         The request is causing some conflict on a resource.410                 Gone                             Like the 404 status code, except that the server once held theresource.411                 Length Required                  ServersusethiscodewhentheyrequireaContent-Lengthheaderinthe request message. The server will not accept requests for theresource without the Content-Length header.412                 Precondition Failed              If a client makes a conditional request and one of the conditionsfails, this response code is returned.413                 Request Entity Too Large         The client sent an entity body that is larger than the server can orwants to process.414                 Request URI Too Long             TheclientsentarequestwitharequestURLthatislargerthanwhatthe server can or wants to process.415                 Unsupported Media Type           The client sent an entity of a content type that the server does notunderstand or support.416                 Requested Range Not Satisfiable  The request message requested a range of a given resource, andthat range either was invalid or could not be met.417                 Expectation Failed               The request contained an expectation in the Expect request headerthat could not be satisfied by the server.500                 Internal Server Error            Theserverencounteredanerrorthatpreventeditfromservicingtherequest.501                 Not Implemented                  The client made a request that is beyond the server’s capabilities.502                 Bad Gateway                      Aserveractingasaproxyorgatewayencounteredabogusresponsefrom the next link in the request response chain.503                 Service Unavailable              Theservercannotcurrentlyservicetherequestbutwillbeabletointhe future.504                 Gateway Timeout                  Similar to the 408 status code, except that the response is comingfrom a gateway or proxy that has timed out waiting for a responseto its request from another server.505                 HTTP Version Not Supported       Theserverreceivedarequestinaversionoftheprotocolthatitcan’tor won’t support.|

APPENDIX C                
HTTP Header Reference
It’s almost amusing to remember that the first version of HTTP, 0.9, had no headers.
While this certainly had its down sides, its fun to marvel in its simplistic elegance.
Well, back to reality. Today there are a horde of HTTP headers, many part of thespecification and still others that are extensions to it. This appendix provides somebackground on these official and extension headers. It also acts as an index for thevarious headers in this book, pointing out where their concepts and features are dis-cussed in the running text. Most of these headers are simple up-front; it’s the interac-tions with each other and other features of HTTP where things get hairy. Thisappendix provides a bit of background for the headers listed and directs you to thesections of the book where they are discussed at length.
The headers listed in this appendix are drawn from the HTTP specifications, relateddocuments, and our own experience poking around with HTTP messages and thevarious servers and clients on the Internet.
This list is far from exhaustive. There are many other extension headers floatingaround on the Web, not to mention those potentially used in private intranets.
Nonetheless, we have attempted to make this list as complete as possible. See RFC2616 for the current version of the HTTP/1.1 specification and a list of official head-ers and their specification descriptions.
Accept
The Accept header is used by clients to let servers know what media types are acceptable.
The value of the Accept header field is a list of media types that the client can use. Forinstance, your web browser cannot display every type of multimedia object on the Web. Byincluding an Accept header in your requests, your browser can save you from downloadinga video or other type of object that you can’t use.
The Accept header field also may include a list of quality values (q values) that tell theserver which media type is preferred, in case the server has multiple versions of the mediatype. See Chapter 17 for a complete discussion of content negotiation and q values.508
Type                  Request header
Notes                 “*” is a special value that is used to wildcard media types. For example,“*/*” represents all types, and “image/*” represents all image types.
Examples              Accept: text/*, image/*
Accept: text/*, image/gif, image/jpeg;q=1
Accept-Charset
The Accept-Charset header is used by clients to tell servers what character sets are accept-able or preferred. The value of this request header is a list of character sets and possiblyquality values for the listed character sets. The quality values let the server know whichcharacter set is preferred, in case the server has the document in multiple acceptable char-acter sets. See Chapter 17 for a complete discussion of content negotiation and q values.
Type                  Request header
Notes                 As with the Accept header, “*” is a special character. If present, it repre-sents all character sets, except those that also are mentioned explicitly inthe value. If it’s not present, any charset not in the value field has adefault q value of zero, with the exception of the iso-latin-1 charset,which gets a default of 1.
Basic Syntax          Accept-Charset: 1# ((charset | "*") [";" "q" "=" qvalue])
Example               Accept-Charset: iso-latin-1
Accept-Encoding
The Accept-Encoding header is used by clients to tell servers what encodings are accept-able. If the content the server is holding is encoded (perhaps compressed), this requestheader lets the server know whether the client will accept it. Chapter 17 contains acomplete description of the Accept-Encoding header.
Type                  Request header
Basic Syntax          Accept-Encoding: 1# ((content-coding | "*") [";" "q" "=" qvalue])
Examples*             Accept-Encoding:
Accept-Encoding: gzip
Accept-Encoding: compress;q=0.5, gzip;q=1* TheemptyAccept-Encodingexampleisnotatypo.Itreferstotheidentityencoding—thatis,theunencodedcontent. If the Accept-Encoding header is present and empty, only the unencoded content is acceptable.|

Accept-Language
The Accept-Language request header functions like the other Accept headers, allowingclients to inform the server about what languages (e.g., the natural language for content)are acceptable or preferred. Chapter 17 contains a complete description of the Accept-
Language header.
Type                             Request header
Basic Syntax                     Accept-Language: 1# (language-range [";" "q" "=" qvalue])language-range = ((1*8ALPHA * ("-" 1*8ALPHA)) | "*")
Examples                         Accept-Language: en
Accept-Language: en;q=0.7, en-gb;q=0.5
Accept-Ranges
The Accept-Ranges header differs from the other Accept headers—it is a response headerused by servers to tell clients whether they accept requests for ranges of a resource. Thevalue of this header tells what type of ranges, if any, the server accepts for a given resource.
A client can attempt to make a range request on a resource without having received thisheader. If the server does not support range requests for that resource, it can respond withan appropriate status code* and the Accept-Ranges value “none”. Servers might want tosend the “none” value for normal requests to discourage clients from making rangerequests in the future.
Chapter 17 contains a complete description of the Accept-Ranges header.
Type                             Response header
Basic Syntax                     Accept-Ranges: 1# range-unit | none
Examples                         Accept-Ranges: none
Accept-Ranges: bytes
Age
TheAgeheadertellsthereceiver how old a response is. It is the sender’s best guess as to howlong ago the response was generated by or revalidated with the origin server. The value of theheader is the sender’s guess, a delta in seconds. See Chapter 7 for more on the Age header.
Type                             Response header
Notes                            HTTP/1.1 caches must include an Age header in every response they send.* For example, status code 416 (see “400–499: Client Error Status Codes” in Chapter 3).|

Basic Syntax           Age: delta-seconds
Example                Age: 60
Allow
TheAllowheader is used to inform clients what HTTP methods are supported on a partic-ular resource.
Type                   Response header
Notes                  AnHTTP/1.1 server sending a 405 Method Not Allowed response must*include an Allow header.
Basic Syntax           Allow: #Method
Example                Allow: GET, HEAD
Authorization
TheAuthorization header is sent by a client to authenticate itself with a server. A client willinclude this header in its request after receiving a 401 Authentication Required responsefrom a server. The value of this header depends on the authentication scheme in use. See
Chapter 14 for a detailed discussion of the Authorization header.
Type                   Response header
Basic Syntax           Authorization: authentication-scheme #authentication-param
Example                Authorization: Basic YnJpYW4tdG90dHk6T3ch
Cache-Control
TheCache-Control header is used to pass information about how an object can be cached.
This header is one of the more complex headers introduced in HTTP/1.1. Its value is acaching directive, giving caches special instructions about an object’s cacheability.
In Chapter 7, we discuss caching in general as well as the specific details about this header.
Type                   General header
Example                Cache-Control: no-cache* See “Status Codes” in Chapter 3 for more on the 405 status code.|

Client-ip
TheClient-ip header is an extension header used by some older clients and some proxies totransmit the IP address of the machine on which the client is running.
Type                             Extension request header
Notes                            Implementors should be aware that the information provided in thevalue of this header is not secure.
Basic Syntax                     Client-ip: ip-address
Example                          Client-ip: 209.1.33.49
Connection
The Connection header is a somewhat overloaded header that can lead to a bit of confu-sion. This header was used in HTTP/1.0 clients that were extended with keep-aliveconnections for control information.* In HTTP/1.1, the older semantics are mostly recog-nized, but the header has taken on a new function.
In HTTP/1.1, the Connection header’s value is a list of tokens that correspond to headernames. Applications receiving an HTTP/1.1 message with a Connection header aresupposed to parse the list and remove any of the headers in the message that are in the
Connection header list. This is mainly for proxies, allowing a server or other proxy tospecify hop-by-hop headers that should not be passed along.
One special token value is “close”. This token means that the connection is going to beclosed after the response is completed. HTTP/1.1 applications that do not support persis-tent connections need to insert the Connection header with the “close” token in allrequests and responses.
Type                             General header
Notes                            While RFC 2616 does not specifically mention keep-alive as a connec-tion token, some browsers (including those sending HTTP/1.1 as theirversions) use it in making requests.
Basic Syntax                     Connection: 1# (connection-token)
Examples                         Connection: close* See Chapter 4 for more on keep-alive and persistent connections.|

Content-Base
The Content-Base header provides a way for a server to specify a base URL for resolving
URLs found in the entity body of a response.* The value of the Content-Base header is anabsolute URL that can be used to resolve relative URLs found inside the entity.
Type                 Entity header
Notes                This header is not defined in RFC 2616; it was previously defined in RFC2068, an earlier draft of the HTTP/1.1 specification, and has since beenremoved from the official specification.
Basic Syntax         Content-Base: absoluteURL
Example              Content-Base: http://www.joes-hardware.com/
Content-Encoding
The Content-Encoding header is used to specify whether any encodings have beenperformed on the object. By encoding the content, a server can compress it before sendingthe response. The value of the Content-Encoding header tells the client what type or typesof encoding have been performed on the object. With that information, the client can thendecode the message.
Sometimes more than one encoding is applied to an entity, in which case the encodingsmust be listed in the order in which they were performed.
Type                 Entity header
Basic Syntax         Content-Encoding: 1# content-coding
Examples             Content-Encoding: gzip
Content-Encoding: compress, gzip
Content-Language
The Content-Language header tells the client the natural language that should be under-stood in order to understand the object. For instance, a document written in French wouldhave a Content-Language value indicating French. If this header is not present in theresponse, the object is intended for all audiences. Multiple languages in the header’s valueindicate that the object is suitable for audiences of each language listed.
One caveat about this header is that the header’s value may just represent the naturallanguage of the intended audience of this object, not all or any of the languages contained* See Chapter 2 for more on base URLs.|
in the object. Also, this header is not limited to text or written data objects; images, video,and other media types can be tagged with their intended audiences’ natural languages.
Type                             Entity header
Basic Syntax                     Content-Language: 1# language-tag
Examples                         Content-Language: en
Content-Language: en, fr
Content-Length
The Content-Length header gives the length or size of the entity body. If the header is in aresponse message to a HEAD HTTP request, the value of the header indicates the size thatthe entity body would have been had it been sent.
Type                             Entity header
Basic Syntax                     Content-Length: 1*DIGIT
Example                          Content-Length: 2417
Content-Location
The Content-Location header is included in an HTTP message to give the URL corre-sponding to the entity in the message. For objects that may have multiple URLs, a responsemessage can include a Content-Location header indicating the URL of the object used togenerate the response. The Content-Location can be different from the requested URL.
This generally is used by servers that are directing or redirecting a client to a new URL.
If the URL is relative, it should be interpreted relative to the Content-Base header. If the
Content-Base header is not present, the URL used in the request should be used.
Type                             Entity header
Basic Syntax                     Content-Location: (absoluteURL | relativeURL)
Example                          Content-Location: http://www.joes-hardware.com/index.html
Content-MD5
The Content-MD5 header is used by servers to provide a message-integrity check for themessage body. Only an origin server or requesting client should insert a Content-MD5|
header in the message. The value of the header is an MD5 digest* of the (potentiallyencoded) message body.
The value of this header allows for an end-to-end check on the data, useful for detectingunintentional modifications to the data in transit. It is not intended to be used for securitypurposes.
RFC 1864 defines this header in more detail.
Type                  Entity header
Notes                 The MD5 digest value is a base-64 (see Appendix E) or 128-bit MD5digest, as defined in RFC 1864.
Basic Syntax          Content-MD5: md5-digest
Example               Content-MD5: Q2h1Y2sgSW51ZwDIAXR5IQ==
Content-Range
The Content-Range header is sent as the result of a request that transmitted a range of adocument. It provides the location (range) within the original entity that this entity repre-sents. It also gives the length of the entire entity.
If an “*” is present in the value instead of the length of the entire entity, this means that thelength was not known when the response was sent.
See Chapter 15 for more on the Content-Range header.
Type                  Entity header
Notes                 Servers responding with the 206 Partial Content response code must notinclude a Content-Range header with an “*” as the length.
Example               Content-Range: bytes 500-999 / 5400
Content-Type
The Content-Type header tells the media type of the object in the message.
Type                  Entity header
Basic Syntax          Content-Type: media-type
Example               Content-Type: text/html; charset=iso-latin-1* The MD5 digest is defined in RFC 1864.|

Cookie
The Cookie header is an extension header used for client identification and tracking.
Chapter 11 talks about the Cookie header and its use in detail (also see “Set-Cookie”).
Type                             Extension request header
Example                          Cookie: ink=IUOK164y59BC708378908CFF89OE5573998A115
Cookie2
The Cookie2header is an extension header used for client identification and tracking.
Cookie2is used to identify what version of cookies a requestor understands. It is defined ingreater detail in RFC 2965.
Chapter 11 talks about the Cookie2 header and its use in detail.
Type                             Extension request header
Example                          Cookie2: $version="1"
Date
The Date header gives the date and time at which the message was created. This header isrequired in servers’ responses because the time and date at which the server believes themessage was created can be used by caches in evaluating the freshness of a response. Forclients, this header is completely optional, although it’s good form to include it.
Type                             General header
Basic Syntax                     Date: HTTP-date
Examples                         Date: Tue, 3 Oct 1997 02:15:31 GMT
HTTP has a few specific date formats. This one is defined in RFC 822and is the preferred format for HTTP/1.1 messages. However, in earlierspecifications of HTTP, the date format was not spelled out as well, soserver and client implementors have used other formats, which need tobe supported for the sake of legacy. You will run into date formats likethe one specified in RFC 850, as well as dates in the format produced bythe asctime() system call. Here they are for the date represented above:
Date: Tuesday, 03-Oct-97 02:15:31 GMT     RFC 850 format
Date: Tue Oct 3 02:15:31 1997             asctime() format
The asctime() format is looked down on because it is in local time and itdoes not specify its time zone (e.g., GMT). In general, the date headershould be in GMT; however, robust applications should handle datesthat either do not specify the time zone or include Date values in non-
GMT time.|

ETag
The ETag header provides the entity tag for the entity contained in the message. An entitytag is basically a way of identifying a resource.
Entity tags and their relationship to resources are discussed in detail in Chapter 15.
Type                             Entity header
Basic Syntax                     ETag: entity-tag
Examples                         ETag: "11e92a-457b-31345aa"
ETag: W/"11e92a-457b-3134b5aa"
Expect
The Expect header is used by clients to let servers know that they expect certain behavior.
This header currently is closely tied to the response code 100 Continue (see “100–199:
Informational Status Codes” in Chapter 3).
If a server does not understand the Expect header’s value, it should respond with a statuscode of 417 Expectation Failed.
Type                             Request header
Basic Syntax                     Expect: 1# ("100-continue" | expectation-extension)
Example                          Expect: 100-continue
Expires
The Expires header gives a date and time at which the response is no longer valid. Thisallows clients such as your browser to cache a copy and not have to ask the server if it isstill valid until after this time has expired.
Chapter 7 discusses how the Expires header is used—in particular, how it relates to cachesand having to revalidate responses with the origin server.
Type                             Entity header
Basic Syntax                     Expires: HTTP-date
Example                          Expires: Thu, 03 Oct 1997 17:15:00 GMT
From
The From header says who the request is coming from. The format is just a valid Internetemail address (specified in RFC 1123) for the user of the client.|

There are potential privacy issues with using/populating this header. Client implementorsshould be careful to inform their users and give them a choice before including this headerin a request message. Given the potential for abuse by people collecting email addresses forunsolicited mail messages, woe to the implementor who broadcasts this header unan-nounced and has to answer to angry users.
Type                             Request header
Basic Syntax                     From: mailbox
Example                          From: slurp@inktomi.com
Host
The Host header is used by clients to provide the server with the Internet hostname andport number of the machine from which the client wants to make a request. The hostnameand port are those from the URL the client was requesting.
The Host header allows servers to differentiate different relative URLs based on the host-name, giving the server the ability to host several different hostnames on the same machine(i.e., the same IP address).
Type                             Request header
Notes                            HTTP/1.1 clients must include a Host header in all requests. All HTTP/1.1 servers must respond with the 400 Bad Request status code to
HTTP/1.1 clients that do not provide a Host header.
Basic Syntax                     Host: host [":" port]
Example                          Host: www.hotbot.com:80
If-Modified-Since
TheIf-Modified-Since request header is used to make conditional requests. A client can usethe GET method to request a resource from a server, having the response hinge on whetherthe resource has been modified since the client last requested it.
If the object has not been modified, the server will respond with a 304 Not Modifiedresponse, instead of with the resource. If the object has been modified, the server willrespond as if it was a non-conditional GET request. Chapter 7 discusses conditionalrequests in detail.
Type                             Request header
Basic Syntax                     If-Modified-Since: HTTP-date
Example                          If-Modified-Since: Thu, 03 Oct 1997 17:15:00 GMT|

If-Match
Like the If-Modified-Since header, the If-Match header can be used to make a requestconditional. Instead of a date, the If-Match request uses an entity tag. The server comparesthe entity tag in the If-Match header with the current entity tag of the resource and returnsthe object if the tags match.
Theserver should use the If-Match value of “*” to match any entity tag it has for a resource;“*” will always match, unless the server no longer has the resource.
This header is useful for updating resources that a client or cache already has. The resourceis returned only if it has changed—that is, if the previously requested object’s entity tagdoes not match the entity tag of the current version on the server. Chapter 7 discussesconditional requests in detail.
Type                   Request header
Basic Syntax           If-Match: ("*" | 1# entity-tag)
Example                If-Match: "11e92a-457b-31345aa"
If-None-Match
The If-None-Match header, like all the If headers, can be used to make a request condi-tional. The client supplies the server with a list of entity tags, and the server compares thosetags against the entity tags it has for the resource, returning the resource only if nonematch.
This allows a cache to update resources only if they have changed. Using the If-None-
Match header, a cache can use a single request to both invalidate the entities it has andreceive the new entity in the response. Chapter 7 discusses conditional requests in detail.
Type                   Request header
Basic Syntax           If-None-Match: ("*" | 1# entity-tag)
Example                If-None-Match: "11e92a-457b-31345aa"
If-Range
TheIf-Range header, like all the If headers, can be used to make a request conditional. It isused when an application has a copy of a range of a resource, to revalidate the range or getthe complete resource if the range is no longer valid. Chapter 7 discusses conditionalrequests in detail.
Type                   Request header
Basic Syntax           If-Range: (HTTP-date | entity-tag)|

Examples                         If-Range: Tue, 3 Oct 1997 02:15:31 GMT
If-Range: "11e92a-457b-3134b5aa"
If-Unmodified-Since
The If-Unmodified-Since header is the twin of the If-Modified-Since header. Including it ina request makes the request conditional. The server should look at the date value of theheader and return the object only if it has not been modified since the date provided.
Chapter 7 discusses conditional requests in detail.
Type                             Request header
Basic Syntax                     If-Unmodified-Since: HTTP-date
Example                          If-Unmodified-Since: Thu, 03 Oct 1997 17:15:00 GMT
Last-Modified
The Last-Modified header tries to provide information about the last time this entity waschanged. This could mean a lot of things. For example, resources typically are files on aserver, so the Last-Modified value could be the last-modified time provided by the server’sfilesystem. On the other hand, for dynamically created resources such as those created byscripts, the Last-Modified value could be the time the response was created.
Servers need to be careful that the Last-Modified time is not in the future. HTTP/1.1servers should reset the Last-Modified time if it is later than the value that would be sent inthe Date header.
Type                             Entity header
Basic Syntax                     Last-Modified: HTTP-date
Example                          Last-Modified: Thu, 03 Oct 1997 17:15:00 GMT
Location
The Location header is used by servers to direct clients to the location of a resource thateither was moved since the client last requested it or was created in response to the request.
Type                             Response header
Basic Syntax                     Location: absoluteURL
Example                          Location: http://www.hotbot.com|

Max-Forwards
This header is used only with the TRACE method, to limit the number of proxies or otherintermediaries that a request goes through. Its value is an integer. Each application thatreceives a TRACE request with this header should decrement the value before it forwardsthe request along.
If the value is zero when the application receives the request, it should send back a 200 OKresponse to the request, with an entity body containing the original request. If the Max-
Forwards header is missing from a TRACE request, assume that there is no maximumnumber of forwards.
For other HTTP methods, this header should be ignored. See “Methods” in Chapter 3 formore on the TRACE method.
Type                             Request header
Basic Syntax                     Max-Forwards: 1*DIGIT
Example                          Max-Forwards: 5
MIME-Version
MIME is HTTP’s cousin. While they are radically different, some HTTP servers doconstruct messages that are valid under the MIME specification. When this is the case, the
MIME-Version header can be supplied by the server.
This header has never been part of the official specification, although it is mentioned in the
HTTP/1.0 specification. Many older servers send messages with this header, however,those messages often are not valid MIME messages, making this header both confusing andimpossible to trust.
Type                             Extension general header
Basic Syntax                     MIME-Version: DIGIT "." DIGIT
Example                          MIME-Version: 1.0
Pragma
The Pragma header is used to pass directions along with the message. These directionscould be almost anything, but often they are used to control caching behavior. Proxies andgateways must not remove the Pragma header, because it could be intended for all applica-tions that receive the message.
The most common form of Pragma, Pragma: no-cache, is a request header that forcescaches to request or revalidate the document from the origin server even when a fresh copyis available in the cache. It is sent by browsers when users click on the Reload/Refreshbutton. Many servers send Pragma: no-cache as a response header (as an equivalent to|

Cache-Control: no-cache), but despite its common use, this behavior is technicallyundefinded. Not all applications support Pragma response headers.
Chapter 7 discusses the Pragma header and how it is used by HTTP/1.0 applications tocontrol caches.
Type                             Request header
Basic Syntax                     Pragma: 1# pragma-directive*
Example                          Pragma: no-cache
Proxy-Authenticate
TheProxy-Authenticate header functions like the WWW-Authenticate header. It is used byproxies to challenge an application sending a request to authenticate itself. The full detailsof this challenge/response, and other security mechanisms of HTTP, are discussed in detailin Chapter 14.
If an HTTP/1.1 proxy server is sending a 407 Proxy Authentication Required response, itmust include the Proxy-Authenticate header.
Proxies and gateways must be careful in interpreting all the Proxy headers. They generallyare hop-by-hop headers, applying only to the current connection. For instance, the Proxy-
Authenticate header requests authentication for the current connection.
Type                             Response header
Basic Syntax                     Proxy-Authenticate: challenge
Example                          Proxy-Authenticate: Basic realm="Super Secret Corporate Financial
Documents"
Proxy-Authorization
The Proxy-Authorization header functions like the Authorization header. It is used byclient applications to respond to Proxy-Authenticate challenges. See Chapter 14 for moreon how the challenge/response security mechanism works.
Type                             Request header
Basic Syntax                     Proxy-Authorization: credentials
Example                          Proxy-Authorization: Basic YnJpYW4tdG90dHk6T3ch* The only specification-defined Pragma directive is “no-cache”; however, you may run into other Pragmaheaders that have been defined as extensions to the specification.|

Proxy-Connection
The Proxy-Connection header was meant to have similar semantics to the HTTP/1.0
Connection header. It was to be used between clients and proxies to specify options aboutthe connections (chiefly keep-alive connections).* It is not a standard header and is viewedas an ad hoc header by the standards committee. However, it is widely used by browsersand proxies.
Browser implementors created the Proxy-Connection header to solve the problem of aclient sending an HTTP/1.0 Connection header that gets blindly forwarded by a dumbproxy. A server receiving the blindly forwarded Connection header could confuse the capa-bilities of the client connection with those of the proxy connection.
The Proxy-Connection header is sent instead of the Connection header when the clientknows that it is going through a proxy. Because servers don’t recognize the Proxy-
Connection header, they ignore it, allowing dumb proxies that blindly forward the headerto do so without causing harm.
The problem with this solution occurs if there is more than one proxy in the path of theclient to the server. If the first one blindly forwards the header to the second, which under-stands it, the second proxy can suffer from the same confusion the server did with the
Connection header.
This is the problem that the HTTP working group had with this solution—they saw it as ahack that solved the case of a single proxy, but not the bigger problem. Nonetheless, itdoes handle some of the more common cases, and because older versions of both Netscape
Navigator and Microsoft Internet Explorer implement it, proxy implementors need to dealwith it. See Chapter 4 for more information.
Type                    General header
Basic Syntax            Proxy-Connection: 1# (connection-token)
Example                 Proxy-Connection: close
Public
The Public header allows a server to tell a client what methods it supports. These methodscan be used in future requests by the client. Proxies need to be careful when they receive aresponse from a server with the Public header. The header indicates the capabilities of theserver, not the proxy, so the proxy needs to either edit the list of methods in the header orremove the header before it sends the response to the client.
Type                    Response header* See Chapter 4 for more on keep-alive and persistent connections.|

Notes                            This header is not defined in RFC 2616. It was previously defined in RFC2068, an earlier draft of the HTTP/1.1 specification, but it has since beenremoved from the official specification.
Basic Syntax                     Public: 1# HTTP-method
Example                          Public: OPTIONS, GET, HEAD, TRACE, POST
Range
TheRangeheaderis used in requests for parts or ranges of an entity. Its value indicates therange of the entity that is included in the message.
Requests for ranges of a document allow for more efficient requests of large objects (byrequesting them in segments) or for recovery from failed transfers (allowing a client torequest the range of the resource that did not make it). Range requests and the headers thatmake the requests possible are discussed in detail in Chapter 15.
Type                             Entity header
Example                          Range: bytes=500-1500
Referer
The Referer header is inserted into client requests to let the server know where the clientgot the URL from. This is a voluntary effort, for the server’s benefit; it allows the server tobetter log the requests or perform other tasks. The misspelling of “Referer” hearkens backto the early days of HTTP, to the frustration of English-speaking copyeditors throughoutthe world.
Whatyourbrowserdoesisfairlysimple.If you get home page A and click on a link to go tohomepageB,yourbrowserwill insert a Referer header in the request with value A. Refererheaders are inserted by your browser only when you click on links; requests for URLs youtype in yourself will not contain a Referer header.
Because some pages are private, there are some privacy concerns with this header. Whilesome of this is unwarranted paranoia, this header does allow web servers and their admin-istrators to see where you came from, potentially allowing them to better track yoursurfing. As a result, the HTTP/1.1 specification recommends that application writers allowthe user to decide whether this header is transmitted.
Type                             Request header
Basic Syntax                     Referer: (absoluteURL | relativeURL)
Example                          Referer: http://www.inktomi.com/index.html|

Retry-After
Servers can use the Retry-After header to tell a client when to retry its request for aresource. It is used with the 503 Service Unavailable status code to give the client a specificdate and time (or number of seconds) at which it should retry its request.
Aserver can also use this header when it is redirecting clients to resources, giving the clienta time to wait before making a request on the resource to which it is redirected.* This canbe very useful to servers that are creating dynamic resources, allowing the server to redirectthe client to the newly created resource but giving time for the resource to be created.
Type                   Response header
Basic Syntax           Retry-After: (HTTP-date | delta-seconds)
Examples               Retry-After: Tue, 3 Oct 1997 02:15:31 GMT
Retry-After: 120
Server
TheServer header is akin to the User-Agent header; it provides a way for servers to identifythemselves to clients. Its value is the server name and an optional comment about theserver.
Because the Server header identifies the server product and can contain additionalcomments about the product, its format is somewhat free-form. If you are writing softwarethat depends on how a server identifies itself, you should experiment with the server soft-ware to see what it sends back, because these tokens vary from product to product andrelease to release.
AswiththeUser-Agentheader,don’tbesurprisedifanolderproxyorgatewayinsertswhatamounts to a Via header in the Server header itself.
Type                   Response header
Basic Syntax           Server: 1* (product | comment)
Examples               Server: Microsoft-Internet-Information-Server/1.0
Server: websitepro/1.1f (s/n wpo-07d0)
Server: apache/1.2b6 via proxy gateway CERN-HTTPD/3.0 libwww/2.13
Set-Cookie
The Set-Cookie header is the partner to the Cookie header; in Chapter 11, we discuss theuse of this header in detail.* See “Redirection status codes and reason phrases” in Chapter 3 for more on server redirect responses.|

Type                             Extension response header
Basic Syntax                     Set-Cookie: command
Examples                         Set-Cookie: lastorder=00183; path=/orders
Set-Cookie: private_id=519; secure
Set-Cookie2
The Set-Cookie2header is an extension of the Set-Cookie header; in Chapter 11, wediscuss the use of this header in detail.
Type                             Extension response header
Basic Syntax                     Set-Cookie2: command
Examples                         Set-Cookie2: ID="29046"; Domain=".joes-hardware.com"
Set-Cookie2: color=blue
TE
The poorly named TE header functions like the Accept-Encoding header, but for transferencodings (it could have been named Accept-Transfer-Encoding, but it wasn’t). The TEheader also can be used to indicate whether a client can handle headers in the trailer of aresponse that has been through the chunked encoding. See Chapter 15 for more on the TEheader, chunked encoding, and trailers.
Type                             Request header
Notes                            If the value is empty, only the chunked transfer encoding is acceptable.
The special token “trailers” indicates that trailer headers are acceptablein a chunked response.
Basic Syntax                     TE: # (transfer-codings)transfer-codings= "trailers" | (transfer-extension [accept-params])
Examples                         TE:
TE: chunked
Trailer
TheTrailer header is used to indicate which headers are present in the trailer of a message.
Chapter 15 discusses chunked encodings and trailers in detail.
Type                             General header|

Basic Syntax              Trailer: 1#field-name
Example                   Trailer: Content-Length
Title
TheTitle header is a non-specification header that is supposed to give the title of the entity.
This header was part of an early HTTP/1.0 extension and was used primarily for HTMLpages, which have clear title markers that servers can use. Because many, if not most,media types on the Web do not have such an easy way to extract a title, this header haslimited usefulness. As a result, it never made it into the official specification, though someolder servers on the Net still send it faithfully.
Type                      Response header
Notes                     The Title header is not defined in RFC 2616. It was originally defined inthe    HTTP/1.0 draft definition (http://www.w3.org/Protocols/HTTP/
HTTP2.html) but has since been removed from the official specification.
Basic Syntax              Title: document-title
Example                   Title: CNN Interactive
Transfer-Encoding
If some encoding had to be performed to transfer the HTTP message body safely, themessage will contain the Transfer-Encoding header. Its value is a list of the encodings thatwere performed on the message body. If multiple encodings were performed, they are listedin order.
The Transfer-Encoding header differs from the Content-Encoding header because thetransfer encoding is an encoding that was performed by a server or other intermediaryapplication to transfer the message.
Transfer encodings are discussed in Chapter 15.
Type                      General header
Basic Syntax              Transfer-Encoding: 1# transfer-coding
Example                   Transfer-Encoding: chunked
UA-(CPU, Disp, OS, Color, Pixels)
These User-Agent headers are nonstandard and no longer common. They provide informa-tion about the client machine that could allow for better content selection by a server. For|
instance, if a server knew that a user’s machine had only an 8-bit color display, the servercould select images that were optimized for that type of display.
With any header that gives information about the client that otherwise would be unavail-able, there are some security concerns (see Chapter 14 for more information).
Type                             Extension request headers
Notes                            These headers are not defined in RFC 2616, and their use is frownedupon.
Basic Syntax                     "UA" "-" ("CPU" | "Disp" | "OS" | "Color" | "Pixels") ":" machine-valuemachine-value = (cpu | screensize | os-name | display-color-depth)
Examples                         UA-CPU: x86     CPU of client’s machine
UA-Disp: 640, 480, 8                             Size and color depth of client’s display
UA-OS: Windows 95                                Operating system of client machine
UA-Color: color8Color depth of client’s display
UA-Pixels: 640x480                               Size of client’s display
Upgrade
The Upgrade header provides the sender of a message with a means of broadcasting thedesire to use another, perhaps completely different, protocol. For instance, an HTTP/1.1client could send an HTTP/1.0 request to a server and include an Upgrade header with thevalue “HTTP/1.1”, allowing the client to test the waters and see whether the server speaks
HTTP/1.1.
If the server is capable, it can send an appropriate response letting the client know that it isokay to use the new protocol. This provides an efficient way to move to other protocols.
Most servers currently are only HTTP/1.0-compliant, and this strategy allows a client toavoid confusing a server with too many HTTP/1.1 headers until it determines whether theserver is indeed capable of speaking HTTP/1.1.
When a server sends a 101 Switching Protocols response, it must include this header.
Type                             General header
Basic Syntax                     Upgrade: 1# protocol
Example                          Upgrade: HTTP/2.0
User-Agent
The User-Agent header is used by client applications to identify themselves, much like the
Server header for servers. Its value is the product name and possibly a comment describingthe client application.|

This header’s format is somewhat free-form. Its value varies from client product to productandrelease to release. This header sometimes even contains information about the machineon which the client is running.
As with the Server header, don’t be surprised if older proxy or gateway applications insertwhat amounts to a Via header in the User-Agent header itself.
Type;                            Request header
Basic Syntax                     User-Agent: 1* (product | comment)
Example                          User-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)
Vary
The Vary header is used by servers to inform clients what headers from a client’s request*will be used in server-side negotiation. Its value is a list of headers that the server looks atto determine what to send the client as a response.
An example of this would be a server that sends special HTML pages based on your webbrowser’s features. A server sending these special pages for a URL would include a Varyheader that indicated that it looked at the User-Agent header of the request to determinewhat to send as a response.
The Vary header also is used by caching proxies; see Chapter 7 for more on how the Varyheader relates to cached HTTP responses.
Type                             Response header
Basic Syntax                     Vary: ("*" | 1# field-name)
Example                          Vary: User-Agent
Via
The Via header is used to trace messages as they pass through proxies and gateways. It isan informational header that can be used to see what applications are handling requestsand responses.
WhenamessagepassesthroughanHTTPapplicationonitswaytoaclientoraserver,thatapplication can use the Via header to tag the message as having gone via it. This is an
HTTP/1.1 header; many older applications insert a Via-like string in the User-Agent or
Server headers of requests and responses.
If the message passes through multiple in-between applications, each one should tack onits Via string. The Via header must be inserted by HTTP/1.1 proxies and gateways.* See Chapter 17 for more on content negotiation.|

Type                             General header*
Basic Syntax                     Via: 1# (received-protocol received-by [comment])
Example                          Via: 1.1 joes-hardware.com (Joes-Server/1.0)
The above says that the message passed through the Joes Server Version1.0 software running on the machine joes-hardware.com. Joe’s Serverwas speaking HTTP 1.1. The Via header should be formatted like this:
HTTP-Version machine-hostname (Application-Name-Version)
Warning
The Warning header is used to give a little more information about what happened duringa request. It provides the server with a way to send additional information that is not in thestatus code or reason phrase. Several warning codes are defined in the HTTP/1.1specification:101 Response Is Stale
When a response message is known to be stale—for instance, if the origin server isunavailable for revalidation—this warning must be included.111 Revalidation Failed
If a cache attempts to revalidate a response with an origin server and the revalidationfails because the cache cannot reach the origin server, this warning must be included inthe response to the client.112 Disconnected Operation
An informative warning; should be used if a cache’s connectivity to the network isremoved.113 Heuristic Expiration
Caches must include this warning if their freshness heuristic is greater than 24 hoursand they are returning a response with an age greater than 24 hours.199 Miscellaneous Warning
Systems receiving this warning must not take any automated response; the messagemay and probably should contain a body with additional information for the user.214 Transformation Applied
Must be added by any intermediate application, such as a proxy, if the applicationperforms any transformation that changes the content encoding of the response.299 Miscellaneous Persistent Warning
Systems receiving this warning must not take any automated reaction; the error maycontain a body with more information for the user.* See the HTTP/1.1 specification for the complete Via header syntax.|

Type                             Response header
Basic Syntax                     Warning: 1# warning-value
Example                          Warning: 113
WWW-Authenticate
The WWW-Authenticate header is used in 401 Unauthorized responses to issue a chal-lenge authentication scheme to the client. Chapter 14 discusses the WWW-Authenticateheader and its use in HTTP’s basic challenge/response authentication system.
Type                             Response header
Basic Syntax                     WWW-Authenticate: 1# challenge
Example                          WWW-Authenticate: Basic realm="Your Private Travel Profile"
X-Cache
The X headers are all extension headers. The X-Cache header is used by Squid to inform aclient whether a resource is available.
Type                             Extension response header
Example                          X-Cache: HIT
X-Forwarded-For
This header is used by many proxy servers (e.g., Squid) to note whom a request has beenforwarded for. Like the Client-ip header mentioned earlier, this request header notes theaddress from which the request originates.
Type                             Extension request header
Basic Syntax                     X-Forwarded-For: addr
Example                          X-Forwarded-For: 64.95.76.161
X-Pad
This header is used to overcome a bug related to response header length in some browsers;it pads the response message headers with extra bytes to work around the bug.|

Type                             Extension general header
Basic Syntax                     X-Pad: pad-text
Example                          X-Pad: bogosity
X-Serial-Number
The X-Serial-Number header is an extension header. It was used by some older HTTPapplications to insert the serial number of the licensed software in the HTTP message.
Its use has pretty much died out, but it is listed here as an example of the X headers that areout there.
Type                             Extension general header
Basic Syntax                     X-Serial-Number: serialno
Example                          X-Serial-Number: 010014056|

APPENDIX D
MIME Types
MIMEmediatypes(MIMEtypes,forshort)arestandardizednamesthatdescribethecontents of a message entity body (e.g., text/html, image/jpeg). This appendixexplains how MIME types work, how to register new ones, and where to go for moreinformation.
In addition, this appendix contains 10 convenient tables, detailing hundreds of
MIMEtypes, gathered from many sources around the globe. This may be the mostdetailed tabular listing of MIME types ever compiled. We hope these tables are use-ful to you.
In this appendix, we will:• Outline the primary reference material, in “Background.”• Explain the structure of MIME types, in “MIME Type Structure.”• Show you how to register MIME types, in “MIME Type IANA Registration.”• Make it easier for you to look up MIME types.
The following MIME type tables are included in this appendix:• application/*—Table D-3• audio/*—TableD-4• chemical/*—TableD-5• image/*—TableD-6• message/*—TableD-7• model/*—TableD-8• multipart/*—Table D-9• text/*—Table D-10• video/*—TableD-11• Other—TableD-12533
Background
MIMEtypesoriginally were developed for multimedia email (MIME stands for Mul-tipurpose Internet Mail Extensions), but they have been reused for HTTP and sev-eral other protocols that need to describe the format and purpose of data objects.
MIME is defined by five primary documents:
RFC 2045, “MIME: Format of Internet Message Bodies”
Describes the overall MIME message structure, and introduces the Content-
Type header, borrowed by HTTP
RFC 2046, “MIME: Media Types”
Introduces MIME types and their structure
RFC 2047, “MIME: Message Header Extensions for Non-ASCII Text”
Defines ways to include non-ASCII characters in headers
RFC 2048, “MIME: Registration Procedures”
Defines how to register MIME values with the Internet Assigned Numbers
Authority (IANA)
RFC 2049, “MIME: Conformance Criteria and Examples”
Details rules for compliance, and provides examples
For the purposes of HTTP, we are most interested in RFC 2046 (Media Types) and
RFC 2048 (Registration Procedures).
MIME Type Structure
Each MIME media type consists of a type, a subtype, and a list of optional parame-ters. The type and subtype are separated by a slash, and the optional parametersbegin with a semicolon, if they are present. In HTTP, MIME media types are widelyused in Content-Type and Accept headers. Here are a few examples:
Content-Type: video/quicktime
Content-Type: text/html; charset="iso-8859-6"
Content-Type: multipart/mixed; boundary=gc0p4Jq0M2Yt08j34c0p
Accept: image/gif
Discrete Types
MIMEtypescandirectly describe the object type, or they can describe collections orpackages of other object types. If a MIME type describes an object type directly, it isa discrete type. These include text files, videos, and application-specific file formats.
Composite Types
If a MIME type describes a collection or encapsulation of other content, the MIMEtype is called a composite type. A composite type describes the format of the enclosing|
package. When the enclosing package is opened, each enclosed object will have itsown type.
Multipart Types
Multipart media types are composite types. A multipart object consists of multiplecomponent types. Here’s an example of multipart/mixed content, where each com-ponent has its own MIME type:
Content-Type: multipart/mixed; boundary=unique-boundary-1--unique-boundary-1
Content-type: text/plain; charset=US-ASCII
Hi there, I'm some boring ASCII text...--unique-boundary-1
Content-Type: multipart/parallel; boundary=unique-boundary-2--unique-boundary-2
Content-Type: audio/basic... 8000 Hz single-channel mu-law-formataudio data goes here ...--unique-boundary-2
Content-Type: image/jpeg... image data goes here ...--unique-boundary-2----unique-boundary-1
Content-type: text/enriched
This is <bold><italic>enriched.</italic></bold><smaller>as defined in RFC 1896</smaller>
Isn't it <bigger><bigger>cool?</bigger></bigger>--unique-boundary-1
Content-Type: message/rfc822
From: (mailbox in US-ASCII)
To: (address in US-ASCII)
Subject: (subject in US-ASCII)
Content-Type: Text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: Quoted-printable... Additional text in ISO-8859-1 goes here ...--unique-boundary-1--|

Syntax
As we stated earlier, MIME types consist of a primary type, a subtype, and anoptional list of parameters.
The primary type can be a predefined type, an IETF-defined extension token, or anexperimental token (beginning with “x-”). Some common primary types aredescribed in Table D-1.
Table D-1. Common primary MIME types
Type                Descriptionapplication         Application-specific content format (discrete type)audio               Audio format (discrete type)chemical            Chemical data set (discrete IETF extension type)image               Image format (discrete type)message             Message format (composite type)model               3-D model format (discrete IETF extension type)multipart           Collection of multiple objects (composite type)text                Text format (discrete type)video               Video movie format (discrete type)
Subtypes can be primary types (as in “text/text”), IANA-registered subtypes, orexperimental extension tokens (beginning with “x-”).
Types and subtypes are made up of a subset of US-ASCII characters. Spaces and cer-tain reserved grouping and punctuation characters, called “tspecials,” are controlcharacters and are forbidden from type and subtype names.
The grammar from RFC 2046 is shown below:
TYPE := "application" | "audio" | "image" | "message" | "multipart" |"text" | "video" | IETF-TOKEN | X-TOKEN
SUBTYPE := IANA-SUBTOKEN | IETF-TOKEN | X-TOKEN
IETF-TOKEN := <extension token with RFC and registered with IANA>
IANA-SUBTOKEN := <extension token registered with IANA>
X-TOKEN := <"X-" or "x-" prefix, followed by any token>
PARAMETER := TOKEN "=" VALUE
VALUE := TOKEN / QUOTED-STRING
TOKEN := 1*<any (US-ASCII) CHAR except SPACE, CTLs, or TSPECIALS>
TSPECIALS :=  "(" | ")" | "<" | ">" | "@" |"," | ";" | ":" | "\" | <"> |"/" | "[" | "]" | "?" | "="|

MIME Type IANA Registration
TheMIMEmediatyperegistrationprocess is described in RFC 2048. The goal of theregistration process is to make it easy to register new media types but also to providesome sanity checking to make sure the new types are well thought out.
Registration Trees
MIMEtypetokensaresplit into four classes, called “registration trees,” each with itsown registration rules. The four trees—IETF, vendor, personal, and experimental—are described in Table D-2.
Table D-2. Four MIME media type registration trees
Registration tree     Example                   Description
IETF                  text/html                 The IETF tree is intended for types that are of general significance to the(HTML text)               Internet community. New IETF tree media types require approval by the
Internet Engineering Steering Group (IESG) and an accompanyingstandards-track RFC.
IETF tree types have no periods (.) in tokens.
Vendor                image/vnd.fpx             Thevendortreeisintendedformediatypesusedbycommerciallyavailable(vnd.)                (Kodak FlashPix image)    products. Public review of new vendor types is encouraged but notrequired.
Vendor tree types begin with “vnd.”.
Personal/Vanity       image/prs.btif            Private, personal, or vanity media types can be registered in the personal(prs.)                (internal check-          tree. These media types will not be distributed commercially.management format         Personal tree types begin with “prs.”.used by Nations Bank)
Experimental          application/x-tar         The experimental tree is for unregistered or experimental media types.(x- or x.)            (Unix tar archive)        Because it’s relatively simple to register a new vendor or personal mediatype, software should not be distributed widely using x- types.
Experimental tree types begin with “x.” or “x-”.
Registration Process
Read RFC 2048 carefully for the details of MIME media type registration.
The basic registration process is not a formal standards process; it’s just an adminis-trative procedure intended to sanity check new types with the community, and recordthem in a registry, without much delay. The process follows the following steps:1. Present the media type to the community for review.
Send a proposed media type registration to the ietf-types@iana.org mailing listfor a two-week review period. The public posting solicits feedback about thechoice of name, interoperability, and security implications. The “x-” prefix spec-ified in RFC 2045 can be used until registration is complete.|
2. IESG approval (for IETF tree only).
If the media type is being registered in the IETF tree, it must be submitted to the
IESG for approval and must have an accompanying standards-track RFC.3. IANA registration.
As soon as the media type meets the approval requirements, the author can sub-mit the registration request to the IANA, using the email template in
ExampleD-1andmailing the information to ietf-types@iana.org. The IANA willregister the media type and make the media type application available to thecommunity at http://www.isi.edu/in-notes/iana/assignments/media-types/.
Registration Rules
The IANA will register media types in the IETF tree only in response to a communi-cation from the IESG stating that a given registration has been approved.
Vendor and personal types will be registered by the IANA automatically and with-out any formal review as long as the following minimal conditions are met:1. Media types must function as actual media formats. Types that act like transferencodings or character sets may not be registered as media types.2. All media types must have proper type and subtype names. All type names mustbe defined by standards-track RFCs. All subtype names must be unique, mustconform to the MIME grammar for such names, and must contain the propertree prefixes.3. Personal tree types must provide a format specification or a pointer to one.4. Any security considerations given must not be obviously bogus. Everyone who isdeveloping Internet software needs to do his part to prevent security holes.
Registration Template
The actual IANA registration is done via email. You complete a registration form*using the template shown in Example D-1, and mail it to ietf-types@iana.org.
ExampleD-1.IANA MIME registration email template
To: ietf-types@iana.org
Subject: Registration of MIME media type XXX/YYY
MIME media type name:* Thelightlystructurednatureoftheformmakesthesubmittedinformationfineforhumanconsumptionbutdifficult for machine processing. This is one reason why it is difficult to find a readable, well-organized sum-mary of MIME types, and the reason we created the tables that end this appendix.|

ExampleD-1.IANA MIME registration email template (continued)
MIME subtype name:
Required parameters:
Optional parameters:
Encoding considerations:
Security considerations:
Interoperability considerations:
Published specification:
Applications which use this media type:
Additional information:
Magic number(s):
File extension(s):
Macintosh File Type Code(s):
Person & email address to contact for further information:
Intended usage:(One of COMMON, LIMITED USE or OBSOLETE)
Author/Change controller:(Any other information that the author deems interesting may be added below this line.)
MIME Media Type Registry
Thesubmittedformsareaccessible from the IANA web site (http://www.iana.org). Atthe time of writing, the actual database of MIME media types is stored on an ISI webserver, at http://www.isi.edu/in-notes/iana/assignments/media-types/.
The media types are stored in a directory tree, structured by primary type and sub-type, with one leaf file per media type. Each file contains the email submission.
Unfortunately, each person completes the registration template slightly differently,so the quality and format of information varies across submissions. (In the tables inthis appendix, we tried to fill in the holes omitted by registrants.)
MIME Type Tables
This section summarizes hundreds of MIME types in 10 tables. Each table lists the
MIME media types within a particular primary type (image, text, etc.).|

Theinformation is gathered from many sources, including the IANA media type reg-istry, the Apache mime.types file, and assorted Internet web pages. We spent severaldays refining the data, plugging holes, and including descriptive summaries fromcross-references to make the data more useful.
This may well be the most detailed tabular listing of MIME types ever compiled. Wehope you find it handy!application/*
Table D-3 describes many of the application-specific MIME media types.
Table D-3. “Application” MIME types
MIME type                     Description                         Extension   Contact and referenceapplication/activemessage     Supports the Active Mail groupware              “Active Mail: A Framework for Inte-system.        grated Groupware Applications” in
Readings in Groupware and
Computer-Supported Cooperative
Work, Ronald M. Baecker, ed.,
Morgan Kaufmann, ISBN1558602410application/andrew-inset      Supports the creation of multimedia ez          Multimedia Applications Develop-content with the Andrew toolkit.                ment with the Andrew Toolkit,
Nathaniel S. Borenstein, Prentice
Hall, ASIN 0130366331nsb@bellcore.comapplication/applefile         Permits MIME-based transmission of              RFC 1740data with Apple/Macintosh-specificinformation, while allowing generalaccess to nonspecific user data.application/atomicmail        ATOMICMAIL was an experimental                  “ATOMICMAIL Language Referenceresearch project at Bellcore, designed          Manual,” Nathaniel S. Borenstein,for including programs in electronic            Bellcore Technical Memorandummail messages that are executed                 TM ARH-018429when mail is read. ATOMICMAIL israpidly becoming obsolete in favor ofsafe-tcl.application/batch-SMTP        Defines a MIME content type suitable            RFC 2442for tunneling an ESMTP mail transac-tion through any MIME-capabletransport.application/beep+xml          Supports the interaction protocol               RFC 3080called BEEP. BEEP permits simulta-neous and independent exchanges of
MIME messages between peers,where the messages usually are XML-structured text.|

Table D-3. “Application” MIME types (continued)
MIME type                     Description                         Extension   Contact and referenceapplication/cals-1840        Supports MIME email exchanges of                 RFC 1895
U.S. Department of Defense digitaldatathatwaspreviouslyexchangedbytapem, as defined by MIL-STD-1840.application/commonground      Common Ground is an electronic doc-             Nick Gaultumentexchangeanddistributionpro-                No Hands Softwaregramthatletsuserscreatedocuments                ngault@nohands.comthat anyone can view, search, andprint, without requiring that theyhave the creating applications orfonts on their systems.application/cybercash         Supportscreditcardpaymentthrough                RFC 1898the CyberCash protocol. When a userstarts payment, a message is sent bythe merchant to the customer as thebody of a message of MIME typeapplication/cybercash.application/dca-rft           IBM Document Content Architecture.              “IBM Document Content Architec-ture/Revisable Form Text Refer-ence,” document number SC23-0758-1, International Business
Machinesapplication/dec-dx            DEC Document Transfer Format.                   “Digital Document Transmission(DX) Technical Notebook,” docu-ment number EJ29141-86, Digital
Equipment Corporationapplication/dvcs              SupportstheprotocolsusedbyaData                 RFC 3029
Validation and Certification Server(DVCS), which acts as a trusted thirdparty in a public-key securityinfrastructure.application/EDI-Consent       Supports bilateral trading via elec-            http //www.isi.edu/in-notes/iana/tronic data interchange (EDI), using            assignments/media-types/nonstandard specifications.                     application/EDI-Consentapplication/EDI-X12           Supports bilateral trading via elec-            http //www.isi.edu/in-notes/iana/tronic data interchange (EDI), using            assignments/media-types/the ASC X12 EDI specifications.                 application/EDI-X12application/EDIFACT           Supports bilateral trading via elec-            http //www.isi.edu/in-notes/iana/tronic data interchange (EDI), using            assignments/media-types/the EDIFACT specifications.                     application/EDIFACTapplication/eshop             Unknown.       Steve Katz
System Architecture Shopsteve_katz@eshop.comapplication/font-tdpfr       DefinesaPortableFontResource(PFR)                RFC 3073that contains a set of glyph shapes,each associated with a character code.|

Table D-3. “Application” MIME types (continued)
MIME type                         Description                              Extension     Contact and referenceapplication/http                  Used to enclose a pipeline of one or                   RFC 2616more HTTP request or response mes-sages (not intermixed).application/hyperstudio           Supports transfer of HyperStudio edu-     stk          http //www.hyperstudio.comcational hypermedia files.application/iges                  A commonly used format for CAD                         “ANS/US PRO/IPO-100”model interchange.    U.S. Product Data Association2722 Merrilee Drive, Suite 200
Fairfax, VA 22031-4499application/index                 Support the Common Indexing Proto-                     RFC 2652, and RFCs 2651, 1913,application/index.cmd             col (CIP). CIP is an evolution of the                  and 1914application/index.obj             Whois++ directory service, used toapplication/index.response        passindexinginformationfromserverapplication/index.vnd             toserverinordertoredirectandrepli-cate queries through a distributeddatabase system.application/iotp                  Supports Internet Open Trading Pro-                    RFC 2935tocol (IOTP) messages over HTTP.application/ipp                   Supports Internet Printing Protocol                    RFC 2910(IPP) over HTTP.application/mac-binhex40          Encodes a string of 8-bit bytes into a    hqx          RFC 1341string of 7-bit bytes, which is safer forsome applications (though not quiteassafeasthe6-bitbase-64encoding).application/mac-compactpro        From Apachemime.types.                    cptapplication/macwriteii            Claris MacWrite II.application/marc                  MARC objects are Machine-Readable         mrc          RFC 2220
Cataloging records—standards forthe representation and communica-tion of bibliographic and relatedinformation.application/mathematica           Supports Mathematica and Math-            nb, ma,      The Mathematica Book, Stephenapplication/mathematica-old       Reader numerical analysis software.       mb           Wolfram, Cambridge University
Press, ISBN 0521643147application/msword                Microsoft Word MIME type.                 docapplication/news-message-id                             RFCs 822 (message IDs), 1036(application to news), and 977(NNTP)application/news-                 Allows transmission of news articles                   RFC 1036transmission                      by email or other transport.application/ocsp-request          Supports the Online Certificate Status    orq          RFC 2560
Protocol (OCSP), which provides away to check on the validity of a digi-tal certificate without requiring localcertificate revocation lists.|

Table D-3. “Application” MIME types (continued)
MIME type                         Description                             Extension     Contact and referenceapplication/ocsp-response         Same as above.                          ors           RFC 2560application/octet-stream          Unclassified binary data.               bin,dms,      RFC 1341lha, lzh,exe, classapplication/oda                   Used for information encoded accord-    oda           RFC 1341ing to the Office Document Architec-                  ISO 8613; “Information Processing:ture(ODA)standards,usingtheOffice                     Text and Office System; Office Doc-
DocumentInterchangeFormat(ODIF)                       ument Architecture (ODA) andrepresentation format. The Content-                   Interchange Format (ODIF),” Part
Type line also should specify an                      1-8, 1989attribute/valuepairthatindicatesthedocument application profile (DAP),as in:
Content-Type: application/oda;profile=Q112application/parityfec             Forwarderrorcorrectionparityencod-                    RFC 3009ing for RTP data streams.application/pdf                   Adode PDF files.                        pdf          SeePortable Document Format Ref-erenceManual,AdobeSystems,Inc.,
Addison Wesley, ISBN 0201626284application/pgp-encrypted         PGP encrypted data.  RFC 2015application/pgp-keys              PGP public-key blocks.                                RFC 2015application/pgp-signature         PGP cryptographic signature.                          RFC 2015application/pkcs10                Public Key Crypto System #10—the        p10           RFC 2311application/pkcs10bodytypemustbeused to transfer a PKCS #10 certifica-tion request.application/pkcs7-mime            Public Key Crypto System #7—this        p7m           RFC 2311type is used to carry PKCS #7 objectsof several types including enveloped-
Data and signedData.application/pkcs7-signature       Public Key Crypto System #7—this        p7s           RFC 2311typealwayscontainsasinglePKCS#7object of type signedData.application/pkix-cert             Transports X.509 certificates.          cer           RFC 2585application/pkix-crl              Transports X.509 certificate revoca-    crl           RFC 2585tion lists.application/pkixcmp               Message format used by X.509 Public     pki           RFC 2510
Key Infrastructure Certificate Man-agement Protocols.application/postscript            An Adobe PostScript graphics file       ai, ps,       RFC 2046(program).                              epsapplication/prs.alvestrand.       “TimeTracker” program by Harald T.                    http //domen.uninett.no/~hta/titrax-sheet                      Alvestrand.          titrax/|

Table D-3. “Application” MIME types (continued)
MIME type                           Description                               Extension      Contact and referenceapplication/prs.cww                 CU-Writer for Windows.                     cw, cww       Dr. Somchai Prasitjutrakulsomchaip@chulkn.car.chula.ac.thapplication/prs.nprend              Unknown.  rnd, rct      John M. Doggettjdoggett@tiac.netapplication/remote-printing         Contains meta information used                           RFC 1486when remote printing, for the printer                    Marshall T. Rosecover sheet.            mrose@dbc.mtview.ca.usapplication/riscos                  Acorn RISC OS binaries. RISC OS Programmer’s Reference
Manuals, Acorn Computers, Ltd.,
ISBN1852501103application/sdp                     SDP is intended for describing live                      RFC 2327multimedia sessions for the purposes                     Henning Schulzrinneof session announcement, session                         hgs@cs.columbia.eduinvitation, and other forms of multi-media session initiation.application/set-payment             Supports the SET secure electronic                       http //www.visa.comapplication/set-payment-            transaction payment protocol.                            http //www.mastercard.cominitiationapplication/set-registrationapplication/set-registration-initiationapplication/sgml-open-              Intended for use with systems that                       SGML Opencatalog                             support the SGML Open TR9401:1995                        910 Beaver Grade Road, #3008“Entity Management” specification.                       Coraopolis, PA 15109info@sgmlopen.orgapplication/sieve                   Sieve mail filtering script.                             RFC 3028application/slate                   The BBN/Slate document format is                         BBN/Slate Product Mgrpublished as part of the standard doc-                   BBN Systems and Technologiesumentation set distributed with the                      10 Moulton Street
BBN/Slate product.      Cambridge, MA 02138application/smil                    The Synchronized Multimedia Inte-          smi, smil     http //www.w3.org/AudioVideo/gration Language (SMIL) integrates aset of independent multimediaobjects into a synchronized multi-media presentation.application/tve-trigger             Supports embedded URLs in                                “SMPTE: Declarative Data Essence,enhanced television receivers.                           Content Level 1,” produced by the
Society of Motion Picture and
Television Engineershttp //www.smpte.orgapplication/vemmi                   Enhanced videotex standard.                              RFC 2122application/vnd.3M.Post-it-         Used by the “Post-it® Notes for Inter-     pwn           http //www.3M.com/psnotes/
Notes                               net Designers” Internet control/plug-in.|

Table D-3. “Application” MIME types (continued)
MIME type                         Description                                Extension     Contact and referenceapplication/vnd.accpac.           Simply Accounting v7.0 and higher.         aso           http //www.ofx.netsimply.aso                        Files of this type conform to Open
Financial Exchange v1.02specifications.application/vnd.accpac.           Used by Simply Accounting v7.0 and         imp           http //www.ofx.netsimply.imp                        higher, to import its own data.application/vnd.acucobol          ACUCOBOL-GT Runtime.    Dovid Lubindovid@acucobol.comapplication/vnd.aether.imp        Supports airtime-efficient Instant                       Wireless Instant Messaging Proto-
Message communications between                           col (IMP) specification availablean Instant Messaging service, such as                    from Aether Systems by license
AOL Instant Messenger, Yahoo! Mes-senger,orMSNMessenger,andaspe-cial set of Instant Messaging clientsoftware on a wireless device.application/vnd.anser-web-        Trigger for web browsers to launch         cii           Hiroyoshi Moricertificate-issue-initiation      the ANSER-WEB Terminal Client.                           mori@mm.rd.nttdata.co.jpapplication/vnd.anser-web-        Same as above.                             fti           Same as abovefunds-transfer-initiationapplication/vnd.audiograph        AudioGraph.                                aep           Horia Cristian
H.C.Slusanschi@massey.ac.nzapplication/vnd.bmi               BMI graphics format by CADAM               bmi           Tadashi Gotoh
Systems.                tgotoh@cadamsystems.co.jpapplication/vnd.                  BusinessObjects 4.0 and higher.            repbusinessobjectsapplication/vnd.canon-cpdl        Supports Canon, Inc. office imaging                      Shin Mutoapplication/vnd.canon-lips        products.               shinmuto@pure.cpdc.canon.co.jpapplication/vnd.claymore          Claymore.exe.                              cla           Ray Simpsonray@cnation.comapplication/vnd.commerce-         Supports a generic mechanism for           ica, icf,     David C. Applebaumbattelle                          delimiting smart card–based infor-         icd, icc,     applebau@131.167.52.15mation, for digital commerce, identi-      ic0, ic1,fication, authentication, and              ic2, ic3,exchange of smart card–based card          ic4, ic5,holder information.                        ic6, ic7,ic8application/vnd.                  Allows for proper transmission of          csp, cst      Ravinder Chandhokcommonspace                       CommonSpace™ documents via                               chandhok@within.com
MIME-based processes. Common-
Space is published by Sixth Floor
Media, part of the Houghton-Mifflin
Company.application/vnd.contact.cmsg      Used for CONTACT software’s CIM            cdbcmsg       Frank Patz
DATABASE.               fp@contact.dehttp //www.contact.de|

Table D-3. “Application” MIME types (continued)
MIME type                           Description                               Extension      Contact and referenceapplication/vnd.cosmocaller         Allows for files containing connection     cmc           Steve Dellutriparameters to be downloaded from                         sdellutri@cosmocom.comweb sites, invokes the CosmoCallerapplication to interpret the parame-ters, and initiates connections withthe CosmoCallACD server.application/vnd.ctc-posml           Continuum Technology’s PosML.              pml           Bayard Kohlheppbayardk@ctcexchange.comapplication/vnd.cups-               Supports Common UNIX Printing Sys-                       http //www.cups.orgpostscript                          tem (CUPS) servers and clients.application/vnd.cups-rasterapplication/vnd.cups-rawapplication/vnd.cybank              ProprietarydatatypeforCybankdata.                        Nor Helmee B. Abd. Halimhelmee@cybank.nethttp //www.cybank.netapplication/vnd.dna                 DNAisintendedtoeasilyWeb-enable            dna           Meredith Searcyany 32-bit Windows application.                          msearcy@newmoon.comapplication/vnd.dpgraph             Used by DPGraph 2000 and Math-             dpg,          David Parker
Ware Cyclone.                              mwc,          http //www.davidparker.comdpgraphapplication/vnd.dxr                 Digital Xpress Reports by PSI              dxr           Michael Duffy
Technologies.           miked@psiaustin.comapplication/vnd.ecdis-update        Supports ECDIS applications.                             http //www.sevencs.comapplication/vnd.ecowin.chart        EcoWin.   mag           Thomas Olssonapplication/vnd.ecowin.    thomas@vinga sefilerequestapplication/vnd.ecowin.fileupdateapplication/vnd.ecowin.seriesapplication/vnd.ecowin.seriesrequestapplication/vnd.ecowin.seriesupdateapplication/vnd.enliven             Supports delivery of Enliven interac-      nml           Paul Santinellitive multimedia.        psantinelli@narrative.comapplication/vnd.epson.esf           Proprietary content for Seiko Epson        esf           Shoji Hoshina
QUASS Stream Player.    Hoshina.Shoji@exc.epson.co.jpapplication/vnd.epson.msf           Proprietary content for Seiko Epson        msf           Same as above
QUASS Stream Player.application/vnd.epson.              Proprietary content for Seiko Epson        qam           Yu Guquickanime                          QuickAnime Player.      guyu@rd.oda.epson.co.jpapplication/vnd.epson.salt          Proprietary content for Seiko Epson        slt           Yasuhito Nagatomo
SimpleAnimeLite Player. naga@rd.oda.epson.co.jpapplication/vnd.epson.ssf           Proprietary content for Seiko Epson        ssf           Shoji Hoshina
QUASS Stream Player.    Hoshina.Shoji@exc.epson.co.jp|

Table D-3. “Application” MIME types (continued)
MIME type                         Description                                Extension     Contact and referenceapplication/vnd.ericsson.         Phone Doubler Quick Call.                  qcall, qca    Paul Tidwellquickcall                paul.tidwell@ericsson.comhttp //www.ericsson.comapplication/vnd.eudora.data       Eudora Version 4.3 and later.                            Pete Resnickpresnick@qualcomm.comapplication/vnd.fdf               Adobe Forms Data Format.“Forms Data Format,” Technical
Note 5173, Adobe Systemsapplication/vnd.ffsns             Used for application communication                       Mary Holstegewith FirstFloor’s Smart Delivery.                        holstege@firstfloor.comapplication/vnd.FloGraphIt        NpGraphIt.gphapplication/vnd.framemaker        Adobe FrameMaker files.                    fm, mif,      http //www.adobe.combookapplication/vnd.fsc.              Supports Friendly Software Corpora-        fsc           Derek Smithweblaunch                         tion’s golf simulation software.                         derek@friendlysoftware.comapplication/vnd.fujitsu.oasys     Supports Fujitsu’s OASYS software.         oas           Nobukazu Togashiapplication/vnd.fujitsu.oasys2                            togashi@ai.cs.fujitsu.co.jpapplication/vnd.fujitsu.oasys2    Supports Fujitsu’s OASYS V2 software.      oa2           Same as aboveapplication/vnd.fujitsu.oasys3    Support’sFujitsu’sOASYSV5software.         oa3           Seiji Okudairaokudaira@candy.paso.fujitsu.co.jpapplication/vnd.fujitsu.          Supports Fujitsu’s OASYS GraphPro          fg5           Masahiko Sugimotooasysgp                           software.               sugimoto@sz.sel.fujitsu.co.jpapplication/vnd.fujitsu.          Support’s Fujitsu’s OASYS Presenta-        bh2           Masumi Ogitaoasysprs                          tion software.          ogita@oa.tfl.fujitsu.co.jpapplication/vnd.fujixerox.ddd     Supports Fuji Xerox’s EDMICS 2000          ddd           Masanori Ondaand DocuFile.           Masanori.Onda@fujixerox.co.jpapplication/vnd.fujixerox.        SupportsFujiXerox’sDocuWorksDesk           xdw           Yasuo Taguchidocuworks                         and DocuWorks Viewer software.                           yasuo.taguchi@fujixerox.co.jpapplication/vnd.fujixerox.        SupportsFujiXerox’sDocuWorksDesk           xbd           Same as above.docuworks.binder                  and DocuWorks Viewer software.application/vnd.fut-misnet        Unknown.                Jaan Pruulmannjaan@fut.eeapplication/vnd.grafeq            Lets users of GrafEq exchange GrafEq       gqf, gqs      http //www.peda.comdocuments through the Web andemail.application/vnd.groove-           Groove is a peer-to-peer communica-        gac           Todd Josephaccount                           tion system implementing a virtual                       todd_joseph@groove.netspace for small group interaction.application/vnd.groove-           Same as above.                             gim           Same as aboveidentity-messageapplication/vnd.groove-           Same as above.                             grv           Same as aboveinjectorapplication/vnd.groove-tool-      Same as above.                             gtm           Same as abovemessage|

Table D-3. “Application” MIME types (continued)
MIME type                     Description                         Extension   Contact and referenceapplication/vnd.groove-tool-  Same as above.                      tpl         Same as abovetemplateapplication/vnd.groove-vcard  Same as above.                      vcg         Same as aboveapplication/vnd.hhe.lesson-   Supports the LessonPlayer and Pre-  les         Randy Jonesplayer                        sentationEditor software.                       Harcourt E-Learningrandy_jones@archipelago.comapplication/vnd.hp-HPGL       HPGL files.    The HP-GL/2 and HP RTL Reference
Guide, Addison Wesley, ISBN0201310147application/vnd.hp-hpid       Supports Hewlett-Packard’s Instant  hpi, hpid   http //www.instant-delivery.com
Delivery Software.application/vnd.hp-hps        Supports Hewlett-Packard’s Web-     hps         http //www.hp.com/go/
PrintSmart software.                            webprintsmart_mimetype_specs/application/vnd.hp-PCL        PCL printer files.                  pcl         “PCL-PJL Technical Reference Man-application/vnd.hp-PCLXL                     ual Documentation Package,” HP
Part No. 5012-0330application/vnd.httphone      HTTPhoneasynchronousvoiceoverIP                 Franck LeFevresystem.        franck@k1info.comapplication/vnd.hzn-3d-       Used to encode crossword puzzles by x3d         James Minniscrossword                     Horizon, A Glimpse of Tomorrow.                 james_minnis@glimpse-of-tomorrow.comapplication/vnd.ibm.          Print Services Facility (PSF), AFP Con-         Roger Buisafplinedata                   version and Indexing Facility (ACIF).           buis@us.ibm.comapplication/vnd.ibm.MiniPay   MiniPay authentication and payment  mpy         Amir Herzbergsoftware.      amirh@vnet.ibm.comapplication/vnd.ibm.modcap    Mixed Object Document Content.      list3820,   Reinhard Hohenseelistafp,    rhohensee@vnet.ibm.comafp,        “Mixed Object Document Contentpseg3820    Architecture Reference,” IBM publi-cation SC31-6802application/vnd.informix-     Informix Visionary.                 vis         Christopher Galesvisionary   christopher.gales@informix.comapplication/vnd.intercon.     SupportsInterconAssociatesFormNet   xpw, xpx    Thomas A. Gurakformnet                       software.      assoc@intercon.roc servtech.comapplication/vnd.intertrust.   Supports InterTrust architecture for            InterTrust Technologiesdigibox                       secure electronic commerce and digi-            460 Oakmead Parkwayapplication/vnd.intertrust.   tal rights management.                          Sunnyvale, CA 94086 USAnncp        info@intertrust.comhttp //www.intertrust.comapplication/vnd.intu.qbo      Intended for use only with Quick-   qbo         Greg Scratchley
Books 6.0 (Canada).                             greg_scratchley@intuit.com
Format of these files discussed intheOpenFinancialExchangespecs,available from http://www.ofx.net|

Table D-3. “Application” MIME types (continued)
MIME type                          Description                                Extension      Contact and referenceapplication/vnd.intu.qfx           IntendedforuseonlywithQuicken99             qfx           Same as aboveand following versions.application/vnd.is-xpr             Express by Infoseek.                        xpr           Satish Natarajansatish@infoseek.comapplication/vnd.japannet-          Supports Mitsubishi Electric’s Japan-                     Jun Yoshitakedirectory-service                  Net security, authentication, and pay-                    yositake@iss.isl.melco.co.jpapplication/vnd.japannet-          ment sofwtare.jpnstore-wakeupapplication/vnd.japannet-payment-wakeupapplication/vnd.japannet-registrationapplication/vnd.japannet-registration-wakeupapplication/vnd.japannet-setstore-wakeupapplication/vnd.japannet-verificationapplication/vnd.japannet-verification-wakeupapplication/vnd.koan               Supports the automatic playback of          skp, skd,     Peter Cole
Koan music files over the Internet, by      skm, skt      pcole@sseyod.demon.co.ukhelper applications such as SSEYO
Koan Netscape Plugin.application/vnd.lotus-1-2-3        Lotus 1-2-3 and Lotus approach.             123,          Paul Wattenbergerwk1,          Paul_Wattenberger@lotus.comwk3,wk4application/vnd.lotus-             Lotus Approach.                             apr, vew      Same as aboveapproachapplication/vnd.lotus-             Lotus Freelance.                            prz, pre      Same as abovefreelanceapplication/vnd.lotus-notes        Lotus Notes.                                nsf, ntf,     Michael Laramiendl, ns4,     laramiem@btv.ibm.comns3, ns2,nsh, nsgapplication/vnd.lotus-             Lotus Organizer.                            or3, or2,     Paul Wattenbergerorganizer    org           Paul_Wattenberger@lotus.comapplication/vnd.lotus-             Lotus ScreenCam.                            scm           Same as abovescreencamapplication/vnd.lotus-             Lotus Word Pro.                             lwp, sam      Same as abovewordproapplication/vnd.mcd                Micro CADAM CAD software.                   mcd           Tadashi Gotohtgotoh@cadamsystems.co.jphttp //www.cadamsystems.co.jp|

Table D-3. “Application” MIME types (continued)
MIME type                     Description                         Extension   Contact and referenceapplication/vnd.              Supports Media Station’s CDKey      cdkey       Henry Flurrymediastation.cdkey            remote CDROM communications                     henryf@mediastation.comprotocol.application/vnd.meridian-     Slingshot by Meridian Data.                     Eric Wedelslingshot   Meridian Data, Inc.5615 Scotts Valley Drive
Scotts Valley, CA 95066ewedel@meridian-data.comapplication/vnd.mif           FrameMaker interchange format.      mif         ftp://ftp.frame.com/pub/techsup/techinfo/dos/mif4.zip
Mike Wexler
Adobe Systems, Inc333 W. San Carlos St.
San Jose, CA 95110 USAmwexler@adobe.comapplication/vnd.minisoft-     NetMail 3000 save format.                       Minisoft, Inc.hp3000-save support@minisoft.comftp://ftp.3k.com/DOC/ms92-save-format.txtapplication/vnd.mitsubishi.   Supports Mitsubishi Electric’s                  Manabu Tanakamisty-guard.trustweb          Trustweb software.                              mtana@iss.isl.melco.co.jpapplication/vnd.Mobius.DAF    Supports Mobius Management Sys-     daf         Celso Rodrigueztems software. crodrigu@mobius.com
Greg Chrzczongchrzczo@mobius.comapplication/vnd.Mobius.DIS    Same as above.                      dis         Same as aboveapplication/vnd.Mobius.MBK    Same as above.                      mbk         Same as aboveapplication/vnd.Mobius.MQY    Same as above.                      mqy         Same as aboveapplication/vnd.Mobius.MSL    Same as above.                      msl         Same as aboveapplication/vnd.Mobius.PLC    Same as above.                      plc         Same as aboveapplication/vnd.Mobius.TXF    Same as above.                      txf         Same as aboveapplication/vnd.motorola.     FLEXsuite™ is a collection of wireless          Mark Pattonflexsuite                     messagingprotocols.Thistypeisused               Motorola Personal Networks Groupby the network gateways of wireless             fmp014@email.mot.commessagingserviceprovidersaswellas               FLEXsuite™ specification availablewireless OSs and applications.                  from Motorola under appropriatelicensing agreementapplication/vnd.motorola.     FLEXsuite™ is a collection of wireless          Same as aboveflexsuite.adsi                messaging protocols. This type pro-vides a wireless-friendly format forenabling various data-encryptionsolutions.|

Table D-3. “Application” MIME types (continued)
MIME type                          Description                               Extension     Contact and referenceapplication/vnd.motorola.          FLEXsuite™ is a collection of wireless                  Same as aboveflexsuite.fis                      messaging protocols. This type is awireless-friendly format for the effi-cient delivery of structured informa-tion (e.g., news, stocks, weather) to awireless device.application/vnd.motorola.          FLEXsuite™ is a collection of wireless                  Same as aboveflexsuite.gotap                    messaging protocols. This type pro-vides a common wireless-friendly for-mat for the programming of wirelessdevice attributes via over-the-airmessages.application/vnd.motorola.          FLEXsuite™ is a collection of wireless                  Same as aboveflexsuite.kmr                      messaging protocols. This type pro-vides a wireless-friendly format forencryption key management.application/vnd.motorola.          FLEXsuite™ is a collection of wireless                  Same as aboveflexsuite.ttc                      messaging protocols. This type sup-ports a wireless-friendly format forthe efficient delivery of text usingtoken text compression.application/vnd.motorola.          FLEXsuite™ is a collection of wireless                  Same as aboveflexsuite.wem                      messaging protocols. This type pro-vides a wireless-friendly format forthe communication of Internet emailto wireless devices.application/vnd.mozilla.           Supports the Mozilla Internet applica-    xul           Dan Rosen2xul+xml                            tion suite.            dr@netscape.comapplication/vnd.ms-artgalry        Supports Microsoft’s Art Gallery.         cil           deansl@microsoft.comapplication/vnd.ms-asf             ASFisamultimediafileformatwhose           asf           Eric Fleischmancontentsaredesignedtobestreamed                         ericf@microsoft.comacross a network to support distrib-                    http //www.microsoft.com/uted multimedia applications. ASF                       mind/0997/netshow/netshow.aspcontentmayincludeanycombinationof any media type (e.g., audio, video,images, URLs, HTML content, MIDI,2-D and 3-D modeling, scripts, andobjects of various types).application/vnd.ms-excel           Microsoft Excel spreadsheet.              xls           Sukvinder S. Gillsukvg@microsoft.comapplication/vnd.ms-lrm             Microsoft proprietary.                    lrm           Eric Ledouxericle@microsoft.comapplication/vnd.ms-                Microsoft PowerPoint presentation.        ppt           Sukvinder S. Gillpowerpoint               sukvg@microsoft.comapplication/vnd.ms-project         Microsoft Project file.                   mpp           Same as above|

Table D-3. “Application” MIME types (continued)
MIME type                         Description                               Extension     Contact and referenceapplication/vnd.ms-tnef           Identifies an attachment that in gen-                   Same as aboveeral would be processable only by a
MAPI-aware application. This type isan encapsulated format of rich MAPIproperties, such as Rich Text and Iconinformation, that may otherwise bedegradedbythemessagingtransport.application/vnd.ms-works          Microsoft Works software.                               Same as aboveapplication/vnd.mseq              MSEQisacompactmultimediaformat            mseq          Gwenael Le Bodicsuitable for wireless devices.                          Gwenael.le_bodic@alcatel.frhttp //www.3gpp.orgapplication/vnd.msign             Used by applications implementing                       Malte Borcherdingthe msign protocol, which requests                      Malte.Borcherding@brokat.comsignatures from mobile devices.application/vnd.music-niff        NIFF music files.      Cindy Grande72723.1272@compuserve.comftp://blackbox.cartah.washington.edu/pub/NIFF/NIFF6A.TXTapplication/vnd.musician          MUSICIANscoringlanguage/encoding          mus           Robert G. Adamsconceived and developed by Renai-                       gadams@renaiscience.com
Science Corporation.application/vnd.netfpx            Intended for dynamic retrieval of         fpx           Andy Mutzmultiresolutionimageinformation,as                      andy_mutz@hp.comused by Hewlett-Packard Company
Imaging for Internet.application/vnd.noblenet-         Supports the NobleNet Directory soft-     nnd           http //www.noblenet.comdirectory                         ware, purchased by RogueWave.application/vnd.noblenet-         Supports the NobleNet Sealer soft-        nns           http //www.noblenet.comsealer                            ware, purchased by RogueWave.application/vnd.noblenet-         SupportstheNobleNetWebsoftware,           nnw           http //www.noblenet.comweb                               purchased by RogueWave.application/vnd.novadigm.         SupportsNovadigm’sRADIAandEDM             edm           Phil Burgard
EDM                               products.              pburgard@novadigm.comapplication/vnd.novadigm.         Same as above.                            edx           Same as above
EDXapplication/vnd.novadigm.         Same as above.                            ext           Same as above
EXTapplication/vnd.osa.              Supports the Open Software Associ-        ndc           Steve Klosnetdeploy                         ates netDeploy application deploy-                      stevek@osa.comment software.         http //www.osa.comapplication/vnd.palm              Used by PalmOS system software and        prc, pdb,     Gavin Peacockapplications—this new type, “appli-       pqa, oprc     gpeacock@palm.comcation/vnd.palm,” replaces the oldtype “application/x-pilot.”|

Table D-3. “Application” MIME types (continued)
MIME type                         Description                              Extension     Contact and referenceapplication/vnd.pg.format         Proprietary Proctor & Gamble Stan-        str          April Gandertdard Reporting System.TN152
Procter & Gamble Way
Cincinnati, Ohio 45202(513) 983-4249application/vnd.pg.osasli         Proprietary Proctor & Gamble Stan-        ei6          Same as abovedard Reporting System.application/vnd.                  Used only by Sybase PowerBuilder          pbd          Reed Shiltspowerbuilder6                     release 6, 7, and 7.5 runtime environ-                 reed.shilts@sybase.comapplication/vnd.                  ments, nonsecure and secure.powerbuilder6-sapplication/vnd.powerbuilder7application/vnd.powerbuilder7-sapplication/vnd.powerbuilder75application/vnd.powerbuilder75-sapplication/vnd.                  Preview Systems ZipLock/VBox              box,         Roman Smolgovskypreviewsystems.box                product. vbox         romans@previewsystems.comhttp //www.previewsystems.comapplication/vnd.publishare-       Used by Capella Computers’                qps          Oren Ben-Kikidelta-tree                        PubliShare runtime environment.                        publishare-delta-tree@capella.co.ilapplication/vnd.rapid             Emultek’s rapid packaged                  zrp          Itay Szekelyapplications.         etay@emultek.co.ilapplication/vnd.s3sms             Integratesthetransfermechanismsof                      Lauri Tarkkalathe Sonera SmartTrust products into                    Lauri.Tarkkala@sonera.comthe Internet infrastructure.                           http //www.smarttrust.comapplication/vnd.seemail           Supports the transmission of SeeMail      see          Steven Webbfiles. SeeMail is an application that                  steve@wynde.comcaptures video and sound and uses                      http //www.realmediainc.combitwise compression to compress andarchive the two pieces into one file.application/vnd.shana.            Shana e-forms data formats.               ifm          Guy Selzlerinformed.formdata      Shana Corporationgselzler@shana.comapplication/vnd.shana.            Shana e-forms data formats.               itp          Same as aboveinformed.formtempapplication/vnd.shana.            Shana e-forms data formats.               iif, iif1    Same as aboveinformed.interchangeapplication/vnd.shana.            Shana e-forms data formats.               ipk, ipkg    Same as aboveinformed.packageapplication/vnd.street-stream     Proprietary to Street Technologies.                    Glenn Levitt
Street Technologiesstreetd1@ix.netcom.com|

Table D-3. “Application” MIME types (continued)
MIME type                         Description                              Extension     Contact and referenceapplication/vnd.svd               Dateware Electronics SVD files.                        Scott Beckerdataware@compumedia.comapplication/vnd.swiftview-ics     Supports SwiftView®.  Randy Prakkentech@ndg.comhttp //www.ndg.com/svm htmapplication/vnd.triscape.mxs      Supports Triscape Map Explorer.          mxs           Steven Simonoffscs@triscape.comapplication/vnd.trueapp           True BASIC files.                        tra           J. Scott Heplerscott@truebasic.comapplication/vnd.truedoc           Proprietary to Bitstream, Inc.                         Brad Chasebrad_chase@bitstream.comapplication/vnd.ufdl              UWI’s UFDL files.                        ufdl,ufd,     Dave Manningfrm           dmanning@uwi.comhttp //www.uwi.com/application/vnd.uplanet.alert     FormatsusedbyUnwiredPlanet(now                         iana-registrar@uplanet.comapplication/vnd.uplanet.          Openwave) UP browser micro-                            http //www.openwave.comalert-wbxml                       browser for mobile devices.application/vnd.uplanet.bearer-choi-wbxmlapplication/vnd.uplanet.bearer-choiceapplication/vnd.uplanet.cacheopapplication/vnd.uplanet.cacheop-wbxmlapplication/vnd.uplanet.channelapplication/vnd.uplanet.channel-wbxmlapplication/vnd.uplanet.listapplication/vnd.uplanet.list-wbxmlapplication/vnd.uplanet.listcmdapplication/vnd.uplanet.listcmd-wbxmlapplication/vnd.uplanet.signalapplication/vnd.vcx               VirtualCatalog.                          vcx           Taisuke Sugimotosugimototi@noanet.nttdata.co.jpapplication/vnd.vectorworks       VectorWorks graphics files.              mcd           Paul C. Pharrpharr@diehlgraphsoft.comapplication/vnd.vidsoft.          VidConference format.                    vsc           Robert Hessvidconference          hess@vidsoft.deapplication/vnd.visio             Visio files.                             vsd, vst,     Troy Sandalvsw, vss      troys@visio.com|

Table D-3. “Application” MIME types (continued)
MIME type                          Description                                Extension     Contact and referenceapplication/vnd.vividence.         Vividence files.                           vsf, vtd,     Mark Risherscriptfile  vd            markr@vividence.comapplication/vnd.wap.sic            WAP Service Indication format.             sic,          WAP Forum Ltdwbxml         http //www.wapforum.orgapplication/vnd.wap.slc            WAP Service Loading format.                slc,          Same as above
AnythingthatconformstotheService           wbxml
Loading specification, available athttp://www.wapforum.org.application/vnd.wap.wbxml          WAP WBXML binary XML format for            wbxml         Same as abovewireless devices.       “WAP Binary XML Content
Format—WBXML version 1.1”application/vnd.wap.wmlc           WAP WML format for wireless                wmlc,         Same as abovedevices.  wbxmlapplication/vnd.wap.               WAP WMLScript format.                      wmlsc         Same as abovewmlscriptcapplication/vnd.webturbo           WebTurbo format.                           wtb           Yaser Rehem
Sapient Corporationyrehem@sapient.comapplication/vnd.wrq-hp3000-        Supports HP3000 formats.support@wrq.comlabelled                  support@3k.comapplication/vnd.wt.stf             Supports Worldtalk software.               stf           Bill Wohlerwohler@worldtalk.comapplication/vnd.xara               Xara files are saved by CorelXARA, an      xar           David Matthewmanobject-oriented vector graphics pack-                    david@xara.comage written by Xara Limited (and                         http //www.xara.commarketed by Corel).application/vnd.xfdl               UWI’s XFDL files.                          xfdl, xfd,    Dave Manningfrm           dmanning@uwi.comhttp //www.uwi.comapplication/vnd.yellowriver-       Supports the Yellow River Custom-          cmp           yellowriversw@yahoo.comcustom-menu                        Menu plug-in, which provides cus-tomized browser drop-down menus.application/whoispp-query          Defines Whois++ protocol queries                         RFC 2957within MIME.application/whoispp-               Defines Whois++ protocol responses                       RFC 2958response                           within MIME.application/wita                   Wang Information Transfer                                Document number 715-0050A,
Architecture.           Wang Laboratoriescampbell@redsox.bsw.comapplication/wordperfect5.1         WordPerfect documents.application/x400-bp                Carries any X.400 body part for which                    RFC 1494there is no registered IANA mapping.|

Table D-3. “Application” MIME types (continued)
MIME type                          Description                                Extension      Contact and referenceapplication/x-bcpio                Old-style binary CPIO archives.             bcpioapplication/x-cdlink               Allows integration of CD-ROM media          vcd           http //www.cdlink.comwithin web pages.application/x-chess-pgm            From Apachemime.types.                      pgnapplication/x-compress             Binary data from Unix compress.             zapplication/x-cpio                 CPIO archive file.                          cpioapplication/x-csh                  CSH scripts.                                cshapplication/x-director             Macromedia director files.                  dcr, dir,dxrapplication/x-dvi                  TeX DVI files.                              dviapplication/x-futuresplash         From Apachemime.types.                      splapplication/x-gtar                 GNU tar archives.                           gtarapplication/x-gzip                 GZIP compressed data.                       gzapplication/x-hdf                  From Apachemime.types.                      hdfapplication/x-javascript           JavaScript files.                           jsapplication/x-koan                 Supports the automatic playback of          skp, skd,
Koan music files over the Internet, by      skt, skmhelper applications such as SSEYO
Koan Netscape Plugin.application/x-latex                LaTeX files.                                latexapplication/x-netcdf               NETCDF files.                               nc, cdfapplication/x-sh                   SH scripts.shapplication/x-shar                 SHAR archives.                              sharapplication/x-shockwave-           Macromedia Flash files.                     swfflashapplication/x-stuffit              StuffIt archives.                           sitapplication/x-sv4cpio              Unix SysV R4 CPIO archives.                 sv4cpioapplication/x-sv4crc               Unix SysV R4 CPIO w/CRC archives.           sv4crcapplication/x-tar                  TAR archives.                               tarapplication/x-tcl                  TCL scripts.                                tclapplication/x-tex                  TeX files. texapplication/x-texinfo              TeX info files.                             texinfo,texiapplication/x-troff                TROFF files.                                t, tr, roffapplication/x-troff-man            TROFF Unix manpages.                        manapplication/x-troff-me             TROFF+me files.                             meapplication/x-troff-ms             TROFF+ms files                              ms|

Table D-3. “Application” MIME types (continued)
MIME type                        Description                             Extension     Contact and referenceapplication/x-ustar              The extended tar interchange format.     ustar        See the IEEE 1003.1(1990)specificationsapplication/x-wais-source        WAIS source structure.                   srcapplication/xml                  Extensible Markup Language format        xml, dtd     RFC 2376file (use text/xml if you want the filetreatedasplaintextbybrowsers,etc.).application/zip                  PKWARE zip archives.                     zipaudio/*
Table D-4 summarizes audio content types.
Table D-4. “Audio” MIME types
MIME type                        Description                              Extension    Contact and referenceaudio/32kadpcm                   8 kHz ADPCM audio encoding.                           RFC 2421audio/basic                      Audio encoded with 8-kHz monaural        au, snd      RFC 13418-bit ISDN u-law PCM.audio/G.772.1                    G.722.1compresses50Hz–7kHzaudio                       RFC 3047signals into 24 kbit/s or 32 kbit/s. Itmay be used for speech, music, andother types of audio.audio/L16                        Audio/L16 is based on L16, described                  RFC 2586in RFC 1890. L16 denotes uncom-pressed audio data, using 16-bitsigned representation.audio/MP4A-LATM                  MPEG-4 audio.        RFC 3016audio/midi                       MIDI music files.                        mid,midi, karaudio/mpeg                       MPEG encoded audio files.                mpga,        RFC 3003mp2,mp3audio/parityfec                  Parity-based forward error correction                 RFC 3009for RTP audio.audio/prs.sid                    Commodore 64 SID audio files.            sid, psid    http //www.geocities.com/
SiliconValley/Lakes/5147/sidplay/docs.html#fileformatsaudio/telephone-event            Logical telephone event.                              RFC 2833audio/tone                       Telephonic sound pattern.                             RFC 2833audio/vnd.cns.anp1               Supportsvoiceandunifiedmessaging                      Ann McLaughlinapplication features available on the                 Comverse Network Systems
Access NP network services platform                   amclaughlin@comversens.comfrom Comverse Network Systems.|

Table D-4. “Audio” MIME types (continued)
MIME type                         Description                               Extension    Contact and referenceaudio/vnd.cns.inf1                Supportsvoiceandunifiedmessaging                       Same as aboveapplication features available on the
TRILOGUE Infinity network servicesplatform from Comverse Network
Systems.audio/vnd.digital-winds           Digital Winds music is never-ending,      eol          Armands Strazdsreproducible, and interactive MIDI                     armands.strazds@medienhaus-music in very small packages (<3K).                    bremen.deaudio/vnd.everad.plj              Proprietary EverAD audio encoding.        plj          Tomer Weisbergtomer@everad.comaudio/vnd.lucent.voice            Voice messaging including Lucent          lvp          Frederick Block
Technologies’ Intuity™ AUDIX® Mul-                     rickblock@lucent.comtimedia Messaging System and the                       http //www.lucent.com/lvp/
Lucent Voice Player.audio/vnd.nortel.vbk              Proprietary Nortel Networks Voice         vbk          Glenn Parsons
Block audio encoding. Glenn.Parsons@NortelNetworks.comaudio/vnd.nuera.ecelp4800         Proprietary Nuera Communications          ecelp4800    Michael Foxaudio and speech encoding, available                   mfox@nuera.comin Nuera voice-over-IP gateways, ter-minals, application servers, and as amedia service for various host plat-forms and OSs.audio/vnd.nuera.ecelp7470         Same as above.                            ecelp7470    Same as aboveaudio/vnd.nuera.ecelp9600         Same as above.                            ecelp9600    Same as aboveaudio/vnd.octel.sbc               Variable-rate encoding averaging 18                    Jeff Bouiskbps used for voice messaging in                       jbouis@lucent.com
Lucent Technologies’ Sierra™, Over-ture™, and IMA™ platforms.audio/vnd.qcelp                   Qualcomm audio encoding.                  qcp          Andy Dejacoadejaco@qualcomm.comaudio/vnd.rhetorex.               32-kbps Rhetorex™ ADPCM audio                          Jeff Bouis32kadpcm                          encoding used in voice messaging                       jbouis@lucent.comproducts such as Lucent Technolo-gies’s CallPerformer™, Unified Mes-senger™, and other products.audio/vnd.vmx.cvsd                Audioencodingusedinvoicemessag-                        Same as aboveing products including Lucent Tech-nologies’ Overture200™, Overture300™, and VMX 300™ product lines.audio/x-aiff                      AIFF audio file format.                   aif, aiff,aifcaudio/x-pn-realaudio              RealAudio metafile format by Real         ram, rm
Networks (formerly Progressive
Networks).audio/x-pn-realaudio-plugin       From Apachemime.types.                    rpm|

Table D-4. “Audio” MIME types (continued)
MIME type                     Description                         Extension   Contact and referenceaudio/x-realaudio             RealAudio audio format by Real      ra
Networks (formerly Progressive
Networks).audio/x-wav                   WAV audio files.                    wavchemical/*
Much of the information in Table D-5 was obtained courtesy of the “Chemical
MIME Home Page” (http://www.ch.ic.ac.uk/chemime/).
Table D-5. “Chemical” MIME types
MIME type                     Description                         Extension   Contact and referencechemical/x-alchemy            Alchemy format                      alc         http //www.camsoft.comchemical/x-cache-csf             csfchemical/x-cactvs-binary      CACTVS binary format                cbin        http //cactvs.cit.nih.govchemical/x-cactvs-ascii       CACTVS ASCII format                 cascii      http //cactvs.cit.nih.govchemical/x-cactvs-table       CACTVS table format                 ctab        http //cactvs.cit.nih.govchemical/x-cdx                ChemDraw eXchange file              cdx         http //www.camsoft.comchemical/x-cerius             MSI Cerius II format                cer         http //www.msi.comchemical/x-chemdraw           ChemDraw file                       chm         http //www.camsoft.comchemical/x-cif                Crystallographic Interchange Format cif         http //www.bernstein-plus-sons.com/software/rasmol/http //ndbserver.rutgers.edu/NDB/mmcif/examples/index.htmlchemical/x-mmcif              MacroMolecular CIF                  mcif        Same as abovechemical/x-chem3d             Chem3D format                       c3d         http //www.camsoft.comchemical/x-cmdf               CrystalMaker Data Format            cmdf        http //www.crystalmaker.co.ukchemical/x-compass            Compass program of the Takahashi    cpachemical/x-crossfire          Crossfire file                      bsdchemical/x-cml                Chemical Markup Language            cml         http //www.xml-cml.orgchemical/x-csml               Chemical Style Markup Language      csml,       http //www.mdli.comcsmchemical/x-ctx                Gasteiger group CTX file format     ctxchemical/x-cxf                   cxfchemical/x-daylight-smiles    Smiles format                       smi         http //www.daylight.com/dayhtml/smiles/index.htmlchemical/x-embl-dl-           EMBL nucleotide format              emb         http //mercury.ebi.ac.uknucleotidechemical/x-galactic-spc       SPC format for spectral and         spc         http //www.galactic.com/galactic/chromatographic data                            Data/spcvue.htm|

Table D-5. “Chemical” MIME types (continued)
MIME type                         Description                               Extension    Contact and referencechemical/x-gamess-input           GAMESS Input format                       inp, gam     http //www.msg.ameslab.gov/
GAMESS/Graphics/
MacMolPlt.shtmlchemical/x-gaussian-input         Gaussian Input format                     gau          http //www.mdli.comchemical/x-gaussian-              Gaussian Checkpoint format                fch, fchk    http //products.camsoft.comcheckpointchemical/x-gaussian-cube          GaussianCube(Wavefunction)format          cub          http //www.mdli.comchemical/x-gcg8-sequence                   gcgchemical/x-genbank                ToGenBank format                          genchemical/x-isostar                IsoStar Library of intermolecular         istr, ist    http //www.ccdc.cam.ac.ukinteractionschemical/x-jcamp-dx               JCAMP Spectroscopic Data Exchange         jdx, dx      http //www.mdli.comformatchemical/x-jjc-review-surface     Re_View3 Orbital Contour files            rv3          http //www.brunel.ac.uk/depts/chem/ch241s/re_view/rv3 htmchemical/x-jjc-review-xyz         Re_View3 Animation files                  xyb          http //www.brunel.ac.uk/depts/chem/ch241s/re_view/rv3 htmchemical/x-jjc-review-vib         Re_View3 Vibration files                  rv2, vib     http //www.brunel.ac.uk/depts/chem/ch241s/re_view/rv3 htmchemical/x-kinemage               Kinetic (Protein Structure) Images        kin          http //www.faseb.org/protein/kinemages/MageSoftware.htmlchemical/x-macmolecule            MacMolecule file format                   mcmchemical/x-macromodel-            MacroModel Molecular Mechanics            mmd,         http //www.columbia.edu/cu/input     mmod         chemistry/chemical/x-mdl-molfile            MDL Molfile                               mol          http //www.mdli.comchemical/x-mdl-rdfile             Reaction data file                        rd           http //www.mdli.comchemical/x-mdl-rxnfile            MDL Reaction format                       rxn          http //www.mdli.comchemical/x-mdl-sdfile             MDL Structure data file                   sd           http //www.mdli.comchemical/x-mdl-tgf                MDL Transportable Graphics Format         tgf          http //www.mdli.comchemical/x-mif                             mifchemical/x-mol2                   Portable representation of a SYBYL        mol2         http //www.tripos.commoleculechemical/x-molconn-Z              Molconn-Z format                          b            http //www.eslc.vabiotech.com/molconn/molconnz.htmlchemical/x-mopac-input            MOPAC Input format                        mop          http //www.mdli.comchemical/x-mopac-graph            MOPAC Graph format                        gpt          http //products.camsoft.comchemical/x-ncbi-asn1                       asn (oldform)chemical/x-ncbi-asn1-binary                valchemical/x-pdb                    Protein DataBank pdb                      pdb          http //www.mdli.com|

Table D-5. “Chemical” MIME types (continued)
MIME type                        Description                              Extension     Contact and referencechemical/x-swissprot             SWISS-PROT protein sequence              sw            http //www.expasy.ch/spdbv/text/database              download.htmchemical/x-vamas-iso14976        Versailles Agreement on Materials        vms           http //www.acolyte.co.uk/JISO/and Standardschemical/x-vmd                   Visual Molecular Dynamics                vmd           http //www.ks.uiuc.edu/Research/vmd/chemical/x-xtel                  Xtelplot file format                     xtel          http //www.recipnet.indiana.edu/graphics/xtelplot/xtelplot htmchemical/x-xyz                   Co-ordinate Animation format             xyz           http //www.mdli.comimage/*
Table D-6 summarizes some of the image types commonly exchanged by email and
HTTP.
Table D-6. “Image” MIME types
MIME type                        Description                              Extension     Contact and referenceimage/bmp                        Windows BMP image format.                bmpimage/cgm                        Computer Graphics Metafile (CGM) is                    Alan Francisan International Standard for the por-                 A.H.Francis@open.ac.uktable storage and transfer of 2-D                      See ISO 8632:1992, IS 8632:1992illustrations.        Amendment 1 (1994), and IS 8632:1992 Amendment 2 (1995)image/g3fax                      G3 Facsimile byte streams.                             RFC 1494image/gif                        Compuserve GIF images.                   gif           RFC 1341image/ief                                ief           RFC 1314image/jpeg                       JPEG images.                             jpeg,jpg,     JPEG Draft Standard ISO 10918-1jpe, jfif     CDimage/naplps                     North American Presentation Layer                      ANSI X3.110-1983 CSA T500-1983
Protocol Syntax (NAPLPS) images.image/png                        Portable Network Graphics (PNG)          png           Internet draft draft-boutell-png-images.               spec-04.txt, “Png (Portable
Network Graphics) Specification
Version 1.0”image/prs.btif                   Format used by Nations Bank for BTIF     btif, btf     Arthur Rubinimage viewing of checks and other                      arthurr@crt.comapplications.image/prs.pti                    PTI encoded images.                      pti           Juern Launjuern.laun@gmx.dehttp //server.hvzgymn.wn.schule-bw.de/pti/image/tiff                       TIFF images.                             tiff, tif     RFC 2302|

Table D-6. “Image” MIME types (continued)
MIME type                           Description                                Extension      Contact and referenceimage/vnd.cns.inf2                  Supports application features avail-                      Ann McLaughlinableontheTRILOGUEInfinitynetwork                          Comverse Network Systemsservices platform from Comverse Net-                      amclaughlin@comversens.comwork Systems.image/vnd.dxf                       DXF vector CAD files.                      dxfimage/vnd.fastbidsheet              A FastBid Sheet contains a raster or       fbs            Scott Beckervector image that represents an engi-                     scottb@bxwa.comneering or architectural drawing.image/vnd.fpx                       Kodak FlashPix images.                     fpx            Chris Wingformat_change_request@kodak.comhttp //www.kodak.comimage/vnd.fst                       Image format from FAST Search and          fst            Arild Fuldseth
Transfer.                Arild.Fuldseth@fast.noimage/vnd.fujixerox.edmics-         Fuji Xerox EDMICS MMR image                mmr            Masanori Ondammrformat.                  Masanori.Onda@fujixerox.co.jpimage/vnd.fujixerox.edmics-         Fuji Xerox EDMICS RLC image format.        rlc            Same as aboverlcimage/vnd.mix                       MIX files contain binary data in                          Saveen Reddy2streams that are used to represent                        saveenr@microsoft.comimagesandrelatedinformation.Theyare used by Microsoft PhotDraw and
PictureIt software.image/vnd.net-fpx                   Kodak FlashPix images.   Chris Wingformat_change_request@kodak.comhttp //www.kodak.comimage/vnd.wap.wbmp                  From Apachemime.types.                     wbmpimage/vnd.xiff                      ExtendedImageFormatusedbyPagis             xif            Steve Martinsoftware.                smartin@xis.xerox.comimage/x-cmu-raster                  From Apachemime.types.                     rasimage/x-portable-anymap             PBM generic images.                        pnm            Jeff Poskanzerhttp //www.acme.com/software/pbmplus/image/x-portable-bitmap             PBM bitmap images.                         pbm            Same as aboveimage/x-portable-graymap            PBM grayscale images.                      pgm            Same as aboveimage/x-portable-pixmap             PBM color images.                          ppm            Same as aboveimage/x-rgb                         Silicon Graphics’s RGB images.             rgbimage/x-xbitmap                     X-Window System bitmap images.             xbmimage/x-xpixmap                     X-Window System color images.              xpmimage/x-xwindowdump                 X-Window System screen capture             xwdimages.|
message/*
Messages are composite types used to communicate data objects (through email,
HTTP, or other transport protocols). Table D-7 describes the common MIME mes-sage types.
Table D-7. “Message” MIME types
MIME type                           DescriptionExtension      Contact and referencemessage/delivery-statusmessage/disposition-         RFC 2298notificationmessage/external-body        RFC 1341message/http                 RFC 2616message/news                        Defines a way to transmit news arti-                       RFC 1036cles via email for human reading—message/rfc822 is not sufficientbecause news headers have seman-tics beyond those defined by RFC 822.message/partial                     Permits the fragmented transmission                        RFC 1341of bodies that are thought to be toolarge to be sent directly by email.message/rfc822                      A complete email message. RFC 1341message/s-http                      SecureHTTPmessages,analternative                           RFC 2660to HTTP over SSL.model/*
ThemodelMIMEtypeisanIETF-registeredextensiontype.Itrepresentsmathemati-cal models of physical worlds, for computer-aided design, and 3-D graphics.
Table D-8 describes some of the model formats.
Table D-8. “Model” MIME types
MIME type                           DescriptionExtension      Contact and referencemodel/iges                          The Initial Graphics Exchange Specifi-      igs, iges      RFC 2077cation (IGES) defines a neutral dataformat that allows for the digitalexchange of information betweencomputer-aideddesign(CAD)systems.model/mesh    msh,           RFC 2077mesh,silomodel/vnd.dwf                       DWF CAD files.                              dwf            Jason Prattjason.pratt@autodesk.commodel/vnd.flatland.3dml             Supports 3DML models supported by           3dml,          Michael Powers
Flatland products.                          3dm            pow@flatland.comhttp //www.flatland.com|

Table D-8. “Model” MIME types (continued)
MIME type                         Description                               Extension    Contact and referencemodel/vnd.gdl                     The Geometric Description Language        gdl,gsm,     Attila Babitsmodel/vnd.gs-gdl                  (GDL)isaparametricobjectdefinition        win, dor,    ababits@graphisoft.hulanguage for ArchiCAD by Graphisoft.      lmp,rsm,     http //www.graphisoft.commsm,ismmodel/vnd.gtw                     Gen-Trix models.                          gtw          Yutaka Ozakiyutaka_ozaki@gen.co.jpmodel/vnd.mts                     MTS model format by Virtue.               mts          Boris Rabinovitchboris@virtue3d.commodel/vnd.parasolid.trans-        Binary Parasolid modeling file.           x_b          http //www.ugsolutions.com/mit.binary             products/parasolid/model/vnd.parasolid.trans-        Text Parasolid modeling file.             x_t          http //www.ugsolutions.com/mit.text               products/parasolid/model/vnd.vtu                     VTU model format by Virtue.               vtu          Boris Rabinovitchboris@virtue3d.commodel/vrml                        Virtual Reality Markup Language           wrl, vrml    RFC 2077format files.multipart/*
Multipart MIME types are composite objects that contain other objects. The sub-type describes the implementation of the multipart packaging and how to processthe components. Multipart media types are summarized in Table D-9.
Table D-9. “Multipart” MIME types
MIME type                         Description                               Extension    Contact and referencemultipart/alternative             The content consists of a list of alter-               RFC 1341native representations, each with itsown Content-Type. The client canselect the best supported component.multipart/appledouble             Apple Macintosh files contain                          http //www.isi.edu/in-notes/iana/“resource forks” and other desktop                     assignments/media-types/datathatdescribestheactualfilecon-                     multipart/appledoubletents. This multipart content sendsthe Apple metadata in one part andthe actual content in another part.multipart/byteranges              When an HTTP message includes the                      RFC 2068content of multiple ranges, these aretransmitted in a “multipart/byter-anges” object. This media typeincludestwoormoreparts,separatedby MIME boundaries, each with itsown Content-Type and Content-
Range fields.|

Table D-9. “Multipart” MIME types (continued)
MIME type                     Description                         Extension   Contact and referencemultipart/digest              Contains a collection of individual             RFC 1341email messages, in an easy-to-readform.multipart/encrypted           Uses two parts to support crypto-               RFC 1847graphically encrypted content. Thefirst part contains the control infor-mation necessary to decrypt the datainthesecondbodypartandislabeledaccording to the value of the protocolparameter. The second part containsthe encrypted data in type applica-tion/octet-stream.multipart/form-data           Used to bundle up a set of values as            RFC 2388the result of a user filling out a form.multipart/header-set          Separates user data from arbitrary              http //www.isi.edu/in-notes/iana/descriptive metadata.                           assignments/media-types/multipart/header-setmultipart/mixed               A collection of objects.                        RFC 1341multipart/parallel           Syntactically identical to multipart/            RFC 1341mixed,butallofthepartsareintendedto be presented simultaneously, onsystems capable of doing so.multipart/related             Intended for compound objects con-              RFC 2387sisting of several interrelated bodyparts. The relationships between thebody parts distinguish them fromother object types. These relation-ships often are represented by linksinternal to the object’s componentsthat reference the other components.multipart/report              Defines a general container type for            RFC 1892electronic mail reports of any kind.multipart/signed              Uses two parts to support crypto-               RFC 1847graphically signed content. The firstpartisthecontent,includingitsMIMEheaders.Thesecondpartcontainstheinformation necessary to verify thedigital signature.multipart/voice-message       Provides a mechanism for packaging              RFCs 2421 and 2423a voice message into one containerthat is tagged as VPIM v2–compliant.text/*
Text media types contain characters and potential formatting information. Table D-10summarizes text MIME types.|

Table D-10. “Text” MIME types
MIME type                           Description                                Extension      Contact and referencetext/calendar                       Supports the iCalendar calendaring                        RFC 2445and scheduling standard.text/css                            Cascading Style Sheets.                    css            RFC 2318text/directory                      Holds record data from a directory                        RFC 2425database, such as LDAP.text/enriched                       Simple formatted text, supporting                         RFC 1896fonts, colors, and spacing. SGML-liketags are used to begin and endformatting.text/html                           HTML file.html,          RFC 2854htmtext/parityfec                      Forward error correction for text                         RFC 3009streamed in an RTP stream.text/plain                          Plain old text.                            asc, txttext/prs.lines.tag                  Supports tagged forms, as used for         tag, dsc       John Linesemail registration.      john@paladin.demon.co.ukhttp //www.paladin.demon.co.uk/tag-types/text/rfc822-headers                 Usedtobundleasetofemailheaders,                           RFC 1892such as when sending mail failurereports.text/richtext                       Older form of enriched text. See text/     rtx            RFC 1341enriched.text/rtf                            The Rich Text Format (RTF) is a            rtfmethod of encoding formatted textand graphics for transfer betweenapplications. The format is widelysupported by word-processing appli-cations on the MS-DOS, Windows,
OS/2, and Macintosh platforms.text/sgml                           SGML markup files.                         sgml,          RFC 1874sgmtext/t140                           Supports standardized T.140 text, as                      RFC 2793usedinsynchronizedRTPmultimedia.text/tab-separated-values           TSV is a popular method of data inter-     tsv            http //www.isi.edu/in-notes/iana/changeamongdatabasesandspread-                            assignments/media-types/text/tab-sheets and word processors. It                            separated-valuesconsists of a set of lines, with fieldsseparated by tab characters.text/uri-list                       Simple, commented lists of URLs and        uris, uri      RFC 2483
URNs used by URN resolvers, and anyother applications that need to com-municate bulk URI lists.|

Table D-10. “Text” MIME types (continued)
MIME type                           DescriptionExtension      Contact and referencetext/vnd.abc                        ABC files are a human-readable for-         abc            http //www.gre.ac.uk/mat for musical scores.   ~c.walshaw/abc/http //home1.swipnet.se/~w-11382/abcbnf.htmtext/vnd.curl                       Provides a set of content definition        curl           Tim Hodgelanguages interpreted by the CURL                          thodge@curl.comruntime plug-in.text/vnd.DMClientScript             CommonDM Client Script files are            dms            Dan Bradleyused as hyperlinks to non-http sites                       dan@dantom.com(such as BYOND, IRC, or telnet)                            http //www.byond.com/code/ref/accessed by the Dream Seeker clientapplication.text/vnd.fly                        Fly is a text preprocessor that uses a      fly            John-Mark Gurneysimple syntax to create an interface                       jmg@flyidea.combetween databases and web pages.                           http //www.flyidea.comtext/vnd.fmi.flexstor               For use in the SUVDAMA and                  flx            http //www.ozone.fmi.fi/
UVRAPPF projects.         SUVDAMA/http //www.ozone.fmi.fi/UVRAPPF/text/vnd.in3d.3dml                  For In3D Player.                            3dml,          Michael Powers3dm            powers@insideout.nettext/vnd.in3d.spot                  For In3D Player.                            spot, spo      Same as abovetext/vnd.IPTC.NewsML                NewsML format specified by the              xml            David Allen
International Press Telecommunica-                         m_director_iptc@dial.pipex.comtions Council (IPTC).     http //www.iptc.orgtext/vnd.IPTC.NITF                  NITF format specified by the IPTC.          xml            Same as abovehttp //www.nitf.orgtext/vnd.latex-z                    Supports LaTeX documents contain-                          http //www.comlab.ox.ac.uk/ing Z notation. Z notation (pro-                           archive/z/nounced “zed”), is based on Zermelo-
Fraenkel set theory and first orderpredicate logic, and it is useful fordescribing computer systems.text/vnd.motorola.reflex            Provides a common method for sub-                          Mark Pattonmitting simple text messages from                          fmp014@email.mot.com
ReFLEX™ wireless devices. Part of the FLEXsuite™ of Enabling
Protocols specification availablefrom Motorola under the licensingagreementtext/vnd.ms-mediapackage            Thistypeisintendedtobehandledby             mpf            Jan Nelsonthe Microsoft application programs                         jann@microsoft.com
MStore.exe and 7 storDB.exe.|

Table D-10. “Text” MIME types (continued)
MIME type                           Description Extension     Contact and referencetext/vnd.wap.si                     Service Indication (SI) objects contain      si, xml       WAP Forum Ltda message describing an event and a                        http //www.wapforum.org
URI describing where to load the cor-responding service.text/vnd.wap.sl                     TheServiceLoading(SL)contenttype             sl, xml       Same as aboveprovidesameanstoconveyaURItoauser agent in a mobile client. The cli-ent itself automatically loads thecontent indicated by that URI andexecutes it in the addressed useragent without user interventionwhen appropriate.text/vnd.wap.wml                    Wireless Markup Language (WML) is            wml           Same as abovea markup language, based on XML,that defines content and user inter-face for narrow-band devices, includ-ing cellular phones and pagers.text/vnd.wap.wmlscript              WMLScript is an evolution of Java-           wmls          Same as above
Script for wireless devices.text/x-setext                       From Apachemime.types.                       etxtext/xml                            Extensible Markup Language format            xml           RFC 2376file (use application/xml if you wantthe browser to save to file whendownloaded).video/*
Table D-11 lists some popular video movie formats. Note that some video formatsare classified as application types.
Table D-11. “Video” MIME types
MIME type                           Description Extension     Contact and referencevideo/MP4V-ES                       MPEG-4 video payload, as carried by                        RFC 3016
RTP.video/mpeg                          Video encoded per the ISO 11172 CD           mpeg,         RFC 1341
MPEG standard.                               mpg,mpevideo/parityfec                     Forwarderrorcorrectingvideoformat                          RFC 3009for data carried through RTP streams.video/pointer                       Transporting pointer position infor-                       RFC 2862mation for presentations.video/quicktime                     Apple Quicktime video format.                qt, mov       http //www.apple.comvideo/vnd.fvt                       Video format from FAST Search &              fvt           Arild Fuldseth
Transfer.                 Arild.Fuldseth@fast.no|

Table D-11. “Video” MIME types (continued)
MIME type                            DescriptionExtension      Contact and referencevideo/vnd.motorola.video             Proprietary formats used by products                       Tom McGintyvideo/vnd.motorola.videop            from Motorola ISG.        Motorola ISGtmcginty@dma.isg.motvideo/vnd.mpegurl                    This media type consists of a series of     mxu            Heiko Recktenwald
URLs of MPEG Video files. uzs106@uni-bonn.de“Power and Responsibility: Conver-sationswithContributors,”Guyvan
Belle, et al., LMJ 9 (1999), 127–133, 129 (MIT Press)video/vnd.nokia.interleaved-         Used in Nokia 9210 Communicator             nim            Petteri Kangaslampimultimedia                           video player and related tools.                            petteri.kangaslampi@nokia.comvideo/x-msvideo                      Microsoft AVI movies.                       avi            http //www.microsoft.comvideo/x-sgi-movie                    Silicon Graphics’s movie format.            movie          http //www.sgi.com
Experimental Types
The set of primary types supports most content types. Table D-12lists one experi-mental type, for conferencing software, that is configured in some web servers.
Table D-12. Extension MIME types
MIME type                            DescriptionExtension      Contact and referencex-conference/x-cooltalk              Collaboration tool from Netscape            ice|

APPENDIX E                
Base-64 Encoding
Base-64 encoding is used by HTTP, for basic and digest authentication, and by sev-eral HTTP extensions. This appendix explains base-64 encoding and provides con-version tables and pointers to Perl software to help you correctly use base-64encoding in HTTP software.
Base-64 Encoding Makes Binary Data Safe
The base-64 encoding converts a series of arbitrary bytes into a longer sequence ofcommon text characters that are all legal header field values. Base-64 encoding letsus take user input or binary data, pack it into a safe format, and ship it as HTTPheader field values without fear of them containing colons, newlines, or binary val-ues that would break HTTP parsers.
Base-64 encoding was developed as part of the MIME multimedia electronic mailstandard, so MIME could transport rich text and arbitrary binary data between differ-ent legacy email gateways.* Base-64 encoding is similar in spirit, but more efficient inspace, to the uuencode and BinHex standards for textifying binary data. Section 6.8of MIME RFC 2045 details the base-64 algorithm.
Eight Bits to Six Bits
Base-64 encoding takes a sequence of 8-bit bytes, breaks the sequence into 6-bitpieces, and assigns each 6-bit piece to one of 64 characters comprising the base-64alphabet. The 64 possible output characters are common and safe to place in HTTPheader fields. The 64 characters include upper- and lowercase letters, numbers, +,* Some mail gateways would silently strip many “non-printing” characters with ASCII values between 0 and31. Other programs would interpret some bytes as flow control characters or other special control charac-ters, or convert carriage returns to line feeds and the like. Some programs wouldexperiencefatalerrorsuponreceiving international characters with a value above 127 because the software was not “8-bit clean.”570and /. The special character = also is used. The base-64 alphabet is shown in
Table E-1.
Note that because the base-64 encoding uses 8-bit characters to represent 6 bits ofinformation, base 64–encoded strings are about 33% larger than the original values.
Table E-1. Base-64 alphabet0         A         8        I         16        Q        24        Y         32       g         40       o         48        w        56        41         B         9        J         17        R        25        Z         33       h         41       p         49        x        57        52         C         10       K         18        S        26        a         34       i         42       q         50        y        58        63         D         11       L         19        T        27        b         35       j         43       r         51        z        59        74         E         12       M         20        U        28        c         36       k         44       s         52        0        60        85         F         13       N         21        V        29        d         37       l         45       t         53        1        61        96         G         14       O         22        W        30        e         38       m         46       u         54        2        62        +7         H         15       P         23        X        31        f         39       n         47       v         55        3        63        /
Figure E-1 shows a simple example of base-64 encoding. Here, the three-characterinput value “Ow!” is base 64–encoded, resulting in the four-character base 64–encoded value “T3ch”. It works like this:1. The string “Ow!” is broken into 3 8-bit bytes (0x4F, 0x77, 0x21).2. The 3 bytes create the 24-bit binary value 010011110111011100100001.3. These bits are segmented into the 6-bit sequences 010011, 110111, 01110,100001.4. Each of these 6-bit values represents a number from 0 to 63, corresponding toone of 64 characters in the base-64 alphabet. The resulting base 64–encodedstring is the 4-character string “T3ch”, which can then be sent across the wire as“safe” 8-bit characters, because only the most portable characters are used (let-ters, numbers, etc.).8-bit characters  O                              w!8-bit value (hexidecimal) $4F                             $77                    $218-bit value (binary)  0100111101110111001000016-bit value (decimal) 19                       55                     28                    33
Base-64 character T                         3ch
Figure E-1. Base-64 encoding example|

Base-64 Padding
Base-64 encoding takes a sequence of 8-bit bytes and segments the bit stream into 6-bit chunks. It is unlikely that the sequence of bits will divide evenly into 6-bit pieces.
When the bit sequence does not divide evenly into 6-bit pieces, the bit sequence ispadded with zero bits at the end to make the length of the bit sequence a multiple of24 (the least common multiple of 6 and 8 bits).
Whenencodingthepaddedbitstring, any group of 6 bits that is completely padding(containing no bits from the original data) is represented by a special 65th symbol:“=”. If a group of 6 bits is partially padded, the padding bits are set to zero.
Table E-2shows examples of padding. The initial input string “a:a” is 3 bytes long,or 24 bits. 24 is a multiple of 6 and 8, so no padding is required. The resulting base64–encoded string is “YTph”.
Table E-2. Base-64 padding examples
Input data      Binary sequence (padding noted as “x”)       Encoded dataa:a             011000 010011 101001 100001                  YTpha:aa            011000 010011 101001 100001 011000 01xxxx xxxxxx xxxxxx                       YTphYQ==a:aaa           011000 010011 101001 100001 011000 010110 0001xx xxxxxx                       YTphYWE=a:aaaa          011000 010011 101001 100001 011000 010110 000101 100001                       YTphYWFh
However, when another character is added, the input string grows to 32bits long.
Thenextsmallest multiple of 6 and 8 is 48 bits, so 16 bits of padding are added. Thefirst 4 bits of padding are mixed with data bits. The resulting 6-bit group, 01xxxx, istreated as 010000, 16 decimal, or base-64 encoding Q. The remaining two 6-bitgroups are all padding and are represented by “=”.
Perl Implementation
MIME::Base64 is a Perl module for base-64 encoding and decoding. You can readabout this module at http://www.perldoc.com/perl5.6.1/lib/MIME/Base64.html.
You can encode and decode strings using the MIME::Base64 encode_base64 anddecode_base64 methods:use MIME::Base64;$encoded = encode_base64('Aladdin:open sesame');$decoded = decode_base64($encoded);|

For More Information
For more information on base-64 encoding, see:http://www.ietf.org/rfc/rfc2045.txt
Section 6.8 of RFC 2045, “MIME Part 1: Format of Internet Message Bodies,”provides an official specification of base-64 encoding.http://www.perldoc.com/perl5.6.1/lib/MIME/Base64.html
This web site contains documentation for the MIME::Base64 Perl module thatprovides encoding and decoding of base-64 strings.|

APPENDIX F                
Digest Authentication
This appendix contains supporting data and source code for implementing HTTPdigest authentication facilities.
Digest WWW-Authenticate Directives
WWW-Authenticate directives are described in Table F-1, paraphrased from thedescriptions in RFC 2617. As always, refer to the official specifications for the mostup-to-date details.
Table F-1. Digest WWW-Authenticate header directives (from RFC 2617)
Directive              Descriptionrealm                  A string to be displayed to users so they know which username and password to use. This string shouldcontain at least the name of the host performing the authentication and might additionally indicate thecollection of users who might have access. An example might be “registered_users@gotham.news.com”.nonce                  A server-specified data string that should be uniquely generated each time a 401 response is made. It isrecommendedthatthisstringbebase-64orhexadecimaldata.Specifically,becausethestringispassedinthe header lines as a quoted string, the double-quote character is not allowed.
Thecontentsofthenonceareimplementation-dependent.Thequalityoftheimplementationdependsona good choice. A nonce might, for example, be constructed as the base-64 encoding of:time-stamp H(time-stamp ":" ETag ":" private-key)wheretime-stamp is a server-generated time or other nonrepeating value,ETag is the value of the HTTP
ETagheaderassociatedwiththerequestedentity,andprivate-keyisdataknownonlytotheserver.Withanonce of this form, a server would recalculate the hash portion after receiving the client Authenticationheader and reject the request if it did not match the nonce from that header or if the time-stamp value isnot recent enough. In this way, the server can limit the time of the nonce’s validity. The inclusion of the
ETag prevents a replay request for an updated version of the resource. (Note: including the IP address oftheclientinthenonceappearstooffertheservertheabilitytolimitthereuseofthenoncetothesamecli-entthatoriginallygotit.However,thatwouldbreakproxyfarms,whererequestsfromasingleuseroftengo through different proxies in the farm. Also, IP address spoofing is not that hard.)
An implementation might choose not to accept a previously used nonce or a previously used digest, toprotect against replay attacks, or it might choose to use one-time nonces or digests for POST or PUTrequests and time-stamps for GET requests.574
Table F-1. Digest WWW-Authenticate header directives (from RFC 2617) (continued)
Directive           Descriptiondomain              A quoted, space-separated list of URIs (as specified in RFC 2396, “Uniform Resource Identifiers: Generic
Syntax”)thatdefinetheprotectionspace.IfaURIisanabs_path,itisrelativetothecanonicalrootURLofthe server being accessed. An absolute URI in this list may refer to a different server than the one beingaccessed.
TheclientcanusethislisttodeterminethesetofURIsforwhichthesameauthenticationinformationmaybe sent: any URI that has a URI in this list as a prefix (after both have been made absolute) may beassumed to be in the same protection space.
If this directive is omitted or its value is empty, the client should assumethattheprotectionspaceconsistsof all URIs on the responding server.
This directive is not meaningful in Proxy-Authenticate headers, for which the protection space is alwaysthe entire proxy; if present, it should be ignored.opaque              Astringofdata,specifiedbytheserver,thatshouldbereturnedbytheclientunchangedintheAuthoriza-tion header of subsequent requests with URIs in the same protection space. It is recommended that thisstring be base-64 or hexadecimal data.stale               Aflagindicatingthatthepreviousrequestfromtheclientwasrejectedbecausethenoncevaluewasstale.
If stale is TRUE (case-insensitive),theclientmaywanttoretrytherequestwithanewencryptedresponse,withoutrepromptingtheuserforanewusernameandpassword.TheservershouldsetstaletoTRUEonlyif it receives a request for whichthenonceisinvalidbuthasavaliddigest(indicatingthattheclientknowsthecorrectusername/password).IfstaleisFALSE,oranythingotherthanTRUE,orthestaledirectiveisnotpresent, the username and/or password are invalid, and new values must be obtained.algorithm           Astringindicatingapairofalgorithmsusedtoproducethedigestandachecksum.Ifthisisnotpresent,itis assumedtobe“MD5”.Ifthealgorithmisnotunderstood,thechallengeshouldbeignored(andadiffer-ent one used, if there is more than one).
In this document, the string obtained by applying the digest algorithm to the data “data” with secret“secret” will be denoted by “KD(secret, data)”, and the string obtained by applying the checksum algo-rithmtothedata“data”willbedenoted“H(data)”.Thenotation“unq(X)”meansthevalueofthequotedstring “X” without the surrounding quotes.
For the MD5 and MD5-sess algorithms:
H(data) = MD5(data)
HD(secret, data) = H(concat(secret, ":", data))
I.e., the digest is the MD5 of the secret concatenated with a colon concatenated with the data. The MD5-sess algorithm is intended to allow efficient third-party authentication servers.qop                 This directive is optional but is made so only for backward compatibility with RFC 2069 [6]; it should beused by all implementations compliant with this version of the digest scheme.
If present, it is a quoted string of one or more tokens indicating the “quality of protection” values sup-portedbytheserver.Thevalue“auth”indicatesauthentication;thevalue“auth-int”indicatesauthentica-tion with integrity protection. Unrecognized options must be ignored.<extension>         This directive allows for future extensions. Any unrecognized directives must be ignored.
Digest Authorization Directives
Each of the Authorization directives is described in Table F-2, paraphrased from thedescriptions in RFC 2617. Refer to the official specifications for the most up-to-datedetails.|

Table F-2. Digest Authorization header directives (from RFC 2617)
Directive           Descriptionusername            The user’s name in the specified realm.realm               The realm passed to the client in the WWW-Authenticate header.nonce               The same nonce passed to the client in the WWW-Authenticate header.uri                 The URI from the request URI of the request line; duplicated because proxies are allowed to change therequest line in transit, and we may need the original URI for proper digest verification calculations.response            Thisistheactualdigest—thewholepointofdigestauthentication!Theresponseisastringof32hexadec-imal digits, computed by a negotiated digest algorithm, which proves that the user knows the password.algorithm           Astringindicatingapairofalgorithmsusedtoproducethedigestandachecksum.Ifthisisnotpresent,itis assumed to be “MD5”.opaque              A string of data, specified by the server in a WWW-Authenticate header, that should be returned by theclient unchanged in the Authorization header of subsequent requests with URIs in the same protectionspace.cnonce              This must be specified if a qop directive is sent and must not be specified if the server did not send a qopdirective in the WWW-Authenticate header field.
The cnonce value is an opaque quoted string value provided by the client and used by both client andservertoavoidchosenplaintextattacks,toprovidemutualauthentication,andtoprovidesomemessage-integrity protection.
See the descriptions of the response-digest and request-digest calculations later in this appendix.qop                 Indicates what “quality of protection” the client has applied to the message. If present, its value must beone of the alternatives the server indicated it supports in the WWW-Authenticate header. These valuesaffect the computation of the request digest.
This is a single token, not a quoted list of alternatives, as in WWW-Authenticate.
This directive is optional, to preserve backward compatibility with a minimal implementation of RFC2069,butitshouldbeusediftheserverindicatedthatqopissupportedbyprovidingaqopdirectiveinthe
WWW-Authenticate header field.nc                  This must be specified if a qop directive is sent and must not be specified if the server did not send a qopdirective in the WWW-Authenticate header field.
The value is the hexadecimal count of the number of requests (including the current request) that the cli-ent has sent with the nonce value in this request. For example, in the first request sent in response to agiven nonce value, the client sends nc=“00000001”.
Thepurposeofthisdirectiveistoallowtheservertodetectrequestreplaysbymaintainingitsowncopyofthis count—if the same nc value is seen twice, the request is a replay.<extension>         This directive allows for future extensions. Any unrecognized directive must be ignored.
Digest Authentication-Info Directives
Each of the Authentication-Info directives is described in Table F-3, paraphrasedfrom the descriptions in RFC 2617. Refer to the official specifications for the mostup-to-date details.|

Table F-3. Digest Authentication-Info header directives (from RFC 2617)
Directive           Descriptionnextnonce           The value of the nextnonce directive is the nonce the server wants the client to use for a future authenti-cationresponse.TheservermaysendtheAuthentication-Infoheaderwithanextnoncefieldasameansofimplementing one-time or otherwise changing nonces. If the nextnonce field is present the client shoulduse it when constructing the Authorization header for its next request. Failure of the client to do so mayresult in a reauthentication request from the server with “stale=TRUE”.
Server implementations should carefully consider the performance implications of the use of this mecha-nism;pipelinedrequestswillnotbepossibleifeveryresponseincludesanextnoncedirectivethatmustbeusedonthenextrequestreceivedbytheserver.Considerationshouldbegiventotheperformanceversussecurity trade-offs of allowing an old nonce value to be used for a limited time to permit request pipelin-ing. Use of the nonce count can retain most of the security advantages of a new server nonce without thedeleterious effects on pipelining.qop                 Indicates the “quality of protection” options applied to the response by the server. The value “auth” indi-cates authentication; the value “auth-int” indicates authentication with integrity protection. The servershould use the same value for the qop directive in the response as was sent by the client in the corre-sponding request.rspauth             The optional response digest in the “response auth” directive supports mutual authentication—theserver proves that it knows the user’s secret, and, with qop=“auth-int”, it also provides limited integrityprotection of the response. The “response-digest” value is calculated as for the “request-digest” in the
Authorization header, except that if qop=“auth” or qop is not specified in the Authorization header forthe request, A2 is:
A2 = ":" digest-uri-valueand if qop=“auth-int”, A2 is:
A2 = ":" digest-uri-value ":" H(entity-body)wheredigest-uri-value is the value of the uri directive on the Authorization header in the request. Thecnonce and nc values must be the same as the ones in the client request to which this message is aresponse. The rspauth directive must be present if qop=“auth” or qop=“auth-int” is specified.cnonce              The cnonce value must be the same as the one in the client request to which this message is a response.
The cnonce directive must be present if qop=“auth” or qop=“auth-int” is specified.nc                  Thencvaluemustbethesameastheoneintheclientrequesttowhichthismessageisaresponse.Thencdirective must be present if qop=“auth” or qop=“auth-int” is specified.<extension>         This directive allows for future extensions. Any unrecognized directive must be ignored.
Reference Code
Thefollowing code implements the calculations of H(A1), H(A2), request-digest, andresponse-digest, from RFC 2617. It uses the MD5 implementation from RFC 1321.
File “digcalc.h”#define HASHLEN 16typedef char HASH[HASHLEN];#define HASHHEXLEN 32typedef char HASHHEX[HASHHEXLEN+1];#define IN|
#define OUT/* calculate H(A1) as per HTTP Digest spec */void DigestCalcHA1(
IN char * pszAlg,
IN char * pszUserName,
IN char * pszRealm,
IN char * pszPassword,
IN char * pszNonce,
IN char * pszCNonce,
OUT HASHHEX SessionKey);/* calculate request-digest/response-digest as per HTTP Digest spec */void DigestCalcResponse(
IN HASHHEX HA1,           /* H(A1) */
IN char * pszNonce,       /* nonce from server */
IN char * pszNonceCount,  /* 8 hex digits */
IN char * pszCNonce,      /* client nonce */
IN char * pszQop,         /* qop-value: "", "auth", "auth-int" */
IN char * pszMethod,      /* method from the request */
IN char * pszDigestUri,   /* requested URL */
IN HASHHEX HEntity,       /* H(entity body) if qop="auth-int" */
OUT HASHHEX Response      /* request-digest or response-digest */);
File “digcalc.c”#include <global.h>#include <md5.h>#include <string.h>#include "digcalc.h"void CvtHex(
IN HASH Bin,
OUT HASHHEX Hex){unsigned short i;unsigned char j;for (i = 0; i < HASHLEN; i++) {j = (Bin[i] >> 4) & 0xf;if (j <= 9)
Hex[i*2] = (j + '0');else
Hex[i*2] = (j + 'a' - 10);j = Bin[i] & 0xf;if (j <= 9)
Hex[i*2+1] = (j + '0');else
Hex[i*2+1] = (j + 'a' - 10);};
Hex[HASHHEXLEN] = '\0';};|
/* calculate H(A1) as per spec */void DigestCalcHA1(
IN char * pszAlg,
IN char * pszUserName,
IN char * pszRealm,
IN char * pszPassword,
IN char * pszNonce,
IN char * pszCNonce,
OUT HASHHEX SessionKey){
MD5_CTX Md5Ctx;
HASH HA1;
MD5Init(&Md5Ctx);
MD5Update(&Md5Ctx, pszUserName, strlen(pszUserName));
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx, pszRealm, strlen(pszRealm));
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx, pszPassword, strlen(pszPassword));
MD5Final(HA1, &Md5Ctx);if (stricmp(pszAlg, "md5-sess") == 0) {
MD5Init(&Md5Ctx);
MD5Update(&Md5Ctx, HA1, HASHLEN);
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx, pszNonce, strlen(pszNonce));
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx, pszCNonce, strlen(pszCNonce));
MD5Final(HA1, &Md5Ctx);};
CvtHex(HA1, SessionKey);};/* calculate request-digest/response-digest as per HTTP Digest spec */void DigestCalcResponse(
IN HASHHEX HA1,           /* H(A1) */
IN char * pszNonce,       /* nonce from server */
IN char * pszNonceCount,  /* 8 hex digits */
IN char * pszCNonce,      /* client nonce */
IN char * pszQop,         /* qop-value: "", "auth", "auth-int" */
IN char * pszMethod,      /* method from the request */
IN char * pszDigestUri,   /* requested URL */
IN HASHHEX HEntity,       /* H(entity body) if qop="auth-int" */
OUT HASHHEX Response      /* request-digest or response-digest */){
MD5_CTX Md5Ctx;
HASH HA2;
HASH RespHash;
HASHHEX HA2Hex;// calculate H(A2)
MD5Init(&Md5Ctx);
MD5Update(&Md5Ctx, pszMethod, strlen(pszMethod));
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx, pszDigestUri, strlen(pszDigestUri));if (stricmp(pszQop, "auth-int") == 0) {|

MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx, HEntity, HASHHEXLEN);};
MD5Final(HA2, &Md5Ctx);
CvtHex(HA2, HA2Hex);// calculate response
MD5Init(&Md5Ctx);
MD5Update(&Md5Ctx, HA1, HASHHEXLEN);
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx, pszNonce, strlen(pszNonce));
MD5Update(&Md5Ctx, ":", 1);if (*pszQop) {
MD5Update(&Md5Ctx, pszNonceCount, strlen(pszNonceCount));
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx, pszCNonce, strlen(pszCNonce));
MD5Update(&Md5Ctx, ":", 1);
MD5Update(&Md5Ctx, pszQop, strlen(pszQop));
MD5Update(&Md5Ctx, ":", 1);};
MD5Update(&Md5Ctx, HA2Hex, HASHHEXLEN);
MD5Final(RespHash, &Md5Ctx);
CvtHex(RespHash, Response);};
File “digtest.c”#include <stdio.h>#include "digcalc.h"void main(int argc, char ** argv) {char * pszNonce = "dcd98b7102dd2f0e8b11d0f600bfb0c093";char * pszCNonce = "0a4f113b";char * pszUser = "Mufasa";char * pszRealm = "testrealm@host.com";char * pszPass = "Circle Of Life";char * pszAlg = "md5";char szNonceCount[9] = "00000001";char * pszMethod = "GET";char * pszQop = "auth";char * pszURI = "/dir/index.html";
HASHHEX HA1;
HASHHEX HA2 = "";
HASHHEX Response;
DigestCalcHA1(pszAlg, pszUser, pszRealm, pszPass,pszNonce, pszCNonce, HA1);
DigestCalcResponse(HA1, pszNonce, szNonceCount, pszCNonce, pszQop,pszMethod, pszURI, HA2, Response);printf("Response = %s\n", Response);};|

APPENDIX G
Language Tags
Language tags are short, standardized strings that name spoken languages—forexample, “fr” (French) and “en-GB” (Great Britain English). Each tag has one ormore parts, separated by hyphens, called subtags. Language tags were described indetail in the section “Language Tags and HTTP” in Chapter 16.
This appendix summarizes the rules, standardized tags, and registration informationfor language tags. It contains the following reference material:• Rules for the first (primary) subtag are summarized in “First Subtag Rules.”• Rules for the second subtag are summarized in “Second Subtag Rules.”• IANA-registered language tags are shown in Table G-1.• ISO 639 language codes are shown in Table G-2.• ISO 3166 country codes are shown in Table G-3.
First Subtag Rules
If the first subtag is:*• Two characters long, it’s a language code from the ISO 639  and 639-1 standards• Three characters long, it’s a language code listed in the ISO 639-2† standard• The letter “i,” the language tag is explicitly IANA-registered• The letter “x,” the language tag is a private, nonstandard, extension subtag
The ISO 639 and 639-2 names are summarized in Table G-2.* See ISO standard 639, “Codes for the representation of names of languages.”†See ISO 639-2, “Codes for the representation of names of languages—Part 2: Alpha-3 code.”581
Second Subtag Rules
If the second subtag is:• Two characters long, it’s a country/region defined by ISO 3166*• Three to eight characters long, it may be registered with the IANA• One character long, it is illegal
The ISO 3166 country codes are summarized in Table G-3.
IANA-Registered Language Tags
Table G-1. Language tags
IANA language tag         Descriptioni-bnn                     Bununi-default                 Default language contexti-hak                     Hakkai-klingon                 Klingoni-lux                     Luxembourgishi-mingo                   Mingoi-navajo                  Navajoi-pwn                     Paiwani-tao                     Taoi-tay                     Tayali-tsu                     Tsouno-bok                    Norwegian “Book language”no-nyn                    Norwegian “New Norwegian”zh-gan                    Kan or Ganzh-guoyu                  Mandarin or Standard Chinesezh-hakka                  Hakkazh-min                    Min, Fuzhou, Hokkien, Amoy, or Taiwanesezh-wuu                    Shanghaiese or Wuzh-xiang                  Xiang or Hunanesezh-yue                    Cantonese* The country codes AA, QM–QZ, XA–XZ and ZZ are reserved by ISO 3166 as user-assigned codes. Thesemust not be used to form language tags.|

ISO 639 Language Codes
Table G-2. ISO 639 and 639-2 language codes
Language    ISO 639      ISO 639-2
Abkhazian   ab           abk
Achinese                 ace
Acoli                    ach
Adangme                  ada
Afar        aa           aar
Afrihili                 afh
Afrikaans   af           afr
Afro-Asiatic (Other)     afa
Akan                     aka
Akkadian                 akk
Albanian    sq           alb/sqi
Aleut                    ale
Algonquian languages     alg
Altaic (Other)           tut
Amharic     am           amh
Apache languages         apa
Arabic      ar           ara
Aramaic                  arc
Arapaho                  arp
Araucanian               arn
Arawak                   arw
Armenian    hy           arm/hye
Artificial (Other)       art
Assamese    as           asm
Athapascan languages     ath
Austronesian (Other)     map
Avaric                   ava
Avestan                  ave
Awadhi                   awa
Aymara      ay           aym
Azerbaijani az           aze
Aztec                    nah
Balinese                 ban
Baltic (Other)           bat|

Table G-2. ISO 639 and 639-2 language codes (continued)
Language    ISO 639      ISO 639-2
Baluchi                  bal
Bambara                  bam
Bamileke languages       bai
Banda                    bad
Bantu (Other)            bnt
Basa                     bas
Bashkir     ba           bak
Basque      eu           baq/eus
Beja                     bej
Bemba                    bem
Bengali     bn           ben
Berber (Other)           ber
Bhojpuri                 bho
Bihari      bh           bih
Bikol                    bik
Bini                     bin
Bislama     bi           bis
Braj                     bra
Breton      be           bre
Buginese                 bug
Bulgarian   bg           bul
Buriat                   bua
Burmese     my           bur/mya
Byelorussianbe           bel
Caddo                    cad
Carib                    car
Catalan     ca           cat
Caucasian (Other)        cau
Cebuano                  ceb
Celtic (Other)           cel
Central American Indian (Other)                           cai
Chagatai                 chg
Chamorro                 cha
Chechen                  che
Cherokee                 chr
Cheyenne                 chy|

Table G-2. ISO 639 and 639-2 language codes (continued)
Language    ISO 639      ISO 639-2
Chibcha                  chb
Chinese     zh           chi/zho
Chinook jargon           chn
Choctaw                  cho
Church Slavic            chu
Chuvash                  chv
Coptic                   cop
Cornish                  cor
Corsican    co           cos
Cree                     cre
Creek                    mus
Creoles and Pidgins (Other)                               crp
Creoles and Pidgins, English-based (Other)                cpe
Creoles and Pidgins, French-based (Other)                 cpf
Creoles and Pidgins, Portuguese-based (Other)             cpp
Cushitic (Other)         cus
Croatian    hr
Czech       cs           ces/cze
Dakota                   dak
Danish      da           dan
Delaware                 del
Dinka                    din
Divehi                   div
Dogri                    doi
Dravidian (Other)        dra
Duala                    dua
Dutch       nl           dut/nla
Dutch, Middle (ca. 1050-1350)                             dum
Dyula                    dyu
Dzongkha    dz           dzo
Efik                     efi
Egyptian (Ancient)       egy
Ekajuk                   eka
Elamite                  elx
English     en           eng
English, Middle (ca. 1100-1500)                           enm|

Table G-2. ISO 639 and 639-2 language codes (continued)
Language    ISO 639      ISO 639-2
English, Old (ca. 450-1100)                               ang
Eskimo (Other)           esk
Esperanto   eo           epo
Estonian    et           est
Ewe                      ewe
Ewondo                   ewo
Fang                     fan
Fanti                    fat
Faroese     fo           fao
Fijian      fj           fij
Finnish     fi           fin
Finno-Ugrian (Other)     fiu
Fon                      fon
French      fr           fra/fre
French, Middle (ca. 1400-1600)                            frm
French, Old (842- ca. 1400)                               fro
Frisian     fy           fry
Fulah                    ful
Ga                       gaa
Gaelic (Scots)           gae/gdh
Gallegan    gl           glg
Ganda                    lug
Gayo                     gay
Geez                     gez
Georgian    ka           geo/kat
German      de           deu/ger
German, Middle High (ca. 1050-1500)                       gmh
German, Old High (ca. 750-1050)                           goh
Germanic (Other)         gem
Gilbertese               gil
Gondi                    gon
Gothic                   got
Grebo                    grb
Greek, Ancient (to 1453) grc
Greek, Modern (1453-)                        el           ell/gre
Greenlandic kl           kal|

Table G-2. ISO 639 and 639-2 language codes (continued)
Language    ISO 639      ISO 639-2
Guarani     gn           grn
Gujarati    gu           guj
Haida                    hai
Hausa       ha           hau
Hawaiian                 haw
Hebrew      he           heb
Herero                   her
Hiligaynon               hil
Himachali                him
Hindi       hi           hin
Hiri Motu                hmo
Hungarian   hu           hun
Hupa                     hup
Iban                     iba
Icelandic   is           ice/isl
Igbo                     ibo
Ijo                      ijo
Iloko                    ilo
Indic (Other)            inc
Indo-European (Other)    ine
Indonesian  id           ind
Interlingua (IALA)                           ia           ina
Interlingue ie           ine
Inuktitut   iu           iku
Inupiak     ik           ipk
Iranian (Other)          ira
Irish       ga           gai/iri
Irish, Old (to 900)      sga
Irish, Middle (900 - 1200)                                mga
Iroquoian languages      iro
Italian     it           ita
Japanese    ja           jpn
Javanese    jv/jw        jav/jaw
Judeo-Arabic             jrb
Judeo-Persian            jpr
Kabyle                   kab|

Table G-2. ISO 639 and 639-2 language codes (continued)
Language    ISO 639      ISO 639-2
Kachin                   kac
Kamba                    kam
Kannada     kn           kan
Kanuri                   kau
Kara-Kalpak              kaa
Karen                    kar
Kashmiri    ks           kas
Kawi                     kaw
Kazakh      kk           kaz
Khasi                    kha
Khmer       km           khm
Khoisan (Other)          khi
Khotanese                kho
Kikuyu                   kik
Kinyarwanda rw           kin
Kirghiz     ky           kir
Komi                     kom
Kongo                    kon
Konkani                  kok
Korean      ko           kor
Kpelle                   kpe
Kru                      kro
Kuanyama                 kua
Kumyk                    kum
Kurdish     ku           kur
Kurukh                   kru
Kusaie                   kus
Kutenai                  kut
Ladino                   lad
Lahnda                   lah
Lamba                    lam
Langue d’Oc (post-1500)                      oc           oci
Lao         lo           lao
Latin       la           lat
Latvian     lv           lav
Letzeburgesch            ltz|

Table G-2. ISO 639 and 639-2 language codes (continued)
Language    ISO 639      ISO 639-2
Lezghian                 lez
Lingala     ln           lin
Lithuanian  lt           lit
Lozi                     loz
Luba-Katanga             lub
Luiseno                  lui
Lunda                    lun
Luo (Kenya and Tanzania) luo
Macedonian  mk           mac/mak
Madurese                 mad
Magahi                   mag
Maithili                 mai
Makasar                  mak
Malagasy    mg           mlg
Malay       ms           may/msa
Malayalam                mal
Maltese     ml           mlt
Mandingo                 man
Manipuri                 mni
Manobo languages         mno
Manx                     max
Maori       mi           mao/mri
Marathi     mr           mar
Mari                     chm
Marshall                 mah
Marwari                  mwr
Masai                    mas
Mayan languages          myn
Mende                    men
Micmac                   mic
Minangkabau              min
Miscellaneous (Other)    mis
Mohawk                   moh
Moldavian   mo           mol
Mon-Kmer (Other)         mkh
Mongo                    lol|

Table G-2. ISO 639 and 639-2 language codes (continued)
Language    ISO 639      ISO 639-2
Mongolian   mn           mon
Mossi                    mos
Multiple languages       mul
Munda languages          mun
Nauru       na           nau
Navajo                   nav
Ndebele, North           nde
Ndebele, South           nbl
Ndongo                   ndo
Nepali      ne           nep
Newari                   new
Niger-Kordofanian (Other)nic
Nilo-Saharan (Other)     ssa
Niuean                   niu
Norse, Old               non
North American Indian (Other)                             nai
Norwegian   no           nor
Norwegian (Nynorsk)      nno
Nubian languages         nub
Nyamwezi                 nym
Nyanja                   nya
Nyankole                 nyn
Nyoro                    nyo
Nzima                    nzi
Ojibwa                   oji
Oriya       or           ori
Oromo       om           orm
Osage                    osa
Ossetic                  oss
Otomian languages        oto
Pahlavi                  pal
Palauan                  pau
Pali                     pli
Pampanga                 pam
Pangasinan               pag
Panjabi     pa           pan|

Table G-2. ISO 639 and 639-2 language codes (continued)
Language    ISO 639      ISO 639-2
Papiamento               pap
Papuan-Australian (Other)paa
Persian     fa           fas/per
Persian, Old (ca 600 - 400 B.C.)                          peo
Phoenician               phn
Polish      pl           pol
Ponape                   pon
Portuguese  pt           por
Prakrit languages        pra
Provencal, Old (to 1500) pro
Pushto      ps           pus
Quechua     qu           que
Rhaeto-Romance                               rm           roh
Rajasthani               raj
Rarotongan               rar
Romance (Other)          roa
Romanian    ro           ron/rum
Romany                   rom
Rundi       rn           run
Russian     ru           rus
Salishan languages       sal
Samaritan Aramaic        sam
Sami languages           smi
Samoan      sm           smo
Sandawe                  sad
Sango       sg           sag
Sanskrit    sa           san
Sardinian                srd
Scots                    sco
Selkup                   sel
Semitic (Other)          sem
Serbian     sr
Serbo-Croatian                               sh           scr
Serer                    srr
Shan                     shn
Shona       sn           sna|

Table G-2. ISO 639 and 639-2 language codes (continued)
Language    ISO 639      ISO 639-2
Sidamo                   sid
Siksika                  bla
Sindhi      sd           snd
Singhalese  si           sin
Sino-Tibetan (Other)     sit
Siouan languages         sio
Slavic (Other)           sla
Siswant     ss           ssw
Slovak      sk           slk/slo
Slovenian   sl           slv
Sogdian                  sog
Somali      so           som
Songhai                  son
Sorbian languages        wen
Sotho, Northern          nso
Sotho, Southern                              st           sot
South American Indian (Other)                             sai
Spanish     es           esl/spa
Sukuma                   suk
Sumerian                 sux
Sudanese    su           sun
Susu                     sus
Swahili     sw           swa
Swazi                    ssw
Swedish     sv           sve/swe
Syriac                   syr
Tagalog     tl           tgl
Tahitian                 tah
Tajik       tg           tgk
Tamashek                 tmh
Tamil       ta           tam
Tatar       tt           tat
Telugu      te           tel
Tereno                   ter
Thai        th           tha
Tibetan     bo           bod/tib|

Table G-2. ISO 639 and 639-2 language codes (continued)
Language    ISO 639      ISO 639-2
Tigre                    tig
Tigrinya    ti           tir
Timne                    tem
Tivi                     tiv
Tlingit                  tli
Tonga (Nyasa)                                to           tog
Tonga (Tonga Islands)    ton
Truk                     tru
Tsimshian                tsi
Tsonga      ts           tso
Tswana      tn           tsn
Tumbuka                  tum
Turkish     tr           tur
Turkish, Ottoman (1500–1928)                              ota
Turkmen     tk           tuk
Tuvinian                 tyv
Twi         tw           twi
Ugaritic                 uga
Uighur      ug           uig
Ukrainian   uk           ukr
Umbundu                  umb
Undetermined             und
Urdu        ur           urd
Uzbek       uz           uzb
Vai                      vai
Venda                    ven
Vietnamese  vi           vie
Volapük     vo           vol
Votic                    vot
Wakashan languages       wak
Walamo                   wal
Waray                    war
Washo                    was
Welsh       cy           cym/wel
Wolof       wo           wol
Xhosa       xh           xho|

Table G-2. ISO 639 and 639-2 language codes (continued)
Language    ISO 639      ISO 639-2
Yakut                    sah
Yao                      yao
Yap                      yap
Yiddish     yi           yid
Yoruba      yo           yor
Zapotec                  zap
Zenaga                   zen
Zhuang      za           zha
Zulu        zu           zul
Zuni                     zun
ISO 3166 Country Codes
Table G-3. ISO 3166 country codes
Country     Code
Afghanistan AF
Albania     AL
Algeria     DZ
American Samoa                               AS
Andorra     AD
Angola      AO
Anguilla    AI
Antarctica  AQ
Antigua and Barbuda                          AG
Argentina   AR
Armenia     AM
Aruba       AW
Australia   AU
Austria     AT
Azerbaijan  AZ
Bahamas     BS
Bahrain     BH
Bangladesh  BD
Barbados    BB
Belarus     BY
Belgium     BE|

Table G-3. ISO 3166 country codes (continued)
Country        Code
Belize         BZ
Benin          BJ
Bermuda        BM
Bhutan         BT
Bolivia        BO
Bosnia and Herzegovina                          BA
Botswana       BW
Bouvet Island  BV
Brazil         BR
British Indian Ocean Territory                  IO
Brunei Darussalam                               BN
Bulgaria       BG
Burkina Faso   BF
Burundi        BI
Cambodia       KH
Cameroon       CM
Canada         CA
Cape Verde     CV
Cayman Islands KY
Central African Republic                        CF
Chad           TD
Chile          CL
China          CN
Christmas Island                                CX
Cocos (Keeling) Islands                         CC
Colombia       CO
Comoros        KM
Congo          CG
Congo (Democratic Republic of the)              CD
Cook Islands   CK
Costa Rica     CR
Cote D’Ivoire  CI
Croatia        HR
Cuba           CU
Cyprus         CY
Czech Republic CZ|

Table G-3. ISO 3166 country codes (continued)
Country        Code
Denmark        DK
Djibouti       DJ
Dominica       DM
Dominican Republic                              DO
East Timor     TP
Ecuador        EC
Egypt          EG
El Salvador    SV
Equatorial Guinea                               GQ
Eritrea        ER
Estonia        EE
Ethiopia       ET
Falkland Islands (Malvinas)                     FK
Faroe Islands  FO
Fiji           FJ
Finland        FI
France         FR
French Guiana  GF
French Polynesia                                PF
French Southern Territories                     TF
Gabon          GA
Gambia         GM
Georgia        GE
Germany        DE
Ghana          GH
Gibraltar      GI
Greece         GR
Greenland      GL
Grenada        GD
Guadeloupe     GP
Guam           GU
Guatemala      GT
Guinea         GN
Guinea-Bissau  GW
Guyana         GY
Haiti          HT|

Table G-3. ISO 3166 country codes (continued)
Country          Code
Heard Island and Mcdonald Islands                 HM
Holy See (Vatican City State)                     VA
Honduras         HN
Hong Kong        HK
Hungary          HU
Iceland          IS
India            IN
Indonesia        ID
Iran (Islamic Republic of)                        IR
Iraq             IQ
Ireland          IE
Israel           IL
Italy            IT
Jamaica          JM
Japan            JP
Jordan           JO
Kazakstan        KZ
Kenya            KE
Kiribati         KI
Korea (Democratic People’s Republic of)           KP
Korea (Republic of)                               KR
Kuwait           KW
Kyrgyzstan       KG
Lao People’s Democratic Republic                  LA
Latvia           LV
Lebanon          LB
Lesotho          LS
Liberia          LR
Libyan Arab Jamahiriya                            LY
Liechtenstein    LI
Lithuania        LT
Luxembourg       LU
Macau            MO
Macedonia (The Former Yugoslav Republic of)       MK
Madagascar       MG
Malawi           MW|

Table G-3. ISO 3166 country codes (continued)
Country             Code
Malaysia            MY
Maldives            MV
Mali                ML
Malta               MT
Marshall Islands    MH
Martinique          MQ
Mauritania          MR
Mauritius           MU
Mayotte             YT
Mexico              MX
Micronesia (Federated States of)                     FM
Moldova (Republic of)                                MD
Monaco              MC
Mongolia            MN
Montserrat          MS
Morocco             MA
Mozambique          MZ
Myanmar             MM
Namibia             NA
Nauru               NR
Nepal               NP
Netherlands         NL
Netherlands AntillesAN
New Caledonia       NC
New Zealand         NZ
Nicaragua           NI
Niger               NE
Nigeria             NG
Niue                NU
Norfolk Island      NF
Northern Mariana Islands                             MP
Norway              NO
Oman                OM
Pakistan            PK
Palau               PW
Palestinian Territory (Occupied)                     PS
Panama              PA|

Table G-3. ISO 3166 country codes (continued)
Country          Code
Papua New Guinea PG
Paraguay         PY
Peru             PE
Philippines      PH
Pitcairn         PN
Poland           PL
Portugal         PT
Puerto Rico      PR
Qatar            QA
Reunion          RE
Romania          RO
Russian Federation                                RU
Rwanda           RW
Saint Helena     SH
Saint Kitts and Nevis                             KN
Saint Lucia      LC
Saint Pierre and Miquelon                         PM
Saint Vincent and the Grenadines                  VC
Samoa            WS
San Marino       SM
Sao Tome and Principe                             ST
Saudi Arabia     SA
Senegal          SN
Seychelles       SC
Sierra Leone     SL
Singapore        SG
Slovakia         SK
Slovenia         SI
Solomon Islands  SB
Somalia          SO
South Africa     ZA
South Georgia and the South Sandwich Islands      GS
Spain            ES
Sri Lanka        LK
Sudan            SD
Suriname         SR
Svalbard and Jan Mayen                            SJ|

Table G-3. ISO 3166 country codes (continued)
Country           Code
Swaziland         SZ
Sweden            SE
Switzerland       CH
Syrian Arab Republic                               SY
Taiwan, Province of China                          TW
Tajikistan        TJ
Tanzania (United Republic of)                      TZ
Thailand          TH
Togo              TG
Tokelau           TK
Tonga             TO
Trinidad and Tobago                                TT
Tunisia           TN
Turkey            TR
Turkmenistan      TM
Turks and Caicos Islands                           TC
Tuvalu            TV
Uganda            UG
Ukraine           UA
United Arab Emirates                               AE
United Kingdom    GB
United States     US
United States Minor Outlying Islands               UM
Uruguay           UY
Uzbekistan        UZ
Vanuatu           VU
Venezuela         VE
Viet NAM          VN
Virgin Islands (British)                           VG
Virgin ISLANDS (U.S.)                              VI
Wallis and Futuna WF
Western Sahara    EH
Yemen             YE
Yugoslavia        YU
Zambia            ZM|

Language Administrative Organizations
ISO639defines a maintenance agency for additions to and changes in the list of lan-guages in ISO 639. This agency is:
International Information Centre for Terminology (Infoterm)
P.O. Box 130
A-1021 Wien
Austria
Phone: +43 1 26 75 35 Ext. 312
Fax: +43 1 216 32 72
ISO 639-2defines a maintenance agency for additions to and changes in the list oflanguages in ISO 639-2. This agency is:
Library of Congress
Network Development and MARC Standards Office
Washington, D.C. 20540
USA
Phone: +1 202 707 6237
Fax: +1 202 707 0115
URL:http://www.loc.gov/standards/iso639/
The maintenance agency for ISO 3166 (country codes) is:
ISO 3166 Maintenance Agency Secretariatc/o DIN Deutsches Institut fuer Normung
Burggrafenstrasse 6
Postfach 1107
D-10787 Berlin
Germany
Phone: +49 30 26 01 320
Fax: +49 30 26 01 231
URL:http://www.din.de/gremien/nas/nabd/iso3166ma/|

APPENDIX H                 
MIME Charset Registry
This appendix describes the MIME charset registry maintained by the Internet
Assigned Numbers Authority (IANA). A formatted table of charsets from the regis-try is provided in Table H-1.
MIME Charset Registry
MIMEcharset tags are registered with the IANA (http://www.iana.org/numbers.htm).
Thecharset registry is a flat-file text database of records. Each record contains a char-set name, reference citations, a unique MIB number, a source description, and a listof aliases. A name or alias may be flagged “preferred MIME name.”
Here is the record for US-ASCII:
Name: ANSI_X3.4-1968  [RFC1345, KXS2]^
MIBenum: 3
Source: ECMA registry
Alias: iso-ir-6
Alias: ANSI_X3.4-1986
Alias: ISO_646.irv:1991
Alias: ASCII
Alias: ISO646-US
Alias: US-ASCII (preferred MIME name)
Alias: us
Alias: IBM367
Alias: cp367
Alias: csASCII
The procedure for registering a charset with the IANA is documented in RFC 2978(http://www.ietf.org/rfc/rfc2978.txt).602
Preferred MIME Names
Of the 235 charsets registered at the time of this writing, only 20 include “preferred
MIME names”—common charsets used by email and web applications. These are:
Big5   EUC-JP EUC-KR
GB2312 ISO-2022-JP                             ISO-2022-JP-2
ISO-2022-KR                             ISO-8859-1                              ISO-8859-2
ISO-8859-3                              ISO-8859-4                              ISO-8859-5
ISO-8859-6                              ISO-8859-7                              ISO-8859-8
ISO-8859-9                              ISO-8859-10                             KOI8-R
Shift-JIS                               US-ASCII
Registered Charsets
Table H-1 lists the contents of the charset registry as of March 2001. Refer directly tohttp://www.iana.org for more information about the contents of this table.
Table H-1. IANA MIME charset tags
Charset tag                    Aliases                           Description                               References
US-ASCII                       ANSI_X3.4-1968, iso-ir-6,         ECMA registry                             RFC1345, KXS2
ANSI_X3.4-1986,
ISO_646.irv:1991, ASCII,
ISO646-US, us, IBM367,cp367, csASCII
ISO-10646-UTF-1                csISO10646UTF1                    Universal Transfer Format (1)—this isthe multibyte encoding that subsets
ASCII-7; it does not have byte-orderingissues
ISO_646.basic:1983             ref, csISO646basic1983            ECMA registry                             RFC1345, KXS2
INVARIANT                      csINVARIANT                                RFC1345, KXS2
ISO_646.irv:1983               iso-ir-2, irv,                    ECMA registry                             RFC1345, KXS2csISO2IntlRefVersion
BS_4730                        iso-ir-4, ISO646-GB, gb, uk,      ECMA registry                             RFC1345, KXS2csISO4UnitedKingdom
NATS-SEFI                      iso-ir-8-1, csNATSSEFI            ECMA registry                             RFC1345, KXS2
NATS-SEFI-ADD                  iso-ir-8-2, csNATSSEFIADD         ECMA registry                             RFC1345, KXS2
NATS-DANO                      iso-ir-9-1, csNATSDANO            ECMA registry                             RFC1345, KXS2
NATS-DANO-ADD                  iso-ir-9-2, csNATSDANOADD         ECMA registry                             RFC1345, KXS2|

Table H-1. IANA MIME charset tags (continued)
Charset tag                  Aliases                        Description                             References
SEN_850200_B                 iso-ir-10, FI, ISO646-FI,      ECMA registry                           RFC1345, KXS2
ISO646-SE, se,csISO10Swedish
SEN_850200_C                 iso-ir-11, ISO646-SE2, se2,    ECMA registry                           RFC1345, KXS2csISO11SwedishForNames
KS_C_5601-1987               iso-ir-149, KS_C_5601-1989,    ECMA registry                           RFC1345, KXS2
KSC_5601, korean,csKSC56011987
ISO-2022-KR                  csISO2022KR                    RFC 1557 (see also KS_C_5601-1987)      RFC1557, Choi
EUC-KR                       csEUCKR                        RFC 1557 (see also KS_C_5861-1992)      RFC1557, Choi
ISO-2022-JP                  csISO2022JP                    RFC 1468 (see also RFC 2237)            RFC1468,
Murai
ISO-2022-JP-2                csISO2022JP2                   RFC 1554                                RFC1554, Ohta
ISO-2022-CN                RFC 1922                                RFC1922
ISO-2022-CN-EXT            RFC 1922                                RFC1922
JIS_C6220-1969-jp            JIS_C6220-1969, iso-ir-13,     ECMA registry                           RFC1345, KXS2katakana, x0201-7,csISO13JISC6220jp
JIS_C6220-1969-ro            iso-ir-14, jp, ISO646-JP,      ECMA registry                           RFC1345, KXS2csISO14JISC6220ro
IT                           iso-ir-15, ISO646-IT,          ECMA registry                           RFC1345, KXS2csISO15Italian
PT                           iso-ir-16, ISO646-PT,          ECMA registry                           RFC1345, KXS2csISO16Portuguese
ES                           iso-ir-17, ISO646-ES,          ECMA registry                           RFC1345, KXS2csISO17Spanishgreek7-old                   iso-ir-18, csISO18Greek7Old    ECMA registry                           RFC1345, KXS2latin-greek                  iso-ir-19, csISO19LatinGreek   ECMA registry                           RFC1345, KXS2
DIN_66003                    iso-ir-21, de, ISO646-DE,      ECMA registry                           RFC1345, KXS2csISO21German
NF_Z_62-010_(1973)           iso-ir-25, ISO646-FR1,         ECMA registry                           RFC1345, KXS2csISO25French
Latin-greek-1                iso-ir-27, csISO27LatinGreek1  ECMA registry                           RFC1345, KXS2
ISO_5427                     iso-ir-37, csISO5427Cyrillic   ECMA registry                           RFC1345, KXS2
JIS_C6226-1978               iso-ir-42,                     ECMA registry                           RFC1345, KXS2csISO42JISC62261978
BS_viewdata                  iso-ir-47, csISO47BSViewdata   ECMA registry                           RFC1345, KXS2
INIS                         iso-ir-49, csISO49INIS         ECMA registry                           RFC1345, KXS2
INIS-8                       iso-ir-50, csISO50INIS8        ECMA registry                           RFC1345, KXS2
INIS-cyrillic                iso-ir-51, csISO51INISCyrillic ECMA registry                           RFC1345, KXS2|

Table H-1. IANA MIME charset tags (continued)
Charset tag                  Aliases                        Description                             References
ISO_5427:1981                iso-ir-54, ISO5427Cyrillic1981 ECMA registry                           RFC1345, KXS2
ISO_5428:1980                iso-ir-55, csISO5428Greek      ECMA registry                           RFC1345, KXS2
GB_1988-80                   iso-ir-57, cn, ISO646-CN,      ECMA registry                           RFC1345, K5,csISO57GB1988                         KXS2
GB_2312-80                   iso-ir-58, chinese,            ECMA registry                           RFC1345, KXS2csISO58GB231280
NS_4551-1                    iso-ir-60, ISO646-NO, no,      ECMA registry                           RFC1345, KXS2csISO60DanishNorwegian,csISO60Norwegian1
NS_4551-2                    ISO646-NO2, iso-ir-61, no2,    ECMA registry                           RFC1345, KXS2csISO61Norwegian2
NF_Z_62-010                  iso-ir-69, ISO646-FR, fr,      ECMA registry                           RFC1345, KXS2csISO69Frenchvideotex-suppl               iso-ir-70,                     ECMA registry                           RFC1345, KXS2csISO70VideotexSupp1
PT2                          iso-ir-84, ISO646-PT2,         ECMA registry                           RFC1345, KXS2csISO84Portuguese2
ES2                          iso-ir-85, ISO646-ES2,         ECMA registry                           RFC1345, KXS2csISO85Spanish2
MSZ_7795.3                   iso-ir-86, ISO646-HU, hu,      ECMA registry                           RFC1345, KXS2csISO86Hungarian
JIS_C6226-1983               iso-ir-87, x0208,              ECMA registry                           RFC1345, KXS2
JIS_X0208-1983,csISO87JISX0208greek7                       iso-ir-88, csISO88Greek7       ECMA registry                           RFC1345, KXS2
ASMO_449                     ISO_9036, arabic7, iso-ir-89,  ECMA registry                           RFC1345, KXS2csISO89ASMO449iso-ir-90                    csISO90                        ECMA registry                           RFC1345, KXS2
JIS_C6229-1984-a             iso-ir-91, jp-ocr-a,           ECMA registry                           RFC1345, KXS2csISO91JISC62291984a
JIS_C6229-1984-b             iso-ir-92, ISO646-JP-OCR-B,    ECMA registry                           RFC1345, KXS2jp-ocr-b,csISO92JISC62991984b
JIS_C6229-1984-b-add         iso-ir-93, jp-ocr-b-add,       ECMA registry                           RFC1345, KXS2csISO93JIS62291984badd
JIS_C6229-1984-hand          iso-ir-94, jp-ocr-hand,        ECMA registry                           RFC1345, KXS2csISO94JIS62291984hand
JIS_C6229-1984-hand-add      iso-ir-95, jp-ocr-hand-add,    ECMA registry                           RFC1345, KXS2csISO95JIS62291984handadd
JIS_C6229-1984-kana          iso-ir-96,                     ECMA registry                           RFC1345, KXS2csISO96JISC62291984kana|

Table H-1. IANA MIME charset tags (continued)
Charset tag                  Aliases                        Description                             References
ISO_2033-1983                iso-ir-98, e13b, csISO2033     ECMA registry                           RFC1345, KXS2
ANSI_X3.110-1983             iso-ir-99, CSA_T500-1983,      ECMA registry                           RFC1345, KXS2
NAPLPS, csISO99NAPLPS
ISO-8859-1                   ISO_8859-1:1987, iso-ir-100,   ECMA registry                           RFC1345, KXS2
ISO_8859-1, latin1, l1,
IBM819, CP819, csISOLatin1
ISO-8859-2                   ISO_8859-2:1987, iso-ir-101,   ECMA registry                           RFC1345, KXS2
ISO_8859-2, latin2, l2,csISOLatin2
T.61-7bit                    iso-ir-102, csISO102T617bit    ECMA registry                           RFC1345, KXS2
T.61-8bit                    T.61, iso-ir-103,              ECMA registry                           RFC1345, KXS2csISO103T618bit
ISO-8859-3                   ISO_8859-3:1988, iso-ir-109,   ECMA registry                           RFC1345, KXS2
ISO_8859-3, latin3, l3,csISOLatin3
ISO-8859-4                   ISO_8859-4:1988, iso-ir-110,   ECMA registry                           RFC1345, KXS2
ISO_8859-4, latin4, l4,csISOLatin4
ECMA-cyrillic                iso-ir-111,                    ECMA registry                           RFC1345, KXS2csISO111ECMACyrillic
CSA_Z243.4-1985-1            iso-ir-121, ISO646-CA, csa7-1, ECMA registry                           RFC1345, KXS2ca, csISO121Canadian1
CSA_Z243.4-1985-2            iso-ir-122, ISO646-CA2,        ECMA registry                           RFC1345, KXS2csa7-2, csISO122Canadian2
CSA_Z243.4-1985-gr           iso-ir-123,                    ECMA registry                           RFC1345, KXS2csISO123CSAZ24341985gr
ISO-8859-6                   ISO_8859-6:1987, iso-ir-127,   ECMA registry                           RFC1345, KXS2
ISO_8859-6, ECMA-114,
ASMO-708, arabic,csISOLatinArabic
ISO_8859-6-E                 csISO88596E                    RFC 1556                                RFC1556, IANA
ISO_8859-6-I                 csISO88596I                    RFC 1556                                RFC1556, IANA
ISO-8859-7                   ISO_8859-7:1987, iso-ir-126,   ECMA registry                           RFC1947,
ISO_8859-7, ELOT_928,                 RFC1345, KXS2
ECMA-118, greek, greek8,csISOLatinGreek
T.101-G2                     iso-ir-128, csISO128T101G2     ECMA registry                           RFC1345, KXS2
ISO-8859-8                   ISO_8859-8:1988, iso-ir-138,   ECMA registry                           RFC1345, KXS2
ISO_8859-8, hebrew,csISOLatinHebrew
ISO_8859-8-E                 csISO88598E                    RFC 1556                                RFC1556,
Nussbacher|

Table H-1. IANA MIME charset tags (continued)
Charset tag                  Aliases                        Description                             References
ISO_8859-8-I                 csISO88598I                    RFC 1556                                RFC1556,
Nussbacher
CSN_369103                   iso-ir-139,                    ECMA registry                           RFC1345, KXS2csISO139CSN369103
JUS_I.B1.002                 iso-ir-141, ISO646-YU, js, yu, ECMA registry                           RFC1345, KXS2csISO141JUSIB1002
ISO_6937-2-add               iso-ir-142, csISOTextComm      ECMA registry and ISO 6937-2:1983       RFC1345, KXS2
IEC_P27-1                    iso-ir-143, csISO143IECP271    ECMA registry                           RFC1345, KXS2
ISO-8859-5                   ISO_8859-5:1988, iso-ir-144,   ECMA registry                           RFC1345, KXS2
ISO_8859-5, cyrillic,csISOLatinCyrillic
JUS_I.B1.003-serb            iso-ir-146, serbian,           ECMA registry                           RFC1345, KXS2csISO146Serbian
JUS_I.B1.003-mac             macedonian, iso-ir-147,        ECMA registry                           RFC1345, KXS2csISO147Macedonian
ISO-8859-9                   ISO_8859-9:1989, iso-ir-148,   ECMA registry                           RFC1345, KXS2
ISO_8859-9, latin5, l5,csISOLatin5greek-ccitt                  iso-ir-150, csISO150,          ECMA registry                           RFC1345, KXS2csISO150GreekCCITT
NC_NC00-10:81                cuba, iso-ir-151, ISO646-CU,   ECMA registry                           RFC1345, KXS2csISO151Cuba
ISO_6937-2-25                iso-ir-152, csISO6937Add       ECMA registry                           RFC1345, KXS2
GOST_19768-74                ST_SEV_358-88, iso-ir-153,     ECMA registry                           RFC1345, KXS2csISO153GOST1976874
ISO_8859-supp                iso-ir-154, latin1-2-5,        ECMA registry                           RFC1345, KXS2csISO8859Supp
ISO_10367-box                iso-ir-155, csISO10367Box      ECMA registry                           RFC1345, KXS2
ISO-8859-10                  iso-ir-157, l6,                ECMA registry                           RFC1345, KXS2
ISO_8859-10:1992,csISOLatin6, latin6latin-lap                    lap, iso-ir-158, csISO158Lap   ECMA registry                           RFC1345, KXS2
JIS_X0212-1990               x0212, iso-ir-159,             ECMA registry                           RFC1345, KXS2csISO159JISX02121990
DS_2089                      DS2089, ISO646-DK, dk,         Danish Standard, DS 2089, February      RFC1345, KXS2csISO646Danish                 1974us-dk                        csUSDK                                RFC1345, KXS2dk-us                        csDKUS                                RFC1345, KXS2
JIS_X0201                    X0201, csHalfWidthKatakana     JIS X 0201-1976—1 byte only; this is    RFC1345, KXS2equivalent to JIS/Roman (similar to
ASCII) plus 8-bit half-width katakana|

Table H-1. IANA MIME charset tags (continued)
Charset tag                  Aliases                        Description                             References
KSC5636                      ISO646-KR, csKSC5636                  RFC1345, KXS2
ISO-10646-UCS-2              csUnicode                      The 2-octet Basic Multilingual Plane,a.k.a. Unicode—this needs to specifynetwork byte order; the standard doesnot specify it (it is a 16-bit integerspace)
ISO-10646-UCS-4              csUCS4                         The full code space (same commentabout byte order; these are 31-bitnumbers)
DEC-MCS                      dec, csDECMCS                  VAX/VMS User’s Manual, Order            RFC1345, KXS2
Number: AI-Y517A-TE, April 1986hp-roman8                    roman8, r8, csHPRoman8         LaserJet IIP Printer User’s Manual, HP  HP-PCL5,part no 33471-90901, Hewlett-           RFC1345, KXS2
Packard, June 1989macintosh                    mac, csMacintosh               The Unicode Standard v1.0, ISBN         RFC1345, KXS20201567881, Oct 1991
IBM037                       cp037, ebcdic-cp-us,           IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2ebcdic-cp-ca, ebcdic-cp-wt,   1990ebcdic-cp-nl, csIBM037
IBM038                       EBCDIC-INT, cp038, csIBM038    IBM 3174 Character Set Ref, GA27-       RFC1345, KXS23831-02, March 1990
IBM273                       CP273, csIBM273                IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM274                       EBCDIC-BE, CP274, csIBM274     IBM 3174 Character Set Ref, GA27-       RFC1345, KXS23831-02, March 1990
IBM275                       EBCDIC-BR, cp275, csIBM275     IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM277                       EBCDIC-CP-DK,EBCDIC-CP-NO,     IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2csIBM277                       1990
IBM278                       CP278, ebcdic-cp-fi,           IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2ebcdic-cp-se, csIBM278         1990
IBM280                       CP280, ebcdic-cp-it, csIBM280  IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM281                       EBCDIC-JP-E, cp281, csIBM281   IBM 3174 Character Set Ref, GA27-       RFC1345, KXS23831-02, March 1990
IBM284                       CP284, ebcdic-cp-es,           IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2csIBM284                       1990
IBM285                       CP285, ebcdic-cp-gb,           IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2csIBM285                       1990
IBM290                       cp290, EBCDIC-JP-kana,         IBM 3174 Character Set Ref, GA27-       RFC1345, KXS2csIBM290                       3831-02, March 1990
IBM297                       cp297, ebcdic-cp-fr, csIBM297  IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990|

Table H-1. IANA MIME charset tags (continued)
Charset tag                  Aliases                        Description                             References
IBM420                       cp420, ebcdic-cp-ar1,          IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2csIBM420                       1990, IBM NLS RM p 11-11
IBM423                       cp423, ebcdic-cp-gr,           IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2csIBM423                       1990
IBM424                       cp424, ebcdic-cp-he,           IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2csIBM424                       1990
IBM437                       cp437, 437,                    IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2csPC8CodePage437               1990
IBM500                       CP500, ebcdic-cp-be,           IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2ebcdic-cp-ch, csIBM500        1990
IBM775                       cp775, csPC775Baltic           HP PCL 5 Comparison Guide (P/N 5021-    HP-PCL50329) pp B-13, 1996
IBM850                       cp850, 850,                    IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2csPC850Multilingual            1990
IBM851                       cp851, 851, csIBM851           IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM852                       cp852, 852, csPCp852           IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM855                       cp855, 855, csIBM855           IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM857                       cp857, 857, csIBM857           IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM860                       cp860, 860, csIBM860           IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM861                       cp861, 861, cp-is, csIBM861    IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM862                       cp862, 862,                    IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2csPC862LatinHebrew             1990
IBM863                       cp863, 863, csIBM863           IBM keyboard layouts and code pages,    RFC1345, KXS2
PN 07G4586, June 1991
IBM864                       cp864, csIBM864                IBM keyboard layouts and code pages,    RFC1345, KXS2
PN 07G4586, June 1991
IBM865                       cp865, 865, csIBM865           IBM DOS 3.3 Ref (Abridged), 94X9575,    RFC1345, KXS2
Feb 1987
IBM866                       cp866, 866, csIBM866           IBM NLDG Vol2 SE09-8002-03, August      Pond1994
IBM868                       CP868, cp-ar, csIBM868         IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM869                       cp869, 869, cp-gr, csIBM869    IBM keyboard layouts and code pages,    RFC1345, KXS2
PN 07G4586, June 1991
IBM870                       CP870, ebcdic-cp-roece,        IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2ebcdic-cp-yu, csIBM870         1990|

Table H-1. IANA MIME charset tags (continued)
Charset tag                  Aliases                        Description                             References
IBM871                       CP871, ebcdic-cp-is, csIBM871  IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM880                       cp880, EBCDIC-Cyrillic,        IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2csIBM880                       1990
IBM891                       cp891, csIBM891                IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM903                       cp903, csIBM903                IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM904                       cp904, 904, csIBBM904          IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
IBM905                       CP905, ebcdic-cp-tr, csIBM905  IBM 3174 Character Set Ref, GA27-       RFC1345, KXS23831-02, March 1990
IBM918                       CP918, ebcdic-cp-ar2,          IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS2csIBM918                       1990
IBM1026                      CP1026, csIBM1026              IBMNLSRMVol2SE09-8002-01,March          RFC1345, KXS21990
EBCDIC-AT-DE                 csIBMEBCDICATDE                IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-AT-DE-A               csEBCDICATDEA                  IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-CA-FR                 csEBCDICCAFR                   IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-DK-NO                 csEBCDICDKNO                   IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-DK-NO-A               csEBCDICDKNOA                  IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-FI-SE                 csEBCDICFISE                   IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-FI-SE-A               csEBCDICFISEA                  IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-FR                    csEBCDICFR                     IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-IT                    csEBCDICIT                     IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-PT                  IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-ES                    csEBCDICES                     IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-ES-A                  csEBCDICESA                    IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987|

Table H-1. IANA MIME charset tags (continued)
Charset tag                  Aliases                        Description                             References
EBCDIC-ES-S                  csEBCDICESS                    IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-UK                    csEBCDICUK                     IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
EBCDIC-US                    csEBCDICUS                     IBM 3270 Char Set Ref Ch 10, GA27-      RFC1345, KXS22837-9, April 1987
UNKNOWN-8BIT                 csUnknown8BiT                         RFC1428
MNEMONIC                     csMnemonic                     RFC 1345, also known as                 RFC1345, KXS2“mnemonic+ascii+38”
MNEM                         csMnem                         RFC 1345, also known as                 RFC1345, KXS2“mnemonic+ascii+8200”
VISCII                       csVISCII                       RFC 1456                                RFC1456
VIQR                         csVIQR                         RFC 1456                                RFC1456
KOI8-R                       csKOI8R                        RFC 1489, based on GOST-19768-74,       RFC1489
ISO-6937/8, INIS-Cyrillic, ISO-5427
KOI8-U                     RFC 2319                                RFC2319
IBM00858                     CCSID00858, CP00858, PC-       IBM (see .../assignments/character-
Multilingual-850+euro          set-info/IBM00858) [Mahdi]
IBM00924                     CCSID00924, CP00924, ebcdic-   IBM (see .../assignments/character-
Latin9--euro                   set-info/IBM00924) [Mahdi]
IBM01140                     CCSID01140, CP01140, ebcdic-   IBM (see .../assignments/character-us-37+euro                     set-info/IBM01140) [Mahdi]
IBM01141                     CCSID01141, CP01141, ebcdic-   IBM (see .../assignments/character-de-273+euro                    set-info/IBM01141) [Mahdi]
IBM01142                     CCSID01142, CP01142, ebcdic-   IBM (see .../assignments/character-dk-277+euro, ebcdic-no-        set-info/IBM01142) [Mahdi]277+euro
IBM01143                     CCSID01143, CP01143, ebcdic-   IBM (see .../assignments/character-fi-278+euro, ebcdic-se-        set-info/IBM01143) [Mahdi]278+euro
IBM01144                     CCSID01144, CP01144, ebcdic-   IBM (see .../assignments/character-it-280+euro                    set-info/IBM01144) [Mahdi]
IBM01145                     CCSID01145, CP01145, ebcdic-   IBM (see .../assignments/character-es-284+euro                    set-info/IBM01145) [Mahdi]
IBM01146                     CCSID01146, CP01146, ebcdic-   IBM (see .../assignments/character-gb-285+euro                    set-info/IBM01146) [Mahdi]
IBM01147                     CCSID01147, CP01147, ebcdic-   IBM (see .../assignments/character-fr-297+euro                    set-info/IBM01147) [Mahdi]
IBM01148                     CCSID01148, CP01148, ebcdic-   IBM (see .../assignments/character-international-500+euro         set-info/IBM01148) [Mahdi]|

Table H-1. IANA MIME charset tags (continued)
Charset tag                  Aliases                        Description                             References
IBM01149                     CCSID01149, CP01149, ebcdic-   IBM (see .../assignments/character-is-871+euro                    set-info/IBM01149) [Mahdi]
Big5-HKSCS                   None                           See (.../assignments/character-set-info/Big5-HKSCS) [Yick]
UNICODE-1-1                  csUnicode11                    RFC 1641                                RFC1641
SCSU                         None                           SCSU (see .../assignments/character-set-info/SCSU) [Scherer]
UTF-7                        None                           RFC 2152                                RFC2152
UTF-16BE                     None                           RFC 2781                                RFC2781
UTF-16LE                     None                           RFC 2781                                RFC2781
UTF-16                       None                           RFC 2781                                RFC2781
UNICODE-1-1-UTF-7            csUnicode11UTF7                RFC 1642                                RFC1642
UTF-8                      RFC 2279                                RFC2279iso-8859-13                ISO (see ...assignments/character-set-info/iso-8859-13)[Tumasonis]iso-8859-14                  iso-ir-199,                    ISO (see ...assignments/character-set-
ISO_8859-14:1998,              info/iso-8859-14) [Simonsen]
ISO_8859-14, latin8,iso-celtic, l8
ISO-8859-15                  ISO_8859-15                    ISO
JIS_Encoding                 csJISEncoding                  JIS X 0202-1991; uses ISO 2022 escapesequences to shift code sets, asdocumented in JIS X 0202-1991
Shift_JIS                    MS_Kanji, csShiftJIS           This charset is an extension ofcsHalfWidthKatakana—it addsgraphic characters in JIS X 0208. The
CCSs areJIS X0201:1997 and JIS X0208:1997.Thecompletedefinitionisshownin Appendix 1 of JISX0208:1997. Thischarset can be used for the top-levelmedia type “text”.
EUC-JP                       Extended_UNIX_Code_            Standardized by OSF, UNIX
Packed_Format_for_             International, and UNIX Systems
Japanese,                      Laboratories Pacific. Uses ISO 2022csEUCPkdFmtJapanese            rules to select code set. code set 0: US-
ASCII (a single 7-bit byte set); code set1: JIS X0208-1990 (a double 8-bit byteset) restricted to A0–FF in both bytes;code set 2: half-width katakana (asingle 7-bit byte set) requiring SS2 asthe character prefix; code set 3: JIS
X0212-1990 (a double 7-bit byte set)restricted to A0–FF in both bytesrequiring SS3 as the character prefix.|

Table H-1. IANA MIME charset tags (continued)
Charset tag                  Aliases                        Description                             References
Extended_UNIX_Code_          csEUCFixWidJapanese            Used in Japan. Each character is 2
Fixed_Width_for_           octets. code set 0: US-ASCII (a single 7-
Japanese                   bit byteset),1stbyte=00,2ndbyte=20–7E; code set 1: JIS X0208-1990 (adouble 7-bit byte set) restricted to A0–
FFinbothbytes;codeset2:half-widthkatakana (a single 7-bit byte set), 1stbyte=00,2ndbyte=A0–FF;codeset3: JIS X0212-1990 (a double 7-bit byteset)restrictedtoA0–FFinthefirstbyteand 21–7E in the second byte.
ISO-10646-UCS-Basic          csUnicodeASCII                 ASCII subset of Unicode. Basic Latin =collection 1. SeeISO10646,AppendixA.
ISO-10646-Unicode-Latin1     csUnicodeLatin1, ISO-10646     ISO Latin-1 subset of Unicode. Basic
Latin and Latin-1. Supplement =collections 1 and 2. See ISO 10646,
Appendix A, and RFC 1815.
ISO-10646-J-1              ISO 10646 Japanese. See RFC 1815.
ISO-Unicode-IBM-1261         csUnicodeIBM1261               IBM Latin-2, -3, -5, Extended
Presentation Set, GCSGID: 1261
ISO-Unicode-IBM-1268         csUnidoceIBM1268               IBMLatin-4ExtendedPresentationSet,
GCSGID: 1268
ISO-Unicode-IBM-1276         csUnicodeIBM1276               IBM Cyrillic Greek Extended
Presentation Set, GCSGID: 1276
ISO-Unicode-IBM-1264         csUnicodeIBM1264               IBM Arabic Presentation Set, GCSGID:1264
ISO-Unicode-IBM-1265         csUnicodeIBM1265               IBM Hebrew Presentation Set, GCSGID:1265
ISO-8859-1-Windows-3.0-      csWindows30Latin1              Extended ISO 8859-1 Latin-1 for         HP-PCL5
Latin-1                    Windows 3.0. PCL Symbol Set ID: 9U.
ISO-8859-1-Windows-3.1-      csWindows31Latin1              Extended ISO 8859-1 Latin-1 for         HP-PCL5
Latin-1                    Windows 3.1. PCL Symbol Set ID: 19U.
ISO-8859-2-Windows-          csWindows31Latin2              Extended ISO 8859-2. Latin-2 for        HP-PCL5
Latin-2                    Windows 3.1. PCL Symbol Set ID: 9E.
ISO-8859-9-Windows-          csWindows31Latin5              Extended ISO 8859-9. Latin-5 for        HP-PCL5
Latin-5                    Windows 3.1. PCL Symbol Set ID: 5T.
Adobe-Standard-Encoding      csAdobeStandardEncoding        PostScript Language Reference           Adobe
Manual. PCL Symbol Set ID: 10J.
Ventura-US                   csVenturaUS                    Ventura US-ASCII plus characters        HP-PCL5typically used in publishing, such aspilcrow, copyright, registered,trademark, section, dagger, anddoubledaggerintherangeA0(hex)to
FF (hex). PCL Symbol Set ID: 14J.|

Table H-1. IANA MIME charset tags (continued)
Charset tag                  Aliases                        Description                             References
Ventura-International        csVenturaInternational         VenturaInternational.ASCIIpluscoded     HP-PCL5characters similar to Roman8. PCL
Symbol Set ID: 13J.
PC8-Danish-Norwegian         csPC8DanishNorwegian           PC Danish Norwegian 8-bit PC set for    HP-PCL5
Danish Norwegian. PCL Symbol Set ID:11U.
PC8-Turkish                  csPC8Turkish                   PCLatinTurkish.PCLSymbolSetID:9T.       HP-PCL5
IBM-Symbols                  csIBMSymbols                   Presentation Set, CPGID: 259            IBM-CIDT
IBM-Thai                     csIBMThai                      Presentation Set, CPGID: 838            IBM-CIDT
HP-Legal                     csHPLegal                      PCL 5 Comparison Guide, Hewlett-        HP-PCL5
Packard, HP part number 5961-0510,
October 1992. PCL Symbol Set ID: 1U.
HP-Pi-font                   csHPPiFont                     PCL 5 Comparison Guide, Hewlett-        HP-PCL5
Packard, HP part number 5961-0510,
October 1992. PCL Symbol Set ID: 15U.
HP-Math8                     csHPMath8                      PCL 5 Comparison Guide, Hewlett-        HP-PCL5
Packard, HP part number 5961-0510,
October 1992. PCL Symbol Set ID: 8M.
Adobe-Symbol-Encoding        csHPPSMath                     PostScript Language Reference           Adobe
Manual. PCL Symbol Set ID: 5M.
HP-DeskTop                   csHPDesktop                    PCL 5 Comparison Guide, Hewlett-        HP-PCL5
Packard, HP part number 5961-0510,
October 1992. PCL Symbol Set ID: 7J.
Ventura-Math                 csVenturaMath                  PCL 5 Comparison Guide, Hewlett-        HP-PCL5
Packard, HP part number 5961-0510,
October 1992. PCL Symbol Set ID: 6M.
Microsoft-Publishing         csMicrosoftPublishing          PCL 5 Comparison Guide, Hewlett-        HP-PCL5
Packard, HP part number 5961-0510,
October 1992. PCL Symbol Set ID: 6J.
Windows-31J                  csWindows31J                   Windows Japanese. A furtherextension of Shift_JIS to include NECspecial characters (Row 13), NECselectionofIBMextensions(Rows89to92), and IBM extensions (Rows 115 to119). The CCSs are JIS X0201:1997, JIS
X0208:1997,andtheseextensions.Thischarset can be used for the top-levelmediatype“text”,butitisoflimitedorspecialized use (see RFC 2278). PCL
Symbol Set ID: 19K.
GB2312                       csGB2312                       Chinese for People’s Republic of China(PRC) mixed 1-byte, 2-byte set: 20–7E= 1-byte ASCII; A1–FE = 2-byte PRC
Kanji. See GB 2312-80. PCL Symbol Set
ID: 18C.|

Table H-1. IANA MIME charset tags (continued)
Charset tag                  Aliases                        Description                             References
Big5                         csBig5                         Chinese for Taiwan Multibyte set. PCL
Symbol Set id: 18T.windows-1250               Microsoft (see .../character-set-info/windows-1250) [Lazhintseva]windows-1251               Microsoft (see .../character-set-info/windows-1251) [Lazhintseva]windows-1252               Microsoft (see .../character-set-info/windows-1252) [Wendt]windows-1253               Microsoft (see .../character-set-info/windows-1253) [Lazhintseva]windows-1254               Microsoft (see .../character-set-info/windows-1254) [Lazhintseva]windows-1255               Microsoft (see .../character-set-info/windows-1255) [Lazhintseva]windows-1256               Microsoft (see .../character-set-info/windows-1256) [Lazhintseva]windows-1257               Microsoft (see .../character-set-info/windows-1257) [Lazhintseva]windows-1258               Microsoft (see .../character-set-info/windows-1258) [Lazhintseva]
TIS-620                    Thai Industrial Standards Institute     [Tantsetthi](TISI)
HZ-GB-2312                 RFC 1842, RFC 1843 [RFC1842,
RFC1843]|

Index
Symbols            algorithms: (colon), use in headers, 47                           aging and freshness, 187–194= (equals sign), base-64 encoding, 572                  document age calculation, 189–194/~ (slash-tilde), 122  instance-manipulation algorithms, 367
LM-Factor, 184
Numbers                message digest algorithms, 291–294symmetric authentication, 2988-bit identity encoding, 382                            Nagle’s algorithm, 84100 Continue status code, 59, 60                        redirection, enhanced DNS-based, 457100-199 status codes, 59–60, 505                        resource-discovery algorithm200-299 status codes, 61, 505(WPAD), 143, 465300-399 status codes, 61–64, 506                        RSA, 317400-499 status codes, 65–66, 506                    aliases (URLs), 219500-599 status codes, 66, 507                       Allow headers, 159, 5112MSL (maximum segment lifetime), 85                 <allprop> element, 437anonymizers, 136
A                  anycast addressing, 457absolute URLs, 30  Apache web servers, 110
Accept headers, 69, 508content negotiation, 399robots and, 225       MultiViews directive, 400
Accept-Charset headers, 371, 375, 509                      type-map files, 399
MIME charset encoding tags and, 374                 DirectoryIndex configuration
Accept-Encoding headers, 509 directive, 123
Accept-Instance-Manipulation headers, 367               document root, setting, 121
Accept-Language headers, 371, 385, 510                  HostnameLookups configurationcontent negotiation and, 398                              directive, 115
Accept-Ranges headers, 510                              HTTP headers, control of, 186access controls, 124   IdentityCheck configurationproxy authentication, 156directive, 116access proxies, 137    magic typing, 126advertising, hit counts and caches, 194–196         APIs (application programmingage and freshness lifetime, 188                               interfaces), 203
Age headers, 510       server extensions, 205agents, 19             web services and, 205
We’d like to hear your suggestions for improving our indexes. Send email to index@oreilly.com.617application/* MIME types, 540–557                     basic authentication, 281–284application programming interfaces (see                    example, 281
APIs)    headers, 281, 300application servers, 123, 203                              insecurity of, 283, 286
ASCII character set, 379  protection space, 302asymmetric cryptography, 315                               by proxy servers, 283attacks, 303–306          username/password encoding, 282batched brute-force attacks, 305                     web server vs. proxy, 283chosen plaintext attacks, 305                        (see also authentication)dictionary attacks, 304                         batched brute-force attacks, 305enumeration, 313                                Binary Wire Protocol, 250, 252evidence of, 301                                blind relays, 94header tampering, 303                           browsershostile proxies, 304Host headers and older versions of, 419man-in-the-middle attacks, 304                       HTTP, use of, 13replay attacks, 284, 303                             parallel connections, maximum, 90preventing, 289URLs, automatic expansion of, 34audio/* MIME types, 557–559                           byte hit rate, 167authentication, 277–280basic (see basic authentication)                Cchallenge/response framework, 278               Cache Array Routing Protocol (see CARP)digest (see digest authentication)              Cache-Control headers, 175–177, 182–186,headers, 278                   189, 511
HTCP, 480           directives, 361multiple authentication schemes, risks          caches, 18, 133, 161–196of, 303  advertising and, 194–196protocols, 278      aging and freshness algorithms, 187–194proxy servers, 156  byte hit rate, 167server, using digital certificates, 321              cache busting, 492(see also HTTPS)    cache hits and misses, 165, 168
Authentication-Info directives, 576                        cache meshes, 170
Authorization headers, 281, 511                            cache validators, 181directives, 575     Cache-Control headers, 175–177,preemptive generation, 295     182–186, 189, 511automatic expansion of URLs, 30 directives, 361
B                         cookies and, 273digest authentication and, 302bandwidth                 distance delays and, 163bottlenecks, 161    DNS caching and load balancing, 456transfer times and, 162                              document expiration, 175base URLs, 32             exclusion of documents from, 182base-64 encoding, 570–572 expiration time, setting, 182alphabet, 571       Expires headers, 175, 183equals sign (=), 572flash crowds and, 163
HTTP, compatibility with, 570                        freshness check, 173padding, 572        heuristic expiration, 184
Perl implementation, 572                             hit logs, 195purpose, 570        hit rate, 167username/password, 282                               HTTP-EQUIV tag, 187bases, 31|
logging, 174   chemical/* MIME types, 559–561lookup, 173    child filters, 131maintaining currency, 175                       chosen plaintext attacks, 305message truncation and, 344                     chunked encodings, 345network bottlenecks and, 161                    ciphers (see under cryptography)parent caches, 169                              ciphertext, 310parsing, 172   cleartext, 310peering, 171   client error status codes (400-499), 65–66,processing steps, 171–175      505flowchart, 175                             client hostname identification, 115receiving, 172 client proxy configuration, 141–144response creation, 174                               manual, 142revalidate hits, 165PAC (Proxy Auto-configuration)revalidations, 165–166         protocol, 142, 463sending, 174        WPAD (Web Proxy Autodiscoveryserver revalidation, 175, 177  Protocol), 143setting controls, 186                           client-driven negotiation, 396sibling caches, 171 disadvantages, 396surrogate caches, 421                           Client-ip headers, 258, 260, 512topologies, 168clientsuses, 161           100 Continue status code and, 59caching headers, 68       freshness constraints, 185caching proxies (see caches)                               Host header requirements, 418caching proxy servers, 169identification, 257–276canonicalizing of URLs, 37, 220 fat URLs, using for, 262
CARP (Cache Array Routing       IP addresses, using for, 259
Protocol), 475–478                              user logins, using for, 260disadvantages, 476        (see also cookies)
ICP vs., 475        supported character sets, 375redirection method, 476                         client-side gateways, 199
CAs (certificate authorities), 327                         security accelerator gateways, 202case sensitivity, language tags, 386                  client-side state, 265
CDNs (content distribution networks), 421             code width, 377certificate authorities (CAs), 327                    coded character sets, 377, 379certificates (see digital certificates)               coded characters, 376
CGI (Common Gateway Interface), 203, 204              coding space, 376challenge/response authentication                     collections, 439model, 278                           collisions, one-way digests, 288challenge headers, 72                           colon (:), use in headers, 47multiple challenges, 301                        Combined Log Format, 485character encoding schemes, 377, 381                  Common Gateway Interface (CGI), 203, 204character repertoire, 377                             Common Log Format, 484character sets, 35, 371–376                           composite MIME types, 534encoding, 370  conditional requests, 362mechanisms, 36 headers, 70, 178–181restricted characters, 36                       configuration URLs (CURLs), 465characters, 378      CONNECT method, 206–208, 336
URLs, legal in, 35                              connection handshake delays, 82charset tags, 371    Connection headers, 86, 512
IANA MIME character set registry                connections (see HTTP connections)and, 371                             content distribution networks (CDNs), 421|
content encodings, 345, 351–354                       COPY method, 442content injection, 405                                country codes, 388content negotiation, 395–403                          country tokens, 388on Apache web servers, 399                      crawlers, 215–224client-driven negotiation, 396                       aliasing, 219headers, 397        canonicalizing of URLs, 220other protocols and, 405                             checkpoints, 219performance limitations, 405                         cycles, avoiding, 217–218, 222–224quality values, 398 dups, 218server-driven negotiation, 397–400                   filesystem link cycles, 220techniques, 395     hash tables, 218transparent negotiation, 400–403                     loops, 217content routers, 134, 170 lossy presence bit maps, 218
Content-Base headers, 513 partitioning, 219
Content-Encoding headers, 513                              root set, 216content-injection, 405    search trees, 218
Content-Language headers, 371, 384, 513                    tracking of visited sites, 218
Content-Length headers, 344–347, 514                       traps, 220–224content encoding and, 345                       CRLF, 44persistent connections and, 345                      in entities, 343
Content-Location headers, 514                         cryptographic checksums, 289
Content-MD5 headers, 347, 514                         cryptography, 309–317
Content-Range headers, 515asymmetrically keyed ciphers, 315
Content-Type headers, 348–351, 515                         cipher machines, 311character encodings, 349                             ciphers, 310–315charset parameter, 371    digital, 311
META tags and, 375                              ciphertext, 310
MIME charset encoding tags and, 374                  cleartext, 310multipart form submissions, 349                      enumeration attacks, 313continuation lines, in headers, 51                         hybrid cryptosystems, 317
Continue status code (100), 59–60                          keyed ciphers, 311
Cookie headers, 516       keys, 311, 312
Cookie2 headers, 516            key length, 313cookies, 263–276                sharing, logistical aspects of, 315browsers, storage on, 264                            public-key cryptography, 315–317caching, 273              computation speed, 317domain attributes, 267    digital signing with, 318functioning, 264    RSA algorithm, 317information contained in, 264                        symmetric-key ciphers, 313
Path attributes, 268                            CURLs (configuration URLs), 465privacy and, 275                                cycles, avoiding (web robots), 217–218,security and, 275              222–224session tracking, 272                                filesystem link cycles, 220
Set-Cookie2 headers, 271specifications, 268                             Dthird-party vendors, use by, 267                data formats, conversion, 135types, 264     date formats, 392
Version 0, 269 Date headers, 516
Version 1, 270–272                              DAV headers, 431headers, 272   compliance classes, 445version negotiation, 272                        decomposing of URLs, 33web site specificity of, 266|
dedicated web hosting, 412                            digital signatures, 317–319delayed acknowledgements, 83                               example, 318
DELETE method, 58, 441                                digtest.c file, 580delta encodings, 359, 365–367                         directory listings, 122server disk space and, 368                           disabling, 123delta generators and appliers, 368                    discrete MIME types, 534<depth> element, 434 distance delays, 163
Depth headers, 431   distributed objects (HTTP:NG), 249
Destination headers, 431                              DNSdictionary attacks, 304   caching, 456digcalc.c file, 578       DNS A record lookup, 467digcalc.h file, 577       redirection, 453–457digest authentication, 286–306, 574–580                          enhanced algorithms for, 457algorithms, 291–295       multiple addresses and round-robininput data, 291           address rotation, 455authentication process, 287                          resolvers, 453
Authentication-Info directives, 576                  round robin, 454, 455
Authorization directives, 575                              load balancing with, 456basic authentication, compared to, 286          docroots (document roots), 120caching and, 302    private, 122digest calculations, 291                             user home directory, 122error handling, 301 virtually hosted, 121
H(A1) and H(A2) reference code, 577             document access control, 132handshakes, 290document expiration, 175headers, 300        setting, 182
MD5 and MD5-sess, 291                           document hit rate, 167message-related data (A2), 293, 298             document roots (see docroots)nonces, 289    documentspassword files, vulnerabilities of, 305              age and freshness lifetime, 188preemptive authorization, 296                        age-calculation algorithms, 189–194protection space, 302                                caching, preventing, 182request and response digest reference                freshness and aging algorithms, 187–194code, 577heuristic expiration, 184revalidating a session, 295                     Domain Name Service (see DNS)rewriting URIs, 302                             domain names, internationalization of, 392security, 286  downstream message flow, 44security-related data (A1), 293                 dups (web robots), 218session, 295   dynamic content resource mapping, 123symmetric authentication, 298
WWW-Authenticate directives, 574–575            E(see also authentication)                       egress proxies, 137digests, 288         embedded web servers, 111algorithm input data, 291                       encodings, 372collisions, 288     chunked encodings, 345digital certificates, 319–322                              content encodings, 345, 351–354public-key cryptography and, 320                     delta encodings, 359, 365–367server authentication, use for, 321                        impact on server disk space, 368universal standard, lack of, 320                     fixed-width, 381virtual hosting and, 328                             transfer encodings, 354–359
X.509v3 certificates, 320                       end-of-line sequence, 44digital cryptography (see cryptography)|
entities, 342             FrontPage Server Extensions (FPSE), 424body length, determining, 346                        HTTP POST requests and, 425
Content-Length headers, 344–347                      listExploreDocs element, POST request
CRLF line, 343                 body, 427entity bodies, 44, 47, 52, 343                             listHiddenDocs element, POST request
MIME types, 348                body, 427entity digests, 347       root web, 425entity headers (see under headers)                         RPC protocol, 426entity tags (see ETags)   security, 428enumeration attacks, 313  server administrator utilityequals sign (=), base-64 encoding, 572                                (Fpsrvadm), 428escape sequences, 36      service_name element, POST request
ETags (entity tags), 180, 298        body, 427headers, 517        subweb, 426using, 181          virtual servers, 425euc-jp encoding, 383 ftp scheme, 39
Expect headers, 517  full NAT, 461experimental MIME types, 569                          full-text indexes, 243expiration of documents, setting, 182
Expires headers, 175, 183, 517                        Gexplicit MIME typing, 126                             gateways, 19, 197–205
Extensible Markup Language (see XML)                       client- and server-side, 199extension APIs, 205       client-side security acceleratorextension headers, 51, 68            gateways, 202extension methods, 58     examples, 198
F                         protocol gateways, 200proxies, contrasted with, 130
Fast CGI, 205             resource gateways, 203fat URLs, 262             server-side security gateways, 202limitations of, 263 server-side web gateways, 200file scheme, 39           Via headers and, 153filesystem link cycles, 220                           general headers (see under headers)
FindProxyForURL( ) method, 143                        general-purpose software web servers, 110fingerprint functions, 289                            Generic Router Encapsulation (GRE), 472first subtag, 387    GET command, virtual hosting issues, 414fixed-width encodings, 381                            GET messages, processing steps, 171–175flash crowds, 163    GET method, 53format conversion, 404                                getpeername function, 259
FPAdminScriptUrl, 426glyphs, 378
FPAuthorScriptUrl, 426                                GRE (Generic Router Encapsulation), 472
FPShtmlScriptUrl, 426
Fpsrvadm, 428        Hfrag or fragment component, URLs, 30                  H(A1) and H(A2) reference code, 577freshness and aging algorithms, 187–194               half NAT, 461freshness lifetime, 188                               handshake delays, 82
From headers, 258, 517                                handshakes, digest authentication, 290robots and, 225hash tables, 218
FrontPage, 424–429   H(d), one-way hash, 291client and server extension                     HEAD method, 54communication, 426                   HEAD response, 346|
headers, 47, 51, 67–73, 508–532                            Expires, 175, 183, 517
Accept, 69, 508     extension headers, 68robots and, 225From, 517
Accept-Charset, 371, 375, 509                              robots and, 225
MIME charset encoding tags and, 374             general headers, 51, 67, 68
Accept-Encoding, 509      caching headers, 68
Accept-Language, 371, 385, 510                       Heuristic Expiration Warning, 184content negotiation and, 398                    Host, 417, 418, 419, 518
Accept-Ranges, 510        robots and, 225
Age, 510            HTCP cache headers, 480
Allow, 159, 511     If, 431authentication, 278 If-Match, 519basic, 281, 300If-Modified-Since, 166, 178, 518digest, 300    If-None-Match, 180, 519
Authentication-Info directives, 576                  If-Range, 519
Authorization, 281, 511                              If-Unmodified-Since, 520directives, 575Last-Modified, 520preemptive generation, 295                      Location, 520
Cache-Control, 175–177, 182–186, 189,                Lock-Token, 431511      max-age, 183directives, 361Max-Forwards, 155, 521character set requirements, 392                      for media types, 348classification, 51  Meter, 196, 493client identification using, 258                     MIME-Version, 521
Client-ip, 258, 260, 512                             must-revalidate, 183
Connection, 86, 512 no-cache, 182content negotiation, 397                             no-store, 182
Content-Base, 513   Overwrite, 432, 442
Content-Encoding, 513                                Pragma, 68, 182, 521
Content-Language, 371, 384, 513                      Proxy-Authenticate, 522
Content-Length, 344–347, 514                         Proxy-Authorization, 522
Content-Location, 514                                Proxy-Connection, 96, 523
Content-MD5, 347, 514                                Public, 523
Content-Range, 515  Range, 524
Content-Type, 348–351, 515                           Referer, 259, 524charset parameter, 371                                robots and, 225continuation lines, 51                               request headers, 51, 67, 69–71
Cookie, 516               accept headers, 69
Cookie2, 516              client identification using, 258
Date, 516                 conditional request headers, 70
DAV, 431                  proxy request headers, 70compliance classes, 445                               request security headers, 70
Depth, 431          response headers, 51, 67, 71–72
Destination, 431          negotiation headers, 71entity headers, 51, 67, 72response security headers, 72content headers, 72                             Retry-After, 525entity caching headers, 73                      Server, 525
HTTP/1.1, 342  Set-Cookie, 264, 525
ETag, 517                 caching and, 273examples, 51              domain attributes, 267
Expect, 517         Set-Cookie2, 271, 526|
headers (continued)       message structure, 478syntax, 51          opcodes, 480tampering attack, 303                           HTML (Hypertext Markup Language)
TE, 526             displaying resources using HTTP, 13
Timeout, 432, 435   documents, relative URLs in, 31
Title, 527          fragments, referencing, 30
Trailer, 526        robot-control META tags, 237
Transfer-Encoding, 527                          HTTP (Hypertext Transfer Protocol), xiii,
UA-, 527                       3–11, 247for uncachable documents, 182                        authentication, challenge/responseunsupported headers, handling, 158                              framework, 278
Upgrade, 528              (see also authentication)
User-Agent, 225, 259, 528                            authentication schemes, security
Vary, 402, 529                 risks, 303
Via, 151–154, 529   base-64 encoding, compatibility
Want-Digest, 348               with, 570
Warning, 530        caching (see caches)
Warning 13, 184     character sets (see character sets)for WebDAV, 431     clients and servers, 4
WWW-Authenticate, 281, 531, 574–575                  commands, 8
X-Cache, 531        CONNECT method, 206–208
X-Forwarded-For, 260, 531                            connections (see HTTP connections)
X-Pad, 531          entities (see entities)
X-Serial-Number, 532headers (see headers)heartbeat messages, 473   hit metering extension, 492heuristic expiration of documents, 184                     HTTP-NG (see HTTP-NG)
Heuristic Expiration Warning headers, 184                  informational resources, 21history expansion, 34     instance manipulations, 359hit logs, 195             international content support, 370hit metering, 492–494     limitations, 248
Meter headers, 493  messages (see HTTP messages)hit rate, 167             methods, 8host component, URLs, 27  performance considerations (see under
Host headers, 417, 418, 518          TCP)clients, requirements for, 418                       proxy servers (see HTTP proxy servers)missing host headers, 419                            redirection, 452–453proxies and, 418, 419                                relays, 212robots and, 225     reliability of, 3web servers, interpretation by, 419                  revalidations, 165–166hostile proxies, 304      robots, standards for, 225hosting services, 411     secure HTTP (see HTTPS)dedicated web hosting, 412                           status codes, 9, 505–507hostname expansion, 34    TCP, dependency on, 80hostnames, 13             textual basis of, 10<href> element, 438       transactions, 8.htaccess, 428                  delays, causes of, 80
HTCP (Hyper Text Caching  truncation detection, 344
Protocol), 478–481                        versions, 16authentication, 480                             HTTP connections, 74, 75, 86–104cache headers, 480  closing, 101–104caching policies, setting, 480                       Connection headers, 86, 512data components, 479establishing, 13, 15–16|
keep-alive connections                        HTTP/1.0, 16(HTTP/1.0+), 91–96                        server requests to virtual hosts, problemsparallel (see parallel connections)                     with, 413persistent (see persistent connections)       HTTP/1.0+, 17pipelined connections, 99                     HTTP/1.1, 17
Proxy-Connection headers, 96, 523                enhanced methods, 444serial loading, 87                               entity header fields, 342(see also TCP)  Host headers (see Host headers)
HTTP messages, 8, 10, 43–73                         limitations, 248entity bodies, 47, 52                            request pipelining, 99example, 11     TRACE method, 155flow, 43     HTTP/2.0, 17
GET messages, processing steps, 171–175       HTTP-EQUIV tag, 187headers (see headers)                         HTTP-NG (HTTP: The Nextmethods (see methods)  Generation), 17, 248–253reason phrases, 47, 50                           current status, 252redirection of, 450                              message transport layer, 249, 250request lines, 48                                modularization, 248robots, setting conditions for, 226           object types, 252request URLs, 46remote invocation layer, 249, 250response lines, 48                               web application layer, 249, 251robots, handling by, 227                   HTTPS, 76, 308–309, 322–336start lines, 47–51                               authentication, 326status codes (see status codes)                  clients, 328–335structure, 44       OpenSSL example, 329–335syntax, 45      CONNECT method, HTTP, 206–208,tracing across proxies, 150–157                         336
Via headers, 151–154                          connecting, 324
Version 0.9 messages, 52                         default port, 323versions, 46, 50OpenSSL, 328–335
HTTP proxy servers, 129–160                         schemes, 308, 323authentication, 156                              site certificate validation, 327client proxy configuration, 141–144              SSL handshake, 324–326client traffic acquisition, 140                  tunnels (see tunnels)deploying, 137                                https scheme, 38interoperation, 157–160                       Hyper Text Caching Protocol (see HTCP)messages, tracing, 150–157                    Hypertext Markup Language (see HTML)proxy and server requests, handling, 146      Hypertext Transfer Protocol (see HTTP)proxy hierarchies, 138public and private proxies, 130               I
TRACE method and network                      IANA (Internet Assigned Numbersdiagnosis, 155  Authority)unsupported headers and methods,                 instance manipulations, registeredhandling, 158   types, 367
URIs, in-flight modification of, 147             MIME charset registry, 602–615uses, 131–136   MIME type registration, 537–539http scheme, 38    registered language tags, 386, 582
HTTP State Management Mechanism, 265             ICP (Internet Cache Protocol), 473
HTTP: The Next Generation (see HTTP-NG)             vs. CARP, 475
HTTP/0.9, 16    ident protocol, 115|

If headers, 431      K
If-Match headers, 519KD(s,d) digest, 291
If-Modified-Since headers, 166, 178, 518              keep-alive connections (HTTP/1.0+), 91–96
If-None-Match headers, 180, 519                            (see also persistent connections)
If-Range headers, 519keyed ciphers, 311
If-Unmodified-Since headers, 520                      keys, 311, 312image/* MIME types, 561–562                                key length, 313inbound messages, 43inbound proxies, 138 Lindexes, full-text, 243informationalstatuscodes(100-199), 59–60,             language preferences, configuring, 389505 language tags, 370, 384, 581–600ingress proxies, 137      case sensitivity, 386instance manipulations, 359, 367–369                       first subtag rules, 581delta encodings, 365IANA-registered tags, 386, 582
IANA registered types, 367                           reference tables, 389range requests, 364 second subtag rules, 582integrity protection, 299 subtags, 386intercepting proxies, 140, 146                             syntax, 385
URI resolution with, 149                        Last-Modified dates, using, 181internationalization Last-Modified headers, 520date formats, 392                               layering of protocols, 12domain names, 392                               layout delay, preventing, 88headers, character set for, 392                 ligatures, 378
ISO 3166 country codes, 594–600                 listExploreDocs element, POST request
ISO 639 language codes, 583–594body, 427languages, administrative                       listHiddenDocs element, POST requestorganizations, 601  body, 427
URL variants, 395                               LM-Factor algorithm, 184
Internet Assigned Numbers Authority (see              load balancing, 449
IANA)    DNS round robin, 454–457
Internet Cache Protocol (ICP), 473                               single clients and, 456
Internet search engines (see search engines)          loading, serial, 87
IP address forwarding, 460                            Location headers, 520
IP (Internet protocol) addresses, 13                  LOCK method, 433clients, identification using, 259                   status codes, 436virtual hosting and, 416                        lock refreshes, 435
IP MAC forwarding, 459                                <lockdiscovery> element, 435
IP packets, 76       <lockinfo> element, 434iPlanet web servers, 110                              locking, 433
ISO 3166 country codes, 594–600                       <locktoken>element, 434
ISO 639 language codes, 583–594                       Lock-Token headers, 431iso-2022-jp encoding, 382                             logging, 483–492iso-8859 character set, 380                                commonly logged fields, 483interpretation, 484
J                         log formats, 484–492
Japanese encodings, 382, 383    Combined Log Format, 485
JIS X 0201, 0208, and 0212 character                             Common Log Format, 484sets, 380      Netscape Extended 2 Log
Joe’s Hardware Store web site, xiv   Format, 487–489|

Netscape Extended Log Format, 486          MIME (Multipurpose Internet Mail
Squid Proxy Log Format, 489–492                            Extensions)privacy concerns, 495                                charset encoding tags, 374loops (web robots), 217   charset registry, 602–615preferred MIME names, 603
M                         “multipart” email messages, 349
MAC (Media Access Control) addresses, 459                  (see also MIME types)magic typing, 126    MIME types, 5, 533–569mailto scheme, 38         application/* types, 540–557man-in-the-middle attacks, 304                             audio/* types, 557–559manual client proxy configuration, 142                     chemical/* types, 559–561master origin server, 420 composite types, 534max-age response headers, 183                              discrete types, 534
Max-Forwards headers, 155, 521                             documentation, 534
MD5, 288, 291, 293, 347   experimental types, 569
MD5-sess, 291, 293        IANA registration, 537–539
Media Access Control (MAC) addresses, 459                        media type registry, 539media types, 348                process, 537multipart, 349            registration trees, 537message body, 44                rules, 538message digest algorithms, 291–294                               template, 538symmetric authentication, 298                        image/* types, 561–562message integrity protection, 299                          message/* types, 563message/* MIME types, 563 model/* types, 563message transport layer (HTTP-NG), 249,                    multipart/* types, 535, 564250      primary types, 536message truncation, 344   structure, 534messages (see HTTP messages)                               syntax, 536<META HTTP-EQUIV> tag, 187tables, 539–569
META tag directives, 239  text/* types, 565–568meta-information, 43      video/* types, 568
Meter headers, 196, 493                               MIME typing, 125methods, 46, 48, 53–59                                MIME::Base64 Perl module, 572
CONNECT, 206–208, 336                           MIME-Version headers, 521
DELETE, 58, 441mirrored server farms, 420extension methods, 58                           MKCOL method, 440
GET, 53        mod_cern_meta module, Apache web
HEAD, 54                       server, 186
OPTIONS, 57, 159, 445                           model/* MIME types, 563
POST, 55       mod_expires module, Apache web
PUT, 54, 444                   server, 186redirection status codes and, 64                mod_headers module, Apache web
TRACE, 55                      server, 186unsupported, handling, 158                      MOVE method, 442
Microsoft FrontPage (see FrontPage)                   multi-homed servers, 425
Microsoft Internet Explorer                           multipart form-data encodings, 349cookie storage, 266                             multipart/* MIME types, 535, 564language preference configuration, 389          multiplexed architectures, 119
Microsoft web servers, 110I/O web servers, 119multithreaded web servers, 119|
multiprocess, multithreaded web                       OPTIONS method, 57, 445servers, 118                              requests, 159
Multipurpose Internet Mail Extensions (see                       response headers to, 445
MIME; MIME types)                    origin servers, 420<multistatus> element, 438                            outbound messages, 43
MultiViews directive, 400                             outbound proxies, 138must-revalidate response headers, 183                 Overwrite headers, 432, 442
N                    P
Nagle’s algorithm, 84PAC files, 142namespace management, 439–444                              autodiscovery, 465methods used for, 440                           PAC (Proxy Auto-Configuration)status codes, 443         protocol, 463namespaces, 388      parallel connections, 88–90language subtags, 387–389                            impression of speed, 90
XML, 430            loading speed, 88
NAT (Network Address Translation), 460                     open connection limits, 90
NECP (Network Element Control                              persistent connections vs., 91
Protocol), 461                       parameters component, URLs, 28negotiation headers, 71                               parent and child relationships, 138
Netscape Extended 2 Log Format, 487–489               parent caches, 169
Netscape Extended Log Format, 486                     password component, URLs, 27
Netscape Navigator   passwordscookies             digest authentication password file,storage, 265              risks, 305
Version 0, 269 digest authentication, security, 287language preference configuration, 389          path component, URLs, 28
Network Address Translation (NAT), 460                Perl code for interaction with robots.txtnetwork bottlenecks, 161             files, 235
Network Element Control Protocol                      Perl web server, 111(NECP), 461                          persistent connections, 90–99network exchange proxies, 137                              Content-Length headers and, 345news scheme, 39           keep-alive connectionsno-cache response headers, 182       (HTTP/1.0+), 91–96nonces, 289–298           parallel connections vs., 91next nonce pregeneration, 297                        restrictions and rules, 98reuse, 297     persistent uniform resource locatorsselection, 298                 (PURLs), 40time-synchronized generation, 297               pipelined connections, 99no-store response headers, 182                        plaintext, security and, 310.nsconfig, 428       port component, URLS, 27port exhaustion, 85
O                    port numbers, 13, 77object types, HTTP-NG, 252default values, 13one-way digests, 288      virtual hosting and, 415one-way hashes, 291  POST method, 55functions, 289 POST requests, FrontPage and, 425opaquelocktoken scheme, 433, 434                      Pragma headers, 68, 182, 521
OpenSSL, 328–335          Pragma: no-cache headers, 182example client, 329–335                         precompiled dictionary attacks, 305|
preemptive authorization, 295                              URIs, in-flight modification of, 147presence bit arrays (web robots), 218                      uses, 131–136presentation forms, 378   (see also HTTP proxy servers)primary subtags, 386 Proxy-Authenticate headers, 522privacy, 495         proxy authentication, 283cookies and, 275                                Proxy-Authorization headers, 522robots and, 229Proxy Auto-configuration (PAC)private caches, 168                  protocol, 142, 463private docroots, 122     (see also PAC files)private proxies, 130 proxy cache hierarchies, 169<prop> element, 437  proxy caches, 169<propertyupdate> element, 438                         Proxy-Connection headers, 96, 523
PROPFIND method, 437 proxy redirectionserver response elements, 438                        CARP (Cache Array Routing
XML elements, used with, 437   Protocol), 475–478<propname> element, 437   HTCP (Hyper Text Caching
PROPPATCH method, 438–439            Protocol), 478–481
XML elements, used with, 438                         ICP (Internet Cache Protocol), 473<propstat> element, 438                               proxy redirection methods, 462–469“protecting the header”, 87                                explicit browser configuration, 463protection spaces, 295, 301     disadvantages, 463protocol gateways, 200    PAC (Proxy Auto-configuration)protocol stack, 76                   protocol, 463protocols, layering of, 12WPAD (see WPAD)proxies              proxy request headers, 70100 Continue status code and, 60                proxy servers, 18authentication, 156 networks, use in securing, 335deploying, 137      (see also HTTP proxy servers)egress proxies, 137                             proxy URIs vs. server URIs, 144gateways, contrasted with, 130                  public caches, 169hostile, 304   Public headers, 523
HTTP proxies (see HTTP proxy servers)           public proxies, 130ingress proxies, 137                            public-key cryptography (see underintercepting proxies, 140, 146 cryptography)
URI resolution with, 149                   publishing systemsinteroperation, 157–160                              FrontPage (see FrontPage)messages, tracing, 150–157                           WebDAV (see WebDAV)“missing scheme/host/port”                           (see also web publishing)problem, 146                         PURLs (persistent uniform resourceproxy and server requests, handling, 146                        locators), 40proxy hierarchies, 138                          PUT method, 54, 444content routing, 139dynamic parent selection, 140              Qpublic and private, 130                         qop (quality of protection), 293redirection and, 449enhancements, 299surrogates, 146quality factors, 371transparent negotiation, 400                    quality of protection (see qop)transparent proxies, 140                        quality values, 398tunnels and, 335                                query component, URLs, 29|

R                request messages, 10, 45, 47
Range headers, 524  methods, 46range requests, 363 request URLs, 46realm directive, 280                              request method (HTTP), 294realms (protection spaces), 301                   request pipelining, 99reason phrases, 9, 47, 50, 505–507                request security headers, 70redirection, 126, 448–481                         reserved characters (see restricted characters)anycast addressing, 457                       resource gateways, 203enhanced DNS-based algorithms, 457            resource locator servers, 40
IP address forwarding, 460                    resource paths, 24
IP MAC forwarding, 459                        resources, mapping and accessing of, 120load balancing and, 127, 449                  response digest reference code, 577methods, 450 response entities, 125
DNS redirection, 453–457                   response headers (see under headers)
HTTP redirection, 452–453                  response lines, 48proxy methods, 462–469                     response messages, 10, 45, 125proxy techniques, 451                      restricted characters, 36
NECP (Network Element Control                 Retry-After headers, 525
Protocol), 461                          revalidate hits, 165protocols, 450                                revalidate misses, 166proxies, role in, 449                         revalidations, 165–166purpose, 449 reverse proxies, 134, 137techniques, 448                               RobotRules object, 235temporary redirect, 126                       robotstransparent redirection, 469                     conditional HTTP requests, 226
URL augmentation, 126                            entities and, 227
WCCP (Web Cache Coordination                     etiquette, 239–241
Protocol), 470–473                         excluding from web sites, 229–239redirection status codes (300-399), 61–64,           HTML robot control META tags, 237505       HTTP and, 225
Referer headers, 259, 524                               request headers, identifying, 225robots and, 225 META directives, 237relative URLs, 30–34Meta HTML tags and, 227bases, 31       privacy and, 229resolving, 33   problems caused by, 228relays, 212         response handling, 227keep-alive connections and, 212                  search engines, 242–246relevancy ranking, 245                               status codes, handling of, 227reliable bit pipe, 75                                (see also robots.txt files)remote invocation layer (HTTP-NG), 249,           Robots Exclusion Standard, 230250    robots.txt files, 229remote procedure call (RPC) protocol,                caching and expiration, 234
FrontPage, 426                             comments, 234<remove> element, 439                                disallow and allow lines, 233replay attacks, 284, 289, 303                        example, 236preventing, 289 fetching, 231replica origin servers, 420                          records, 232request digest reference code, 577                   specification, changes in, 234request digests, 294status codes for retrievals, 231request headers (see under headers)                  syntax, 232request lines, 48   User-Agent line, 232web sites and, 231|
root set, 216             delta encodings, impact on, 368root web, 425             error status codes (500-599), 66round-robin load balancing, 453                            extension APIs, 205
DNS round robin, 454–457                             FrontPage Server Extensions (FPSE), 424routers and anycast addressing, 457                        Host headers, interpreting, 419
RPC protocol, FrontPage, 426                               multi-homed servers, 425
RSA algorithm, 317        revalidation, 177rtsp, rtspu schemes, 39   server farms, 413master origin servers, 420
S                               replica origin servers, 420schemes, 7, 24, 27        supported functionality, identifying, 159common formats, 38  validation, 175
URIs for, 499–504                               server-side extensions, 400search engines, 242–246                               server-side gateways, 199architecture, 242   security gateways, 202full-text indexes, 243                               web gateways, 200queries, 244   server-side includes (SSIs), 124relevancy ranking, 245                          service groups, 472results, sorting and formatting, 244            service_name element, POST requestspoofing, 245                  body, 427search trees, 218    sessions, cookies and, 264second subtag, 388        tracking with, 272
Secure Sockets Layer (see SSL)                        <set> element, 438security             Set-Cookie headers, 264, 525basic authentication and, 283                        caching and, 273cookies and, 275    domain attributes, 267digest authentication and, 286                  Set-Cookie2 headers, 271, 526firewalls, 132 shared hosting, 413–419
FrontPage, security model, 428                  shared keys, 315
HTTP authentication schemes, associated         shared proxies, 130risks, 303                           sibling caches, 171key length and, 314                             Simple Object Access Protocol (SOAP), 206multiple authentication schemes,                single-threaded web servers, 118risks, 303                           site certificate validation, 327security realms, 280                            slow hits, 165
WPAD security hole, 468                         s-maxage response headers, 183segments, 76         SOAP (Simple Object Access Protocol), 206“sender silly window syndrome”, 84                    sockets API, 78serial loading, 87        calls, 78serial transaction delays, 87                         software web servers, 110server error status codes (500-599), 66, 505          spiders, 215server farms, 413    spoofing, 245mirrored servers, 420                           Squid Proxy Log Format, 489–492
Server headers, 525  SSIs (server-side includes), 124
Server response header field, 154                     SSL (Secure Sockets Layer), 308server URIs vs. proxy URIs, 144                            authentication, 326server-driven negotiation, 397–400                         handshakes, 324–326server-side extensions, 400                          HTTPS, integration in, 323servers                   OpenSSL, 328–335100 Continue status codes and, 60                    site certificate validation, 327accelerators, 134   tunnels, 209certificates, 326         vs. HTTP/HTTPS gateways, 210|

SSLeay, 329         port numbers and, 77(see also OpenSSL)                                reliability, 74start lines, 47–51  serial loading, 87status codes, 9, 49, 59–67                           sockets API, 78classes, 49      TCP slow start, 83client error codes (400-499), 65–66, 505       TCP/IP (Transmission Control
HTTP codes, 505–507    Protocol/Internet Protocol), 11informational status codes                     TCP_NODELAY parameter, 84(100-199), 59–60, 505                    TE headers, 526
LOCK method, 436                               Telnet example, 15–16namespace management methods, 443              telnet scheme, 40redirection status codes                       text/* MIME types, 565–568(300-399), 61–64, 505                    <timeout> element, 434robots, handling by, 227                       Timeout headers, 432, 435server error codes (500-599), 66, 505          TIME_WAIT accumulation, 85success status codes (200-299), 61, 505        Title headers, 527
UNLOCK method, 436                             TLS (Transport Layer Security), 308<status> element, 438                                (see also SSL)strong validators, 181, 363                       TRACE method, 55, 155–157subtags, 386, 389   Max-Forwards headers and, 155first subtag, 387                              Trailer headers, 526second subtag, 388                             transactional direction, messages, 43subweb, 426      transactions, 8success status codes (200-299), 61, 505           transcoders, 135surrogate caches, 421                             transcodings, 395, 403–406surrogate proxies, 137                               content injection, 405surrogates, 134, 146format conversion, 404symbolic links and cycles, 220                       information synthesis, 404symmetric authentication, 298                        types, 404symmetric-key ciphers, 313                           vs. static pregenerated content, 405syntax, headers, 51                               transfer encodings, 354–359
Transfer-Encoding headers, 527
T                Transmission Control Protocol/Internet
TCP slow start (see under TCP)                             Protocol (TCP/IP), 11
TCP (Transmission Control                         transparent negotiation, 400–403
Protocol), 74–86                            caching, 401connections, 75  Vary headers, 402distinguishing values, 77                   transparent proxies, 140establishing, 13, 79                        transparent redirection, 469web server handling of, 115                 Transport Layer Security (see TLS)(see also HTTP connections)                 trees, 218network delays, causes, 80                     truncation detection, 344performance considerations, 80–86              tunnels, 19, 206–212connection handshake delays, 82                authentication, 211delayed acknowledgements, 83                   HTTPS SSL, 335–336delays, most common causes, 81–86              security, 211
Nagle’s algorithm, 84                          SSL tunnels vs. HTTP/HTTPSport exhaustion, 85 gateways, 210
TCP slow start, 83                          type negotiation, 126
TCP_NODELAY, 84                             type-map files, 399
TIME_WAIT accumulation, 85                  type-o-serve web server, 112|

U                    user agents, 19
UA- headers, 527     user component, URLs, 27
UCS (Universal Character Set), 381                    user home directory docroots, 122uncachable documents, 182                             User-Agent headers, 225, 259, 528uniform resource identifiers (see URIs)               user-tracking systems, content injectionuniform resource locators (see URLs) and, 405uniform resource names (see URNs)                     UTF-8 encoding, 382
Universal Character Set (UCS), 381                    V
UNLOCK method, 435status codes, 436                               validators, 362
Upgrade headers, 528      Last-Modified dates, using, 181upstream message flow, 44 strong and weak, 181, 363uri-directive-value, 294                              variable-length codes, 372
URIs (uniform resource identifiers), 6, 24            variable-width modal encodings, 381client autoexpansion and hostname               variable-width nonmodal encodings, 381resolution, 147                      Vary headers, 402, 529intercepting proxies, resolution with, 149      Vermeer Technologies, Inc., 424internationalization, 389–391                   version numbers, HTTP messages, 50resolution, 144–150                             Via headers, 151–154, 529proxy vs. server, 144                           gateways and, 153with a proxy, explicit, 149                     privacy and security, 154without a proxy, 148                            request and response paths, 153rewriting, 302      Server response header fields and, 154schemes, 499–504    syntax, 152
URLs (uniform resource locators), 6, 23–42            video/* MIME types, 568advantages of, 25                               virtual hosting, 225, 413–419aliases, 219        digital certificates and, 328augmentation, 126   docroots, 121automatic expansion, 34                              GET command, problems with, 414canonical form, 37  Host headers, by, 417canonicalizing, 220       (see also Host headers)character sets, 35, 35–38                            IP addresses, by, 416
CURLs, 465                problems for hosters, 417examples, 13        port numbers, by, 415fat URLs, client identification using, 262           server requests, absence of hostinformational resources, 41    information in HTTP/1.0, 413portability, 35           fixes, 415
PURLs, 40           URL paths, by, 415relative URLs, 30–34                            virtual servers, 425restricted characters, 36schemes, 7     Wschemes (see schemes)                           Want-Digest headers, 348shortcuts, 30  Warning headers, 530structure, 24       Heuristic Expiration Warning, 184syntax, 26–30  WCCP (Web Cache Coordination
URIs, as a subset of, 24       Protocol), 470–473variants, 395       GRE packet encapsulation, 472virtual hosting, paths, 415                          heartbeat messages, 473
URNs (uniform resource names), 7, 40                       load balancing, 473standardization, 41 operation, 470
US-ASCII character set, 379|

WCCP (continued)          implementations, 109service groups, 472 logging, 127versions, 470       MIME typing, 125
WCCP2 messages, 470–472                              multiplexed I/O servers, 119header and components, 471                      multiplexed multithreaded servers, 119weak validators, 181, 363 multiprocess, multithreaded servers, 118web application layer (HTTP-NG), 249, 251                  Perl example, 111web architecture, 17–20   redirection responses, 126
Web Cache Coordination Protocol (see                       request handling, 449
WCCP)    request messagesweb caches, 18, 161             receiving, 116(see also caches)         structure of, 117web clients and servers, 4resources, mapping and accessing of, 120
Web Distributed Authoring and Versioning                   response entities, 125(see WebDAV)                              response messages, 125web hosting, 411–422      responses, sending, 127hosting services, 411                                single-threaded servers, 118shared or virtual hosting, 413–419                   software web servers, 110web pages, 9              SSIs (server-side includes), 124
Web Proxy Autodiscovery Protocol (see                      tasks of, 113–114
WPAD)    type negotiation, 126web proxy servers, 129    type-o-serve, 112web publishing            user authentication (see authentication)collaborative authoring, 429                    web services, 206publishing systems, 424                         web sitesweb resources, 4          personalizing of user experience, 257web robots, 215–246       reliability, improving, 419–422crawlers (see crawlers)   mirrored server farms, 420examples, 215       robots, exclusion, 229–239spiders, 215        robots.txt files, 231web servers, 109          speed, improving, 422access controls, 124                            web tunnels (see tunnels)appliances, 111WebDAV (Web Distributed Authoring andclient hostname identification, 115                             Versioning), 429–446client identification, 257–276                       collaborative authoring and, 429cookies, using, 263–276                         collections, 439–444fat URLs, using, 262                            DAV header, 431headers, using, 258                             Depth header, 431
IP address, using, 259                          Destination header, 431user login, using, 260                          enhanced HTTP/1.1 methods, 444connection input/output processing                   headers, 431architectures, 117                        If header, 431connections, handling new, 115                       LOCK method, 433directory listings, 122                              locking, 432docroots, 120       Lock-Token headers, 431dynamic content resource mapping, 123                META data, embedding, 436–439embedded web servers, 111                            methods, 429explicit typing, 126namespace management, 439–444
HTTP proxy servers (see HTTP proxy                   OPTIONS method, 445servers) Overwrite headers, 432ident protocol, 115 overwrites, preventing, 432|

PROPATCH method, 438–439                         timeouts, 468properties, 436–439                              timing, 468
PROPFIND method, 437                          WWW-Authenticate headers, 281, 531
PUT method, 444 directives, 574–575
Timeout headers, 432                          WWW::RobotRules object, 235
UNLOCK method, 435version management, 446                       X
XML and, 430 X.509v3 certificates, 320
WebMUX protocol, 250, 251                        X-Cache headers, 531
WPAD (Web Proxy Autodiscovery                    X-Forwarded-For headers, 260, 531
Protocol), 143, 464–469                 XML (Extensible Markup Language), 206,administration, 469   430
CURLs, 465      elements used in locking, 434
DHCP discovery, 467                           namespace, 430
DNS A record lookup, 467                      schema definition, XML documents, 430
PAC file retrieval, 467                       WebDAV and, 430
PAC file autodiscovery, 465                   X-Pad headers, 531resource-discovery algorithm, 143, 465        X-Serial-Number headers, 532spoofing, 468|

About the Authors
David Gourley is the Chief Technology Officer of Endeca, where he leads theresearch and development of Endeca’s products. Endeca develops Internet andintranet information-access solutions that provide new ways to navigate and exploreenterprise data. Prior to working at Endeca, David was a member of the foundingengineering team at Inktomi, where he helped develop Inktomi’s Internet searchdatabase and was a key developer of Inktomi’s web caching products.
David earned a B.A. in Computer Science from the University of California at
Berkeley, and he holds several patents in web technologies.
BrianTotty was most recently the Vice President of R&D at Inktomi Corporation (acompany he helped found in 1996), where he led research and development of webcaching, streaming media, and Internet search technologies. Formerly, he was ascientist at Silicon Graphics, where he designed and optimized software for high-performance networking and supercomputing systems. Before that, he held an engi-neering position at Apple Computer’s Advanced Technology Group.
Brian holds a Ph.D. in Computer Science from the University of Illinois at Urbana-
Champaign and a B.S. degree in Computer Science and Electrical Engineering from
MIT, where he received the Organick award for computer systems research. He alsohas developed and taught award-winning courses on Internet technology for the
University of California Extension system.
MarjorieSayer writes about network caching software at Inktomi Corporation. Afterearning M.A. and Ph.C. degrees in Mathematics at the University of California at
Berkeley, she worked on mathematics curriculum reform. Since 1990 she has writtenabout energy resource management, parallel systems software, telephony, andnetworking.
Sailu Reddy currently leads the development of embedded performance-enhancing
HTTPproxies at Inktomi Corporation. Sailu has been developing complex softwaresystems for 12years and has been deeply involved in web infrastructure research anddevelopment since 1995. He was a core engineer of Netscape’s first web server andweb proxy products and of several following generations. His technical experienceincludes HTTP applications, data compression techniques, database engines, andcollaboration management. Sailu earned an M.S. in Information Systems from the
University of Arizona and holds several patents in web technologies.
AnshuAggarwal is a Director of Engineering at Inktomi Corporation. He leads theprotocol-processing engineering teams for Inktomi’s web caching products, and hehas been involved in the design of web technologies at Inktomi since 1997. Anshuholds M.S. and Ph.D. degrees in Computer Science from the University of Coloradoat Boulder, specializing in memory-consistent techniques for distributed multipro-cessor machines. He also holds M.S. and B.S. degrees in Electrical Engineering.
Anshu is the author of several technical papers and holds two patents.
Colophon
Our look is the result of reader comments, our own experimentation, and feedbackfrom distribution channels. Distinctive covers complement our distinctive approachto technical topics, breathing personality and life into potentially dry subjects.
The animal on the cover of HTTP:The Definitive Guide is a thirteen-lined groundsquirrel (Spermophilus tridecemlineatus), common to central North America. True toits name, the thirteen-lined ground squirrel has thirteen stripes with rows of lightspots that run the length of its back. Its color pattern blends into its surroundings,protecting it from predators. Thirteen-lined ground squirrels are members of thesquirrel family, which includes chipmunks, ground squirrels, tree squirrels, prairiedogs, and woodchucks. They are similar in size to the eastern chipmunk but smallerthan the common gray squirrel, averaging about 11 inches in length (including a 5–6inch tail).
Thirteen-lined ground squirrels go into hibernation in October and emerge in late
March or early April. Each female usually produces one litter of 7–10 young each
May.Theyoungleavetheburrowsatfourtofiveweeksofageandarefullygrownatsix weeks. Ground squirrels prefer open areas with short grass and well-drainedsandy or loamy soils for burrows, and they avoid wooded areas—mowed lawns, golfcourses, and parks are common habitats.
Ground squirrels can cause problems when they create burrows, dig up newlyplanted seeds, and damage vegetable gardens. However, they are important prey toseveral predators, including badgers, coyotes, hawks, weasels, and various snakes,and they benefit humans directly by feeding on many harmful weeds, weed seeds,and insects.
Rachel Wheeler was the production editor and copyeditor for HTTP:The Definitive
Guide. Leanne Soylemez, Sarah Sherman, and Mary Anne Weeks Mayo providedquality control, and Derek Di Matteo and Brian Sawyer provided production assis-tance. John Bickelhaupt wrote the index.
Ellie Volckhausen designed the cover of this book, based on a series design by Edie
Freedman. The cover image is an original illustration created by Lorrie LeJeune.
Emma Colby produced the cover layout with QuarkXPress 4.1 using Adobe’s ITC
Garamond font.
David Futato and Melanie Wang designed the interior layout, based on a seriesdesign by David Futato. Joe Wizda prepared the files for production in FrameMaker5.5.6. The text font is Linotype Birka; the heading font is Adobe Myriad Condensed;and the code font is LucasFont’s TheSans Mono Condensed. The illustrations thatappear in the book were produced by Robert Romano and Jessamyn Read using
Macromedia FreeHand 9 and Adobe Photoshop 6. This colophon was written by
Rachel Wheeler.